{"ast":null,"code":"import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBFormat, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping } from '../../constants.js';\nimport { MathUtils } from '../../math/MathUtils.js';\n\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n  var isWebGL2 = capabilities.isWebGL2;\n  var maxTextures = capabilities.maxTextures;\n  var maxCubemapSize = capabilities.maxCubemapSize;\n  var maxTextureSize = capabilities.maxTextureSize;\n  var maxSamples = capabilities.maxSamples;\n\n  var _videoTextures = new WeakMap();\n\n  var _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n  // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n  // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n  var useOffscreenCanvas = false;\n\n  try {\n    useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext(\"2d\") !== null;\n  } catch (err) {// Ignore any errors\n  }\n\n  function createCanvas(width, height) {\n    // Use OffscreenCanvas when available. Specially needed in web workers\n    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n  }\n\n  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n    var scale = 1; // handle case if texture exceeds max size\n\n    if (image.width > maxSize || image.height > maxSize) {\n      scale = maxSize / Math.max(image.width, image.height);\n    } // only perform resize if necessary\n\n\n    if (scale < 1 || needsPowerOfTwo === true) {\n      // only perform resize for certain image types\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        var floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n        var width = floor(scale * image.width);\n        var height = floor(scale * image.height);\n        if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n        var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n        canvas.width = width;\n        canvas.height = height;\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, width, height);\n        console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n        return canvas;\n      } else {\n        if ('data' in image) {\n          console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n        }\n\n        return image;\n      }\n    }\n\n    return image;\n  }\n\n  function isPowerOfTwo(image) {\n    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n  }\n\n  function textureNeedsPowerOfTwo(texture) {\n    if (isWebGL2) return false;\n    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function textureNeedsGenerateMipmaps(texture, supportsMips) {\n    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n  }\n\n  function generateMipmap(target, texture, width, height) {\n    _gl.generateMipmap(target);\n\n    var textureProperties = properties.get(texture); // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\n    textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;\n  }\n\n  function getInternalFormat(internalFormatName, glFormat, glType) {\n    if (isWebGL2 === false) return glFormat;\n\n    if (internalFormatName !== null) {\n      if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n      console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n    }\n\n    var internalFormat = glFormat;\n\n    if (glFormat === _gl.RED) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\n    }\n\n    if (glFormat === _gl.RGB) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\n    }\n\n    if (glFormat === _gl.RGBA) {\n      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\n      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\n      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\n    }\n\n    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {\n      extensions.get('EXT_color_buffer_float');\n    }\n\n    return internalFormat;\n  } // Fallback filters for non-power-of-2 textures\n\n\n  function filterFallback(f) {\n    if (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n      return _gl.NEAREST;\n    }\n\n    return _gl.LINEAR;\n  } //\n\n\n  function onTextureDispose(event) {\n    var texture = event.target;\n    texture.removeEventListener('dispose', onTextureDispose);\n    deallocateTexture(texture);\n\n    if (texture.isVideoTexture) {\n      _videoTextures.delete(texture);\n    }\n\n    info.memory.textures--;\n  }\n\n  function onRenderTargetDispose(event) {\n    var renderTarget = event.target;\n    renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n    deallocateRenderTarget(renderTarget);\n    info.memory.textures--;\n  } //\n\n\n  function deallocateTexture(texture) {\n    var textureProperties = properties.get(texture);\n    if (textureProperties.__webglInit === undefined) return;\n\n    _gl.deleteTexture(textureProperties.__webglTexture);\n\n    properties.remove(texture);\n  }\n\n  function deallocateRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    if (!renderTarget) return;\n\n    if (textureProperties.__webglTexture !== undefined) {\n      _gl.deleteTexture(textureProperties.__webglTexture);\n    }\n\n    if (renderTarget.depthTexture) {\n      renderTarget.depthTexture.dispose();\n    }\n\n    if (renderTarget.isWebGLCubeRenderTarget) {\n      for (var i = 0; i < 6; i++) {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n      }\n    } else {\n      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n      if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n    }\n\n    properties.remove(renderTarget.texture);\n    properties.remove(renderTarget);\n  } //\n\n\n  var textureUnits = 0;\n\n  function resetTextureUnits() {\n    textureUnits = 0;\n  }\n\n  function allocateTextureUnit() {\n    var textureUnit = textureUnits;\n\n    if (textureUnit >= maxTextures) {\n      console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n    }\n\n    textureUnits += 1;\n    return textureUnit;\n  } //\n\n\n  function setTexture2D(texture, slot) {\n    var textureProperties = properties.get(texture);\n    if (texture.isVideoTexture) updateVideoTexture(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      var image = texture.image;\n\n      if (image === undefined) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n      } else if (image.complete === false) {\n        console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n      } else {\n        uploadTexture(textureProperties, texture, slot);\n        return;\n      }\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n  }\n\n  function setTexture2DArray(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\n  }\n\n  function setTexture3D(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\n  }\n\n  function setTextureCube(texture, slot) {\n    var textureProperties = properties.get(texture);\n\n    if (texture.version > 0 && textureProperties.__version !== texture.version) {\n      uploadCubeTexture(textureProperties, texture, slot);\n      return;\n    }\n\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n  }\n\n  var wrappingToGL = {\n    [RepeatWrapping]: _gl.REPEAT,\n    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\n    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT\n  };\n  var filterToGL = {\n    [NearestFilter]: _gl.NEAREST,\n    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\n    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\n    [LinearFilter]: _gl.LINEAR,\n    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\n    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR\n  };\n\n  function setTextureParameters(textureType, texture, supportsMips) {\n    if (supportsMips) {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\n    } else {\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n      if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\n      }\n\n      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n      }\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n      _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n        console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n      }\n    }\n\n    var extension = extensions.get('EXT_texture_filter_anisotropic');\n\n    if (extension) {\n      if (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null) return;\n      if (texture.type === HalfFloatType && (isWebGL2 || extensions.get('OES_texture_half_float_linear')) === null) return;\n\n      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n        properties.get(texture).__currentAnisotropy = texture.anisotropy;\n      }\n    }\n  }\n\n  function initTexture(textureProperties, texture) {\n    if (textureProperties.__webglInit === undefined) {\n      textureProperties.__webglInit = true;\n      texture.addEventListener('dispose', onTextureDispose);\n      textureProperties.__webglTexture = _gl.createTexture();\n      info.memory.textures++;\n    }\n  }\n\n  function uploadTexture(textureProperties, texture, slot) {\n    var textureType = _gl.TEXTURE_2D;\n    if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\n    if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\n    initTexture(textureProperties, texture);\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(textureType, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n    var needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n    var image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n    var supportsMips = isPowerOfTwo(image) || isWebGL2,\n        glFormat = utils.convert(texture.format);\n    var glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n    setTextureParameters(textureType, texture, supportsMips);\n    var mipmap;\n    var mipmaps = texture.mipmaps;\n\n    if (texture.isDepthTexture) {\n      // populate depth texture with dummy data\n      glInternalFormat = _gl.DEPTH_COMPONENT;\n\n      if (isWebGL2) {\n        if (texture.type === FloatType) {\n          glInternalFormat = _gl.DEPTH_COMPONENT32F;\n        } else if (texture.type === UnsignedIntType) {\n          glInternalFormat = _gl.DEPTH_COMPONENT24;\n        } else if (texture.type === UnsignedInt248Type) {\n          glInternalFormat = _gl.DEPTH24_STENCIL8;\n        } else {\n          glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n        }\n      } else {\n        if (texture.type === FloatType) {\n          console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n        }\n      } // validation checks for WebGL 1\n\n\n      if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n        // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n          texture.type = UnsignedShortType;\n          glType = utils.convert(texture.type);\n        }\n      }\n\n      if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\n        // Depth stencil textures need the DEPTH_STENCIL internal format\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n        // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n        if (texture.type !== UnsignedInt248Type) {\n          console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n          texture.type = UnsignedInt248Type;\n          glType = utils.convert(texture.type);\n        }\n      } //\n\n\n      state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n    } else if (texture.isDataTexture) {\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n          state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n\n        texture.generateMipmaps = false;\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n        textureProperties.__maxMipLevel = 0;\n      }\n    } else if (texture.isCompressedTexture) {\n      for (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n        mipmap = mipmaps[_i];\n\n        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n          if (glFormat !== null) {\n            state.compressedTexImage2D(_gl.TEXTURE_2D, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n          } else {\n            console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n          }\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n        }\n      }\n\n      textureProperties.__maxMipLevel = mipmaps.length - 1;\n    } else if (texture.isDataTexture2DArray) {\n      state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      textureProperties.__maxMipLevel = 0;\n    } else if (texture.isDataTexture3D) {\n      state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n      textureProperties.__maxMipLevel = 0;\n    } else {\n      // regular Texture (image, video, canvas)\n      // use manually created mipmaps if available\n      // if there are no manual mipmaps\n      // set 0 level mipmap and then use GL to generate other mipmap levels\n      if (mipmaps.length > 0 && supportsMips) {\n        for (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n          mipmap = mipmaps[_i2];\n          state.texImage2D(_gl.TEXTURE_2D, _i2, glInternalFormat, glFormat, glType, mipmap);\n        }\n\n        texture.generateMipmaps = false;\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\n        textureProperties.__maxMipLevel = 0;\n      }\n    }\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      generateMipmap(textureType, texture, image.width, image.height);\n    }\n\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  }\n\n  function uploadCubeTexture(textureProperties, texture, slot) {\n    if (texture.image.length !== 6) return;\n    initTexture(textureProperties, texture);\n    state.activeTexture(_gl.TEXTURE0 + slot);\n    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n    var isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n    var isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n    var cubeImage = [];\n\n    for (var i = 0; i < 6; i++) {\n      if (!isCompressed && !isDataTexture) {\n        cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n      } else {\n        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n      }\n    }\n\n    var image = cubeImage[0],\n        supportsMips = isPowerOfTwo(image) || isWebGL2,\n        glFormat = utils.convert(texture.format),\n        glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n    setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\n    var mipmaps;\n\n    if (isCompressed) {\n      for (var _i3 = 0; _i3 < 6; _i3++) {\n        mipmaps = cubeImage[_i3].mipmaps;\n\n        for (var j = 0; j < mipmaps.length; j++) {\n          var mipmap = mipmaps[j];\n\n          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n            if (glFormat !== null) {\n              state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n            } else {\n              console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n        }\n      }\n\n      textureProperties.__maxMipLevel = mipmaps.length - 1;\n    } else {\n      mipmaps = texture.mipmaps;\n\n      for (var _i4 = 0; _i4 < 6; _i4++) {\n        if (isDataTexture) {\n          state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n          for (var _j = 0; _j < mipmaps.length; _j++) {\n            var _mipmap = mipmaps[_j];\n            var mipmapImage = _mipmap.image[_i4].image;\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n          }\n        } else {\n          state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n          for (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n            var _mipmap2 = mipmaps[_j2];\n            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n          }\n        }\n      }\n\n      textureProperties.__maxMipLevel = mipmaps.length;\n    }\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      // We assume images for cube map have the same size.\n      generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\n    }\n\n    textureProperties.__version = texture.version;\n    if (texture.onUpdate) texture.onUpdate(texture);\n  } // Render targets\n  // Setup storage for target texture and bind it to correct framebuffer\n\n\n  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n    var glFormat = utils.convert(renderTarget.texture.format);\n    var glType = utils.convert(renderTarget.texture.type);\n    var glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n    state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n      var glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n      if (isMultisample) {\n        var depthTexture = renderTarget.depthTexture;\n\n        if (depthTexture && depthTexture.isDepthTexture) {\n          if (depthTexture.type === FloatType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\n          } else if (depthTexture.type === UnsignedIntType) {\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\n          }\n        }\n\n        var samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n      if (isMultisample) {\n        var _samples = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, _samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n    } else {\n      var glFormat = utils.convert(renderTarget.texture.format);\n      var glType = utils.convert(renderTarget.texture.type);\n\n      var _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n\n      if (isMultisample) {\n        var _samples2 = getRenderTargetSamples(renderTarget);\n\n        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n      } else {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _glInternalFormat, renderTarget.width, renderTarget.height);\n      }\n    }\n\n    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n  } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n  function setupDepthTexture(framebuffer, renderTarget) {\n    var isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n    if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n      throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n    } // upload an empty depth texture with framebuffer size\n\n\n    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n      renderTarget.depthTexture.image.width = renderTarget.width;\n      renderTarget.depthTexture.image.height = renderTarget.height;\n      renderTarget.depthTexture.needsUpdate = true;\n    }\n\n    setTexture2D(renderTarget.depthTexture, 0);\n\n    var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n    if (renderTarget.depthTexture.format === DepthFormat) {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n    } else {\n      throw new Error('Unknown depthTexture format');\n    }\n  } // Setup GL resources for a non-texture depth buffer\n\n\n  function setupDepthRenderbuffer(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n    if (renderTarget.depthTexture) {\n      if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n    } else {\n      if (isCube) {\n        renderTargetProperties.__webglDepthbuffer = [];\n\n        for (var i = 0; i < 6; i++) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\n          renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n        }\n      } else {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n      }\n    }\n\n    _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n  } // Set up GL resources for the render target\n\n\n  function setupRenderTarget(renderTarget) {\n    var renderTargetProperties = properties.get(renderTarget);\n    var textureProperties = properties.get(renderTarget.texture);\n    renderTarget.addEventListener('dispose', onRenderTargetDispose);\n    textureProperties.__webglTexture = _gl.createTexture();\n    info.memory.textures++;\n    var isCube = renderTarget.isWebGLCubeRenderTarget === true;\n    var isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n    var supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n    if (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {\n      renderTarget.texture.format = RGBAFormat;\n      console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n    } // Setup framebuffer\n\n\n    if (isCube) {\n      renderTargetProperties.__webglFramebuffer = [];\n\n      for (var i = 0; i < 6; i++) {\n        renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n      }\n    } else {\n      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n      if (isMultisample) {\n        if (isWebGL2) {\n          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          var glFormat = utils.convert(renderTarget.texture.format);\n          var glType = utils.convert(renderTarget.texture.type);\n          var glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);\n          var samples = getRenderTargetSamples(renderTarget);\n\n          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\n\n          _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n\n          if (renderTarget.depthBuffer) {\n            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n          }\n\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n        } else {\n          console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n        }\n      }\n    } // Setup color buffer\n\n\n    if (isCube) {\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, supportsMips);\n\n      for (var _i5 = 0; _i5 < 6; _i5++) {\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + _i5);\n      }\n\n      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height);\n      }\n\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n      setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, supportsMips);\n      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n\n      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {\n        generateMipmap(_gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height);\n      }\n\n      state.bindTexture(_gl.TEXTURE_2D, null);\n    } // Setup depth and stencil buffers\n\n\n    if (renderTarget.depthBuffer) {\n      setupDepthRenderbuffer(renderTarget);\n    }\n  }\n\n  function updateRenderTargetMipmap(renderTarget) {\n    var texture = renderTarget.texture;\n    var supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n      var target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n      var webglTexture = properties.get(texture).__webglTexture;\n\n      state.bindTexture(target, webglTexture);\n      generateMipmap(target, texture, renderTarget.width, renderTarget.height);\n      state.bindTexture(target, null);\n    }\n  }\n\n  function updateMultisampleRenderTarget(renderTarget) {\n    if (renderTarget.isWebGLMultisampleRenderTarget) {\n      if (isWebGL2) {\n        var renderTargetProperties = properties.get(renderTarget);\n\n        _gl.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);\n\n        _gl.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n        var width = renderTarget.width;\n        var height = renderTarget.height;\n        var mask = _gl.COLOR_BUFFER_BIT;\n        if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\n        if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\n\n        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\n\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n      } else {\n        console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n      }\n    }\n  }\n\n  function getRenderTargetSamples(renderTarget) {\n    return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n  }\n\n  function updateVideoTexture(texture) {\n    var frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n    if (_videoTextures.get(texture) !== frame) {\n      _videoTextures.set(texture, frame);\n\n      texture.update();\n    }\n  } // backwards compatibility\n\n\n  var warnedTexture2D = false;\n  var warnedTextureCube = false;\n\n  function safeSetTexture2D(texture, slot) {\n    if (texture && texture.isWebGLRenderTarget) {\n      if (warnedTexture2D === false) {\n        console.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n        warnedTexture2D = true;\n      }\n\n      texture = texture.texture;\n    }\n\n    setTexture2D(texture, slot);\n  }\n\n  function safeSetTextureCube(texture, slot) {\n    if (texture && texture.isWebGLCubeRenderTarget) {\n      if (warnedTextureCube === false) {\n        console.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n        warnedTextureCube = true;\n      }\n\n      texture = texture.texture;\n    }\n\n    setTextureCube(texture, slot);\n  } //\n\n\n  this.allocateTextureUnit = allocateTextureUnit;\n  this.resetTextureUnits = resetTextureUnits;\n  this.setTexture2D = setTexture2D;\n  this.setTexture2DArray = setTexture2DArray;\n  this.setTexture3D = setTexture3D;\n  this.setTextureCube = setTextureCube;\n  this.setupRenderTarget = setupRenderTarget;\n  this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n  this.safeSetTexture2D = safeSetTexture2D;\n  this.safeSetTextureCube = safeSetTextureCube;\n}\n\nexport { WebGLTextures };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webgl/WebGLTextures.js"],"names":["LinearFilter","LinearMipmapLinearFilter","LinearMipmapNearestFilter","NearestFilter","NearestMipmapLinearFilter","NearestMipmapNearestFilter","RGBFormat","RGBAFormat","DepthFormat","DepthStencilFormat","UnsignedShortType","UnsignedIntType","UnsignedInt248Type","FloatType","HalfFloatType","MirroredRepeatWrapping","ClampToEdgeWrapping","RepeatWrapping","MathUtils","WebGLTextures","_gl","extensions","state","properties","capabilities","utils","info","isWebGL2","maxTextures","maxCubemapSize","maxTextureSize","maxSamples","_videoTextures","WeakMap","_canvas","useOffscreenCanvas","OffscreenCanvas","getContext","err","createCanvas","width","height","document","createElementNS","resizeImage","image","needsPowerOfTwo","needsNewCanvas","maxSize","scale","Math","max","HTMLImageElement","HTMLCanvasElement","ImageBitmap","floor","floorPowerOfTwo","undefined","canvas","context","drawImage","console","warn","isPowerOfTwo","textureNeedsPowerOfTwo","texture","wrapS","wrapT","minFilter","textureNeedsGenerateMipmaps","supportsMips","generateMipmaps","generateMipmap","target","textureProperties","get","__maxMipLevel","log","LOG2E","getInternalFormat","internalFormatName","glFormat","glType","internalFormat","RED","FLOAT","R32F","HALF_FLOAT","R16F","UNSIGNED_BYTE","R8","RGB","RGB32F","RGB16F","RGB8","RGBA","RGBA32F","RGBA16F","RGBA8","filterFallback","f","NEAREST","LINEAR","onTextureDispose","event","removeEventListener","deallocateTexture","isVideoTexture","delete","memory","textures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","__webglInit","deleteTexture","__webglTexture","remove","renderTargetProperties","depthTexture","dispose","isWebGLCubeRenderTarget","i","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","textureUnits","resetTextureUnits","allocateTextureUnit","textureUnit","setTexture2D","slot","updateVideoTexture","version","__version","complete","uploadTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","setTexture2DArray","TEXTURE_2D_ARRAY","setTexture3D","TEXTURE_3D","setTextureCube","uploadCubeTexture","TEXTURE_CUBE_MAP","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","setTextureParameters","textureType","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","wrapR","TEXTURE_MAG_FILTER","magFilter","TEXTURE_MIN_FILTER","extension","type","anisotropy","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","min","getMaxAnisotropy","initTexture","addEventListener","createTexture","isDataTexture2DArray","isDataTexture3D","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","convert","format","glInternalFormat","mipmap","mipmaps","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","error","DEPTH_STENCIL","texImage2D","isDataTexture","length","il","data","isCompressedTexture","compressedTexImage2D","texImage3D","depth","onUpdate","isCompressed","cubeImage","j","TEXTURE_CUBE_MAP_POSITIVE_X","mipmapImage","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","samples","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthTexture","isCube","Error","needsUpdate","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isWebGLMultisampleRenderTarget","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","mask","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","frame","render","set","update","warnedTexture2D","warnedTextureCube","safeSetTexture2D","isWebGLRenderTarget","safeSetTextureCube"],"mappings":"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","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RGBFormat, RGBAFormat, DepthFormat, DepthStencilFormat, UnsignedShortType, UnsignedIntType, UnsignedInt248Type, FloatType, HalfFloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping } from '../../constants.js';\nimport { MathUtils } from '../../math/MathUtils.js';\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) :\n\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo( image ) {\n\n\t\treturn MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGB32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGB16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGB8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RGBA8;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( renderTarget.texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tproperties.remove( renderTarget.texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension ) {\n\n\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isDataTexture3D ) textureType = _gl.TEXTURE_3D;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\n\t\tconst image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\tconst supportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format );\n\n\t\tlet glType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tlet mipmap;\n\t\tconst mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// validation checks for WebGL 1\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( textureType, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\tconst isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\tconst cubeImage = [];\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t} else {\n\n\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst image = cubeImage[ 0 ],\n\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );\n\n\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\tlet mipmaps;\n\n\t\tif ( isCompressed ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t} else {\n\n\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t// We assume images for cube map have the same size.\n\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( renderTarget.texture.format );\n\t\tconst glType = utils.convert( renderTarget.texture.type );\n\t\tconst glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tconst glType = utils.convert( renderTarget.texture.type );\n\t\t\tconst glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( renderTarget.texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\tinfo.memory.textures ++;\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\tif ( isWebGL2 && renderTarget.texture.format === RGBFormat && ( renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType ) ) {\n\n\t\t\trenderTarget.texture.format = RGBAFormat;\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultisample ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\tconst glFormat = utils.convert( renderTarget.texture.format );\n\t\t\t\t\tconst glType = utils.convert( renderTarget.texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\t\tconst supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\tstate.bindTexture( target, null );\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\t_gl.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t_gl.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer ); // see #18905\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\n\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tlet warnedTexture2D = false;\n\tlet warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\n\t\tsetTextureCube( texture, slot );\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\nexport { WebGLTextures };\n"]},"metadata":{},"sourceType":"module"}