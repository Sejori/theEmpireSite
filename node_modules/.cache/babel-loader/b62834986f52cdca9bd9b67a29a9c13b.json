{"ast":null,"code":"import { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\n\nfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n  var programs = [];\n  var isWebGL2 = capabilities.isWebGL2;\n  var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n  var floatVertexTextures = capabilities.floatVertexTextures;\n  var maxVertexUniforms = capabilities.maxVertexUniforms;\n  var vertexTextures = capabilities.vertexTextures;\n  var precision = capabilities.precision;\n  var shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'toon',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n  var parameterNames = [\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"instancingColor\", \"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\", \"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"gradientMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\", \"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\", \"sheen\", \"transmissionMap\"];\n\n  function getMaxBones(object) {\n    var skeleton = object.skeleton;\n    var bones = skeleton.bones;\n\n    if (floatVertexTextures) {\n      return 1024;\n    } else {\n      // default for when object is not specified\n      // ( for example when prebuilding shader to be used with multiple objects )\n      //\n      //  - leave some extra space for other uniforms\n      //  - limit here is ANGLE's 254 max uniform vectors\n      //    (up to 54 should be safe)\n      var nVertexUniforms = maxVertexUniforms;\n      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n      var maxBones = Math.min(nVertexMatrices, bones.length);\n\n      if (maxBones < bones.length) {\n        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n        return 0;\n      }\n\n      return maxBones;\n    }\n  }\n\n  function getTextureEncodingFromMap(map) {\n    var encoding;\n\n    if (!map) {\n      encoding = LinearEncoding;\n    } else if (map.isTexture) {\n      encoding = map.encoding;\n    } else if (map.isWebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    }\n\n    return encoding;\n  }\n\n  function getParameters(material, lights, shadows, scene, object) {\n    var fog = scene.fog;\n    var environment = material.isMeshStandardMaterial ? scene.environment : null;\n    var envMap = cubemaps.get(material.envMap || environment);\n    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    var maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    }\n\n    var vertexShader, fragmentShader;\n\n    if (shaderID) {\n      var shader = ShaderLib[shaderID];\n      vertexShader = shader.vertexShader;\n      fragmentShader = shader.fragmentShader;\n    } else {\n      vertexShader = material.vertexShader;\n      fragmentShader = material.fragmentShader;\n    }\n\n    var currentRenderTarget = renderer.getRenderTarget();\n    var parameters = {\n      isWebGL2: isWebGL2,\n      shaderID: shaderID,\n      shaderName: material.type,\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      defines: material.defines,\n      isRawShaderMaterial: material.isRawShaderMaterial === true,\n      glslVersion: material.glslVersion,\n      precision: precision,\n      instancing: object.isInstancedMesh === true,\n      instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n      supportsVertexTextures: vertexTextures,\n      outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n      map: !!material.map,\n      mapEncoding: getTextureEncodingFromMap(material.map),\n      matcap: !!material.matcap,\n      matcapEncoding: getTextureEncodingFromMap(material.matcap),\n      envMap: !!envMap,\n      envMapMode: envMap && envMap.mapping,\n      envMapEncoding: getTextureEncodingFromMap(envMap),\n      envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n      lightMap: !!material.lightMap,\n      lightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n      aoMap: !!material.aoMap,\n      emissiveMap: !!material.emissiveMap,\n      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n      bumpMap: !!material.bumpMap,\n      normalMap: !!material.normalMap,\n      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n      clearcoatMap: !!material.clearcoatMap,\n      clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n      clearcoatNormalMap: !!material.clearcoatNormalMap,\n      displacementMap: !!material.displacementMap,\n      roughnessMap: !!material.roughnessMap,\n      metalnessMap: !!material.metalnessMap,\n      specularMap: !!material.specularMap,\n      alphaMap: !!material.alphaMap,\n      gradientMap: !!material.gradientMap,\n      sheen: !!material.sheen,\n      transmissionMap: !!material.transmissionMap,\n      combine: material.combine,\n      vertexTangents: material.normalMap && material.vertexTangents,\n      vertexColors: material.vertexColors,\n      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n      fog: !!fog,\n      useFog: material.fog,\n      fogExp2: fog && fog.isFogExp2,\n      flatShading: material.flatShading,\n      sizeAttenuation: material.sizeAttenuation,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      skinning: material.skinning && maxBones > 0,\n      maxBones: maxBones,\n      useVertexTexture: floatVertexTextures,\n      morphTargets: material.morphTargets,\n      morphNormals: material.morphNormals,\n      maxMorphTargets: renderer.maxMorphTargets,\n      maxMorphNormals: renderer.maxMorphNormals,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numRectAreaLights: lights.rectArea.length,\n      numHemiLights: lights.hemi.length,\n      numDirLightShadows: lights.directionalShadowMap.length,\n      numPointLightShadows: lights.pointShadowMap.length,\n      numSpotLightShadows: lights.spotShadowMap.length,\n      numClippingPlanes: clipping.numPlanes,\n      numClipIntersection: clipping.numIntersection,\n      dithering: material.dithering,\n      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n      physicallyCorrectLights: renderer.physicallyCorrectLights,\n      premultipliedAlpha: material.premultipliedAlpha,\n      alphaTest: material.alphaTest,\n      doubleSided: material.side === DoubleSide,\n      flipSided: material.side === BackSide,\n      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n      index0AttributeName: material.index0AttributeName,\n      extensionDerivatives: material.extensions && material.extensions.derivatives,\n      extensionFragDepth: material.extensions && material.extensions.fragDepth,\n      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n      rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n      rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n      rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n      customProgramCacheKey: material.customProgramCacheKey()\n    };\n    return parameters;\n  }\n\n  function getProgramCacheKey(parameters) {\n    var array = [];\n\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(parameters.fragmentShader);\n      array.push(parameters.vertexShader);\n    }\n\n    if (parameters.defines !== undefined) {\n      for (var name in parameters.defines) {\n        array.push(name);\n        array.push(parameters.defines[name]);\n      }\n    }\n\n    if (parameters.isRawShaderMaterial === false) {\n      for (var i = 0; i < parameterNames.length; i++) {\n        array.push(parameters[parameterNames[i]]);\n      }\n\n      array.push(renderer.outputEncoding);\n      array.push(renderer.gammaFactor);\n    }\n\n    array.push(parameters.customProgramCacheKey);\n    return array.join();\n  }\n\n  function getUniforms(material) {\n    var shaderID = shaderIDs[material.type];\n    var uniforms;\n\n    if (shaderID) {\n      var shader = ShaderLib[shaderID];\n      uniforms = UniformsUtils.clone(shader.uniforms);\n    } else {\n      uniforms = material.uniforms;\n    }\n\n    return uniforms;\n  }\n\n  function acquireProgram(parameters, cacheKey) {\n    var program; // Check if code has been already compiled\n\n    for (var p = 0, pl = programs.length; p < pl; p++) {\n      var preexistingProgram = programs[p];\n\n      if (preexistingProgram.cacheKey === cacheKey) {\n        program = preexistingProgram;\n        ++program.usedTimes;\n        break;\n      }\n    }\n\n    if (program === undefined) {\n      program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n      programs.push(program);\n    }\n\n    return program;\n  }\n\n  function releaseProgram(program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      var i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop(); // Free WebGL resources\n\n      program.destroy();\n    }\n  }\n\n  return {\n    getParameters: getParameters,\n    getProgramCacheKey: getProgramCacheKey,\n    getUniforms: getUniforms,\n    acquireProgram: acquireProgram,\n    releaseProgram: releaseProgram,\n    // Exposed for resource monitoring & error feedback via renderer.info:\n    programs: programs\n  };\n}\n\nexport { WebGLPrograms };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webgl/WebGLPrograms.js"],"names":["BackSide","DoubleSide","CubeUVRefractionMapping","CubeUVReflectionMapping","LinearEncoding","ObjectSpaceNormalMap","TangentSpaceNormalMap","NoToneMapping","WebGLProgram","ShaderLib","UniformsUtils","WebGLPrograms","renderer","cubemaps","extensions","capabilities","bindingStates","clipping","programs","isWebGL2","logarithmicDepthBuffer","floatVertexTextures","maxVertexUniforms","vertexTextures","precision","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getMaxBones","object","skeleton","bones","nVertexUniforms","nVertexMatrices","Math","floor","maxBones","min","length","console","warn","getTextureEncodingFromMap","map","encoding","isTexture","isWebGLRenderTarget","texture","getParameters","material","lights","shadows","scene","fog","environment","isMeshStandardMaterial","envMap","get","shaderID","type","isSkinnedMesh","getMaxPrecision","vertexShader","fragmentShader","shader","currentRenderTarget","getRenderTarget","parameters","shaderName","defines","isRawShaderMaterial","glslVersion","instancing","isInstancedMesh","instancingColor","instanceColor","supportsVertexTextures","outputEncoding","mapEncoding","matcap","matcapEncoding","envMapMode","mapping","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","normalMapType","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","roughnessMap","metalnessMap","specularMap","alphaMap","gradientMap","sheen","transmissionMap","combine","vertexTangents","vertexColors","vertexUvs","uvsVertexOnly","useFog","fogExp2","isFogExp2","flatShading","sizeAttenuation","skinning","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","numDirLights","directional","numPointLights","point","numSpotLights","spot","numRectAreaLights","rectArea","numHemiLights","hemi","numDirLightShadows","directionalShadowMap","numPointLightShadows","pointShadowMap","numSpotLightShadows","spotShadowMap","numClippingPlanes","numPlanes","numClipIntersection","numIntersection","dithering","shadowMapEnabled","shadowMap","enabled","shadowMapType","toneMapping","toneMapped","physicallyCorrectLights","premultipliedAlpha","alphaTest","doubleSided","side","flipSided","depthPacking","undefined","index0AttributeName","extensionDerivatives","derivatives","extensionFragDepth","fragDepth","extensionDrawBuffers","drawBuffers","extensionShaderTextureLOD","shaderTextureLOD","rendererExtensionFragDepth","has","rendererExtensionDrawBuffers","rendererExtensionShaderTextureLod","customProgramCacheKey","getProgramCacheKey","array","push","name","i","gammaFactor","join","getUniforms","uniforms","clone","acquireProgram","cacheKey","program","p","pl","preexistingProgram","usedTimes","releaseProgram","indexOf","pop","destroy"],"mappings":"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","sourcesContent":["import { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\n\nfunction WebGLPrograms( renderer, cubemaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\tconst vertexTextures = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tconst parameterNames = [\n\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"instancingColor\",\n\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\"sheen\", \"transmissionMap\"\n\t];\n\n\tfunction getMaxBones( object ) {\n\n\t\tconst skeleton = object.skeleton;\n\t\tconst bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = cubemaps.get( material.envMap || environment );\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet vertexShader, fragmentShader;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: !! material.sheen,\n\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.transmissionMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.fragmentShader );\n\t\t\tarray.push( parameters.vertexShader );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tfor ( let i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs\n\t};\n\n}\n\n\nexport { WebGLPrograms };\n"]},"metadata":{},"sourceType":"module"}