{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Face3 } from '../core/Face3.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nvar _inverseMatrix = new Matrix4();\n\nvar _ray = new Ray();\n\nvar _sphere = new Sphere();\n\nvar _vA = new Vector3();\n\nvar _vB = new Vector3();\n\nvar _vC = new Vector3();\n\nvar _tempA = new Vector3();\n\nvar _tempB = new Vector3();\n\nvar _tempC = new Vector3();\n\nvar _morphA = new Vector3();\n\nvar _morphB = new Vector3();\n\nvar _morphC = new Vector3();\n\nvar _uvA = new Vector2();\n\nvar _uvB = new Vector2();\n\nvar _uvC = new Vector2();\n\nvar _intersectionPoint = new Vector3();\n\nvar _intersectionPointWorld = new Vector3();\n\nfunction Mesh(geometry, material) {\n  Object3D.call(this);\n  this.type = 'Mesh';\n  this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n  this.material = material !== undefined ? material : new MeshBasicMaterial();\n  this.updateMorphTargets();\n}\n\nMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: Mesh,\n  isMesh: true,\n  copy: function copy(source) {\n    Object3D.prototype.copy.call(this, source);\n\n    if (source.morphTargetInfluences !== undefined) {\n      this.morphTargetInfluences = source.morphTargetInfluences.slice();\n    }\n\n    if (source.morphTargetDictionary !== undefined) {\n      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n    }\n\n    this.material = source.material;\n    this.geometry = source.geometry;\n    return this;\n  },\n  updateMorphTargets: function updateMorphTargets() {\n    var geometry = this.geometry;\n\n    if (geometry.isBufferGeometry) {\n      var morphAttributes = geometry.morphAttributes;\n      var keys = Object.keys(morphAttributes);\n\n      if (keys.length > 0) {\n        var morphAttribute = morphAttributes[keys[0]];\n\n        if (morphAttribute !== undefined) {\n          this.morphTargetInfluences = [];\n          this.morphTargetDictionary = {};\n\n          for (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n            var name = morphAttribute[m].name || String(m);\n            this.morphTargetInfluences.push(0);\n            this.morphTargetDictionary[name] = m;\n          }\n        }\n      }\n    } else {\n      var morphTargets = geometry.morphTargets;\n\n      if (morphTargets !== undefined && morphTargets.length > 0) {\n        console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n      }\n    }\n  },\n  raycast: function raycast(raycaster, intersects) {\n    var geometry = this.geometry;\n    var material = this.material;\n    var matrixWorld = this.matrixWorld;\n    if (material === undefined) return; // Checking boundingSphere distance to ray\n\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere);\n\n    _sphere.applyMatrix4(matrixWorld);\n\n    if (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n    _inverseMatrix.getInverse(matrixWorld);\n\n    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n    if (geometry.boundingBox !== null) {\n      if (_ray.intersectsBox(geometry.boundingBox) === false) return;\n    }\n\n    var intersection;\n\n    if (geometry.isBufferGeometry) {\n      var index = geometry.index;\n      var position = geometry.attributes.position;\n      var morphPosition = geometry.morphAttributes.position;\n      var morphTargetsRelative = geometry.morphTargetsRelative;\n      var uv = geometry.attributes.uv;\n      var uv2 = geometry.attributes.uv2;\n      var groups = geometry.groups;\n      var drawRange = geometry.drawRange;\n\n      if (index !== null) {\n        // indexed buffer geometry\n        if (Array.isArray(material)) {\n          for (var i = 0, il = groups.length; i < il; i++) {\n            var group = groups[i];\n            var groupMaterial = material[group.materialIndex];\n            var start = Math.max(group.start, drawRange.start);\n            var end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n            for (var j = start, jl = end; j < jl; j += 3) {\n              var a = index.getX(j);\n              var b = index.getX(j + 1);\n              var c = index.getX(j + 2);\n              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n                intersection.face.materialIndex = group.materialIndex;\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else {\n          var _start = Math.max(0, drawRange.start);\n\n          var _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n          for (var _i = _start, _il = _end; _i < _il; _i += 3) {\n            var _a = index.getX(_i);\n\n            var _b = index.getX(_i + 1);\n\n            var _c = index.getX(_i + 2);\n\n            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n            if (intersection) {\n              intersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        }\n      } else if (position !== undefined) {\n        // non-indexed buffer geometry\n        if (Array.isArray(material)) {\n          for (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n            var _group = groups[_i2];\n            var _groupMaterial = material[_group.materialIndex];\n\n            var _start2 = Math.max(_group.start, drawRange.start);\n\n            var _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n            for (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n              var _a2 = _j;\n\n              var _b2 = _j + 1;\n\n              var _c2 = _j + 2;\n\n              intersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n                intersection.face.materialIndex = _group.materialIndex;\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else {\n          var _start3 = Math.max(0, drawRange.start);\n\n          var _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n          for (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n            var _a3 = _i3;\n\n            var _b3 = _i3 + 1;\n\n            var _c3 = _i3 + 2;\n\n            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n            if (intersection) {\n              intersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n              intersects.push(intersection);\n            }\n          }\n        }\n      }\n    } else if (geometry.isGeometry) {\n      var isMultiMaterial = Array.isArray(material);\n      var vertices = geometry.vertices;\n      var faces = geometry.faces;\n      var uvs;\n      var faceVertexUvs = geometry.faceVertexUvs[0];\n      if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n      for (var f = 0, fl = faces.length; f < fl; f++) {\n        var face = faces[f];\n        var faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;\n        if (faceMaterial === undefined) continue;\n        var fvA = vertices[face.a];\n        var fvB = vertices[face.b];\n        var fvC = vertices[face.c];\n        intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);\n\n        if (intersection) {\n          if (uvs && uvs[f]) {\n            var uvs_f = uvs[f];\n\n            _uvA.copy(uvs_f[0]);\n\n            _uvB.copy(uvs_f[1]);\n\n            _uvC.copy(uvs_f[2]);\n\n            intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());\n          }\n\n          intersection.face = face;\n          intersection.faceIndex = f;\n          intersects.push(intersection);\n        }\n      }\n    }\n  }\n});\n\nfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n  var intersect;\n\n  if (material.side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n  }\n\n  if (intersect === null) return null;\n\n  _intersectionPointWorld.copy(point);\n\n  _intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n  var distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n  if (distance < raycaster.near || distance > raycaster.far) return null;\n  return {\n    distance: distance,\n    point: _intersectionPointWorld.clone(),\n    object: object\n  };\n}\n\nfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n  _vA.fromBufferAttribute(position, a);\n\n  _vB.fromBufferAttribute(position, b);\n\n  _vC.fromBufferAttribute(position, c);\n\n  var morphInfluences = object.morphTargetInfluences;\n\n  if (material.morphTargets && morphPosition && morphInfluences) {\n    _morphA.set(0, 0, 0);\n\n    _morphB.set(0, 0, 0);\n\n    _morphC.set(0, 0, 0);\n\n    for (var i = 0, il = morphPosition.length; i < il; i++) {\n      var influence = morphInfluences[i];\n      var morphAttribute = morphPosition[i];\n      if (influence === 0) continue;\n\n      _tempA.fromBufferAttribute(morphAttribute, a);\n\n      _tempB.fromBufferAttribute(morphAttribute, b);\n\n      _tempC.fromBufferAttribute(morphAttribute, c);\n\n      if (morphTargetsRelative) {\n        _morphA.addScaledVector(_tempA, influence);\n\n        _morphB.addScaledVector(_tempB, influence);\n\n        _morphC.addScaledVector(_tempC, influence);\n      } else {\n        _morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n        _morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n        _morphC.addScaledVector(_tempC.sub(_vC), influence);\n      }\n    }\n\n    _vA.add(_morphA);\n\n    _vB.add(_morphB);\n\n    _vC.add(_morphC);\n  }\n\n  if (object.isSkinnedMesh) {\n    object.boneTransform(a, _vA);\n    object.boneTransform(b, _vB);\n    object.boneTransform(c, _vC);\n  }\n\n  var intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n  if (intersection) {\n    if (uv) {\n      _uvA.fromBufferAttribute(uv, a);\n\n      _uvB.fromBufferAttribute(uv, b);\n\n      _uvC.fromBufferAttribute(uv, c);\n\n      intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n\n    if (uv2) {\n      _uvA.fromBufferAttribute(uv2, a);\n\n      _uvB.fromBufferAttribute(uv2, b);\n\n      _uvC.fromBufferAttribute(uv2, c);\n\n      intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n    }\n\n    var face = new Face3(a, b, c);\n    Triangle.getNormal(_vA, _vB, _vC, face.normal);\n    intersection.face = face;\n  }\n\n  return intersection;\n}\n\nexport { Mesh };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/objects/Mesh.js"],"names":["Vector3","Vector2","Sphere","Ray","Matrix4","Object3D","Triangle","Face3","DoubleSide","BackSide","MeshBasicMaterial","BufferGeometry","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","geometry","material","call","type","undefined","updateMorphTargets","prototype","Object","assign","create","constructor","isMesh","copy","source","morphTargetInfluences","slice","morphTargetDictionary","isBufferGeometry","morphAttributes","keys","length","morphAttribute","m","ml","name","String","push","morphTargets","console","error","raycast","raycaster","intersects","matrixWorld","boundingSphere","computeBoundingSphere","applyMatrix4","ray","intersectsSphere","getInverse","boundingBox","intersectsBox","intersection","index","position","attributes","morphPosition","morphTargetsRelative","uv","uv2","groups","drawRange","Array","isArray","i","il","group","groupMaterial","materialIndex","start","Math","max","end","min","count","j","jl","a","getX","b","c","checkBufferGeometryIntersection","faceIndex","floor","face","isGeometry","isMultiMaterial","vertices","faces","uvs","faceVertexUvs","f","fl","faceMaterial","fvA","fvB","fvC","checkIntersection","uvs_f","getUV","object","pA","pB","pC","point","intersect","side","intersectTriangle","distance","origin","distanceTo","near","far","clone","fromBufferAttribute","morphInfluences","set","influence","addScaledVector","sub","add","isSkinnedMesh","boneTransform","getNormal","normal"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,iBAArC;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,cAAT,QAA+B,2BAA/B;;AAEA,IAAMC,cAAc,GAAG,IAAIR,OAAJ,EAAvB;;AACA,IAAMS,IAAI,GAAG,IAAIV,GAAJ,EAAb;;AACA,IAAMW,OAAO,GAAG,IAAIZ,MAAJ,EAAhB;;AAEA,IAAMa,GAAG,GAAG,IAAIf,OAAJ,EAAZ;;AACA,IAAMgB,GAAG,GAAG,IAAIhB,OAAJ,EAAZ;;AACA,IAAMiB,GAAG,GAAG,IAAIjB,OAAJ,EAAZ;;AAEA,IAAMkB,MAAM,GAAG,IAAIlB,OAAJ,EAAf;;AACA,IAAMmB,MAAM,GAAG,IAAInB,OAAJ,EAAf;;AACA,IAAMoB,MAAM,GAAG,IAAIpB,OAAJ,EAAf;;AAEA,IAAMqB,OAAO,GAAG,IAAIrB,OAAJ,EAAhB;;AACA,IAAMsB,OAAO,GAAG,IAAItB,OAAJ,EAAhB;;AACA,IAAMuB,OAAO,GAAG,IAAIvB,OAAJ,EAAhB;;AAEA,IAAMwB,IAAI,GAAG,IAAIvB,OAAJ,EAAb;;AACA,IAAMwB,IAAI,GAAG,IAAIxB,OAAJ,EAAb;;AACA,IAAMyB,IAAI,GAAG,IAAIzB,OAAJ,EAAb;;AAEA,IAAM0B,kBAAkB,GAAG,IAAI3B,OAAJ,EAA3B;;AACA,IAAM4B,uBAAuB,GAAG,IAAI5B,OAAJ,EAAhC;;AAEA,SAAS6B,IAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAoC;AAEnC1B,EAAAA,QAAQ,CAAC2B,IAAT,CAAe,IAAf;AAEA,OAAKC,IAAL,GAAY,MAAZ;AAEA,OAAKH,QAAL,GAAgBA,QAAQ,KAAKI,SAAb,GAAyBJ,QAAzB,GAAoC,IAAInB,cAAJ,EAApD;AACA,OAAKoB,QAAL,GAAgBA,QAAQ,KAAKG,SAAb,GAAyBH,QAAzB,GAAoC,IAAIrB,iBAAJ,EAApD;AAEA,OAAKyB,kBAAL;AAEA;;AAEDN,IAAI,CAACO,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAelC,QAAQ,CAAC+B,SAAxB,CAAf,EAAoD;AAEpEI,EAAAA,WAAW,EAAEX,IAFuD;AAIpEY,EAAAA,MAAM,EAAE,IAJ4D;AAMpEC,EAAAA,IAAI,EAAE,cAAWC,MAAX,EAAoB;AAEzBtC,IAAAA,QAAQ,CAAC+B,SAAT,CAAmBM,IAAnB,CAAwBV,IAAxB,CAA8B,IAA9B,EAAoCW,MAApC;;AAEA,QAAKA,MAAM,CAACC,qBAAP,KAAiCV,SAAtC,EAAkD;AAEjD,WAAKU,qBAAL,GAA6BD,MAAM,CAACC,qBAAP,CAA6BC,KAA7B,EAA7B;AAEA;;AAED,QAAKF,MAAM,CAACG,qBAAP,KAAiCZ,SAAtC,EAAkD;AAEjD,WAAKY,qBAAL,GAA6BT,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBK,MAAM,CAACG,qBAA1B,CAA7B;AAEA;;AAED,SAAKf,QAAL,GAAgBY,MAAM,CAACZ,QAAvB;AACA,SAAKD,QAAL,GAAgBa,MAAM,CAACb,QAAvB;AAEA,WAAO,IAAP;AAEA,GA3BmE;AA6BpEK,EAAAA,kBAAkB,EAAE,8BAAY;AAE/B,QAAML,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,QAAKA,QAAQ,CAACiB,gBAAd,EAAiC;AAEhC,UAAMC,eAAe,GAAGlB,QAAQ,CAACkB,eAAjC;AACA,UAAMC,IAAI,GAAGZ,MAAM,CAACY,IAAP,CAAaD,eAAb,CAAb;;AAEA,UAAKC,IAAI,CAACC,MAAL,GAAc,CAAnB,EAAuB;AAEtB,YAAMC,cAAc,GAAGH,eAAe,CAAEC,IAAI,CAAE,CAAF,CAAN,CAAtC;;AAEA,YAAKE,cAAc,KAAKjB,SAAxB,EAAoC;AAEnC,eAAKU,qBAAL,GAA6B,EAA7B;AACA,eAAKE,qBAAL,GAA6B,EAA7B;;AAEA,eAAM,IAAIM,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,cAAc,CAACD,MAArC,EAA6CE,CAAC,GAAGC,EAAjD,EAAqDD,CAAC,EAAtD,EAA4D;AAE3D,gBAAME,IAAI,GAAGH,cAAc,CAAEC,CAAF,CAAd,CAAoBE,IAApB,IAA4BC,MAAM,CAAEH,CAAF,CAA/C;AAEA,iBAAKR,qBAAL,CAA2BY,IAA3B,CAAiC,CAAjC;AACA,iBAAKV,qBAAL,CAA4BQ,IAA5B,IAAqCF,CAArC;AAEA;AAED;AAED;AAED,KA3BD,MA2BO;AAEN,UAAMK,YAAY,GAAG3B,QAAQ,CAAC2B,YAA9B;;AAEA,UAAKA,YAAY,KAAKvB,SAAjB,IAA8BuB,YAAY,CAACP,MAAb,GAAsB,CAAzD,EAA6D;AAE5DQ,QAAAA,OAAO,CAACC,KAAR,CAAe,sGAAf;AAEA;AAED;AAED,GAxEmE;AA0EpEC,EAAAA,OAAO,EAAE,iBAAWC,SAAX,EAAsBC,UAAtB,EAAmC;AAE3C,QAAMhC,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAMC,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAMgC,WAAW,GAAG,KAAKA,WAAzB;AAEA,QAAKhC,QAAQ,KAAKG,SAAlB,EAA8B,OANa,CAQ3C;;AAEA,QAAKJ,QAAQ,CAACkC,cAAT,KAA4B,IAAjC,EAAwClC,QAAQ,CAACmC,qBAAT;;AAExCnD,IAAAA,OAAO,CAAC4B,IAAR,CAAcZ,QAAQ,CAACkC,cAAvB;;AACAlD,IAAAA,OAAO,CAACoD,YAAR,CAAsBH,WAAtB;;AAEA,QAAKF,SAAS,CAACM,GAAV,CAAcC,gBAAd,CAAgCtD,OAAhC,MAA8C,KAAnD,EAA2D,OAfhB,CAiB3C;;AAEAF,IAAAA,cAAc,CAACyD,UAAf,CAA2BN,WAA3B;;AACAlD,IAAAA,IAAI,CAAC6B,IAAL,CAAWmB,SAAS,CAACM,GAArB,EAA2BD,YAA3B,CAAyCtD,cAAzC,EApB2C,CAsB3C;;;AAEA,QAAKkB,QAAQ,CAACwC,WAAT,KAAyB,IAA9B,EAAqC;AAEpC,UAAKzD,IAAI,CAAC0D,aAAL,CAAoBzC,QAAQ,CAACwC,WAA7B,MAA+C,KAApD,EAA4D;AAE5D;;AAED,QAAIE,YAAJ;;AAEA,QAAK1C,QAAQ,CAACiB,gBAAd,EAAiC;AAEhC,UAAM0B,KAAK,GAAG3C,QAAQ,CAAC2C,KAAvB;AACA,UAAMC,QAAQ,GAAG5C,QAAQ,CAAC6C,UAAT,CAAoBD,QAArC;AACA,UAAME,aAAa,GAAG9C,QAAQ,CAACkB,eAAT,CAAyB0B,QAA/C;AACA,UAAMG,oBAAoB,GAAG/C,QAAQ,CAAC+C,oBAAtC;AACA,UAAMC,EAAE,GAAGhD,QAAQ,CAAC6C,UAAT,CAAoBG,EAA/B;AACA,UAAMC,GAAG,GAAGjD,QAAQ,CAAC6C,UAAT,CAAoBI,GAAhC;AACA,UAAMC,MAAM,GAAGlD,QAAQ,CAACkD,MAAxB;AACA,UAAMC,SAAS,GAAGnD,QAAQ,CAACmD,SAA3B;;AAEA,UAAKR,KAAK,KAAK,IAAf,EAAsB;AAErB;AAEA,YAAKS,KAAK,CAACC,OAAN,CAAepD,QAAf,CAAL,EAAiC;AAEhC,eAAM,IAAIqD,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,MAAM,CAAC9B,MAA7B,EAAqCkC,CAAC,GAAGC,EAAzC,EAA6CD,CAAC,EAA9C,EAAoD;AAEnD,gBAAME,KAAK,GAAGN,MAAM,CAAEI,CAAF,CAApB;AACA,gBAAMG,aAAa,GAAGxD,QAAQ,CAAEuD,KAAK,CAACE,aAAR,CAA9B;AAEA,gBAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAUL,KAAK,CAACG,KAAhB,EAAuBR,SAAS,CAACQ,KAAjC,CAAd;AACA,gBAAMG,GAAG,GAAGF,IAAI,CAACG,GAAL,CAAYP,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACQ,KAAhC,EAA2Cb,SAAS,CAACQ,KAAV,GAAkBR,SAAS,CAACa,KAAvE,CAAZ;;AAEA,iBAAM,IAAIC,CAAC,GAAGN,KAAR,EAAeO,EAAE,GAAGJ,GAA1B,EAA+BG,CAAC,GAAGC,EAAnC,EAAuCD,CAAC,IAAI,CAA5C,EAAgD;AAE/C,kBAAME,CAAC,GAAGxB,KAAK,CAACyB,IAAN,CAAYH,CAAZ,CAAV;AACA,kBAAMI,CAAC,GAAG1B,KAAK,CAACyB,IAAN,CAAYH,CAAC,GAAG,CAAhB,CAAV;AACA,kBAAMK,CAAC,GAAG3B,KAAK,CAACyB,IAAN,CAAYH,CAAC,GAAG,CAAhB,CAAV;AAEAvB,cAAAA,YAAY,GAAG6B,+BAA+B,CAAE,IAAF,EAAQd,aAAR,EAAuB1B,SAAvB,EAAkChD,IAAlC,EAAwC6D,QAAxC,EAAkDE,aAAlD,EAAiEC,oBAAjE,EAAuFC,EAAvF,EAA2FC,GAA3F,EAAgGkB,CAAhG,EAAmGE,CAAnG,EAAsGC,CAAtG,CAA9C;;AAEA,kBAAK5B,YAAL,EAAoB;AAEnBA,gBAAAA,YAAY,CAAC8B,SAAb,GAAyBZ,IAAI,CAACa,KAAL,CAAYR,CAAC,GAAG,CAAhB,CAAzB,CAFmB,CAE2B;;AAC9CvB,gBAAAA,YAAY,CAACgC,IAAb,CAAkBhB,aAAlB,GAAkCF,KAAK,CAACE,aAAxC;AACA1B,gBAAAA,UAAU,CAACN,IAAX,CAAiBgB,YAAjB;AAEA;AAED;AAED;AAED,SA9BD,MA8BO;AAEN,cAAMiB,MAAK,GAAGC,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaV,SAAS,CAACQ,KAAvB,CAAd;;AACA,cAAMG,IAAG,GAAGF,IAAI,CAACG,GAAL,CAAUpB,KAAK,CAACqB,KAAhB,EAAyBb,SAAS,CAACQ,KAAV,GAAkBR,SAAS,CAACa,KAArD,CAAZ;;AAEA,eAAM,IAAIV,EAAC,GAAGK,MAAR,EAAeJ,GAAE,GAAGO,IAA1B,EAA+BR,EAAC,GAAGC,GAAnC,EAAuCD,EAAC,IAAI,CAA5C,EAAgD;AAE/C,gBAAMa,EAAC,GAAGxB,KAAK,CAACyB,IAAN,CAAYd,EAAZ,CAAV;;AACA,gBAAMe,EAAC,GAAG1B,KAAK,CAACyB,IAAN,CAAYd,EAAC,GAAG,CAAhB,CAAV;;AACA,gBAAMgB,EAAC,GAAG3B,KAAK,CAACyB,IAAN,CAAYd,EAAC,GAAG,CAAhB,CAAV;;AAEAZ,YAAAA,YAAY,GAAG6B,+BAA+B,CAAE,IAAF,EAAQtE,QAAR,EAAkB8B,SAAlB,EAA6BhD,IAA7B,EAAmC6D,QAAnC,EAA6CE,aAA7C,EAA4DC,oBAA5D,EAAkFC,EAAlF,EAAsFC,GAAtF,EAA2FkB,EAA3F,EAA8FE,EAA9F,EAAiGC,EAAjG,CAA9C;;AAEA,gBAAK5B,YAAL,EAAoB;AAEnBA,cAAAA,YAAY,CAAC8B,SAAb,GAAyBZ,IAAI,CAACa,KAAL,CAAYnB,EAAC,GAAG,CAAhB,CAAzB,CAFmB,CAE2B;;AAC9CtB,cAAAA,UAAU,CAACN,IAAX,CAAiBgB,YAAjB;AAEA;AAED;AAED;AAED,OA1DD,MA0DO,IAAKE,QAAQ,KAAKxC,SAAlB,EAA8B;AAEpC;AAEA,YAAKgD,KAAK,CAACC,OAAN,CAAepD,QAAf,CAAL,EAAiC;AAEhC,eAAM,IAAIqD,GAAC,GAAG,CAAR,EAAWC,IAAE,GAAGL,MAAM,CAAC9B,MAA7B,EAAqCkC,GAAC,GAAGC,IAAzC,EAA6CD,GAAC,EAA9C,EAAoD;AAEnD,gBAAME,MAAK,GAAGN,MAAM,CAAEI,GAAF,CAApB;AACA,gBAAMG,cAAa,GAAGxD,QAAQ,CAAEuD,MAAK,CAACE,aAAR,CAA9B;;AAEA,gBAAMC,OAAK,GAAGC,IAAI,CAACC,GAAL,CAAUL,MAAK,CAACG,KAAhB,EAAuBR,SAAS,CAACQ,KAAjC,CAAd;;AACA,gBAAMG,KAAG,GAAGF,IAAI,CAACG,GAAL,CAAYP,MAAK,CAACG,KAAN,GAAcH,MAAK,CAACQ,KAAhC,EAA2Cb,SAAS,CAACQ,KAAV,GAAkBR,SAAS,CAACa,KAAvE,CAAZ;;AAEA,iBAAM,IAAIC,EAAC,GAAGN,OAAR,EAAeO,GAAE,GAAGJ,KAA1B,EAA+BG,EAAC,GAAGC,GAAnC,EAAuCD,EAAC,IAAI,CAA5C,EAAgD;AAE/C,kBAAME,GAAC,GAAGF,EAAV;;AACA,kBAAMI,GAAC,GAAGJ,EAAC,GAAG,CAAd;;AACA,kBAAMK,GAAC,GAAGL,EAAC,GAAG,CAAd;;AAEAvB,cAAAA,YAAY,GAAG6B,+BAA+B,CAAE,IAAF,EAAQd,cAAR,EAAuB1B,SAAvB,EAAkChD,IAAlC,EAAwC6D,QAAxC,EAAkDE,aAAlD,EAAiEC,oBAAjE,EAAuFC,EAAvF,EAA2FC,GAA3F,EAAgGkB,GAAhG,EAAmGE,GAAnG,EAAsGC,GAAtG,CAA9C;;AAEA,kBAAK5B,YAAL,EAAoB;AAEnBA,gBAAAA,YAAY,CAAC8B,SAAb,GAAyBZ,IAAI,CAACa,KAAL,CAAYR,EAAC,GAAG,CAAhB,CAAzB,CAFmB,CAE2B;;AAC9CvB,gBAAAA,YAAY,CAACgC,IAAb,CAAkBhB,aAAlB,GAAkCF,MAAK,CAACE,aAAxC;AACA1B,gBAAAA,UAAU,CAACN,IAAX,CAAiBgB,YAAjB;AAEA;AAED;AAED;AAED,SA9BD,MA8BO;AAEN,cAAMiB,OAAK,GAAGC,IAAI,CAACC,GAAL,CAAU,CAAV,EAAaV,SAAS,CAACQ,KAAvB,CAAd;;AACA,cAAMG,KAAG,GAAGF,IAAI,CAACG,GAAL,CAAUnB,QAAQ,CAACoB,KAAnB,EAA4Bb,SAAS,CAACQ,KAAV,GAAkBR,SAAS,CAACa,KAAxD,CAAZ;;AAEA,eAAM,IAAIV,GAAC,GAAGK,OAAR,EAAeJ,IAAE,GAAGO,KAA1B,EAA+BR,GAAC,GAAGC,IAAnC,EAAuCD,GAAC,IAAI,CAA5C,EAAgD;AAE/C,gBAAMa,GAAC,GAAGb,GAAV;;AACA,gBAAMe,GAAC,GAAGf,GAAC,GAAG,CAAd;;AACA,gBAAMgB,GAAC,GAAGhB,GAAC,GAAG,CAAd;;AAEAZ,YAAAA,YAAY,GAAG6B,+BAA+B,CAAE,IAAF,EAAQtE,QAAR,EAAkB8B,SAAlB,EAA6BhD,IAA7B,EAAmC6D,QAAnC,EAA6CE,aAA7C,EAA4DC,oBAA5D,EAAkFC,EAAlF,EAAsFC,GAAtF,EAA2FkB,GAA3F,EAA8FE,GAA9F,EAAiGC,GAAjG,CAA9C;;AAEA,gBAAK5B,YAAL,EAAoB;AAEnBA,cAAAA,YAAY,CAAC8B,SAAb,GAAyBZ,IAAI,CAACa,KAAL,CAAYnB,GAAC,GAAG,CAAhB,CAAzB,CAFmB,CAE2B;;AAC9CtB,cAAAA,UAAU,CAACN,IAAX,CAAiBgB,YAAjB;AAEA;AAED;AAED;AAED;AAED,KAjID,MAiIO,IAAK1C,QAAQ,CAAC2E,UAAd,EAA2B;AAEjC,UAAMC,eAAe,GAAGxB,KAAK,CAACC,OAAN,CAAepD,QAAf,CAAxB;AAEA,UAAM4E,QAAQ,GAAG7E,QAAQ,CAAC6E,QAA1B;AACA,UAAMC,KAAK,GAAG9E,QAAQ,CAAC8E,KAAvB;AACA,UAAIC,GAAJ;AAEA,UAAMC,aAAa,GAAGhF,QAAQ,CAACgF,aAAT,CAAwB,CAAxB,CAAtB;AACA,UAAKA,aAAa,CAAC5D,MAAd,GAAuB,CAA5B,EAAgC2D,GAAG,GAAGC,aAAN;;AAEhC,WAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGJ,KAAK,CAAC1D,MAA5B,EAAoC6D,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAmD;AAElD,YAAMP,IAAI,GAAGI,KAAK,CAAEG,CAAF,CAAlB;AACA,YAAME,YAAY,GAAGP,eAAe,GAAG3E,QAAQ,CAAEyE,IAAI,CAAChB,aAAP,CAAX,GAAoCzD,QAAxE;AAEA,YAAKkF,YAAY,KAAK/E,SAAtB,EAAkC;AAElC,YAAMgF,GAAG,GAAGP,QAAQ,CAAEH,IAAI,CAACP,CAAP,CAApB;AACA,YAAMkB,GAAG,GAAGR,QAAQ,CAAEH,IAAI,CAACL,CAAP,CAApB;AACA,YAAMiB,GAAG,GAAGT,QAAQ,CAAEH,IAAI,CAACJ,CAAP,CAApB;AAEA5B,QAAAA,YAAY,GAAG6C,iBAAiB,CAAE,IAAF,EAAQJ,YAAR,EAAsBpD,SAAtB,EAAiChD,IAAjC,EAAuCqG,GAAvC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDzF,kBAAtD,CAAhC;;AAEA,YAAK6C,YAAL,EAAoB;AAEnB,cAAKqC,GAAG,IAAIA,GAAG,CAAEE,CAAF,CAAf,EAAuB;AAEtB,gBAAMO,KAAK,GAAGT,GAAG,CAAEE,CAAF,CAAjB;;AACAvF,YAAAA,IAAI,CAACkB,IAAL,CAAW4E,KAAK,CAAE,CAAF,CAAhB;;AACA7F,YAAAA,IAAI,CAACiB,IAAL,CAAW4E,KAAK,CAAE,CAAF,CAAhB;;AACA5F,YAAAA,IAAI,CAACgB,IAAL,CAAW4E,KAAK,CAAE,CAAF,CAAhB;;AAEA9C,YAAAA,YAAY,CAACM,EAAb,GAAkBxE,QAAQ,CAACiH,KAAT,CAAgB5F,kBAAhB,EAAoCuF,GAApC,EAAyCC,GAAzC,EAA8CC,GAA9C,EAAmD5F,IAAnD,EAAyDC,IAAzD,EAA+DC,IAA/D,EAAqE,IAAIzB,OAAJ,EAArE,CAAlB;AAEA;;AAEDuE,UAAAA,YAAY,CAACgC,IAAb,GAAoBA,IAApB;AACAhC,UAAAA,YAAY,CAAC8B,SAAb,GAAyBS,CAAzB;AACAjD,UAAAA,UAAU,CAACN,IAAX,CAAiBgB,YAAjB;AAEA;AAED;AAED;AAED;AA1RmE,CAApD,CAAjB;;AA8RA,SAAS6C,iBAAT,CAA4BG,MAA5B,EAAoCzF,QAApC,EAA8C8B,SAA9C,EAAyDM,GAAzD,EAA8DsD,EAA9D,EAAkEC,EAAlE,EAAsEC,EAAtE,EAA0EC,KAA1E,EAAkF;AAEjF,MAAIC,SAAJ;;AAEA,MAAK9F,QAAQ,CAAC+F,IAAT,KAAkBrH,QAAvB,EAAkC;AAEjCoH,IAAAA,SAAS,GAAG1D,GAAG,CAAC4D,iBAAJ,CAAuBJ,EAAvB,EAA2BD,EAA3B,EAA+BD,EAA/B,EAAmC,IAAnC,EAAyCG,KAAzC,CAAZ;AAEA,GAJD,MAIO;AAENC,IAAAA,SAAS,GAAG1D,GAAG,CAAC4D,iBAAJ,CAAuBN,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC5F,QAAQ,CAAC+F,IAAT,KAAkBtH,UAArD,EAAiEoH,KAAjE,CAAZ;AAEA;;AAED,MAAKC,SAAS,KAAK,IAAnB,EAA0B,OAAO,IAAP;;AAE1BjG,EAAAA,uBAAuB,CAACc,IAAxB,CAA8BkF,KAA9B;;AACAhG,EAAAA,uBAAuB,CAACsC,YAAxB,CAAsCsD,MAAM,CAACzD,WAA7C;;AAEA,MAAMiE,QAAQ,GAAGnE,SAAS,CAACM,GAAV,CAAc8D,MAAd,CAAqBC,UAArB,CAAiCtG,uBAAjC,CAAjB;AAEA,MAAKoG,QAAQ,GAAGnE,SAAS,CAACsE,IAArB,IAA6BH,QAAQ,GAAGnE,SAAS,CAACuE,GAAvD,EAA6D,OAAO,IAAP;AAE7D,SAAO;AACNJ,IAAAA,QAAQ,EAAEA,QADJ;AAENJ,IAAAA,KAAK,EAAEhG,uBAAuB,CAACyG,KAAxB,EAFD;AAGNb,IAAAA,MAAM,EAAEA;AAHF,GAAP;AAMA;;AAED,SAASnB,+BAAT,CAA0CmB,MAA1C,EAAkDzF,QAAlD,EAA4D8B,SAA5D,EAAuEM,GAAvE,EAA4EO,QAA5E,EAAsFE,aAAtF,EAAqGC,oBAArG,EAA2HC,EAA3H,EAA+HC,GAA/H,EAAoIkB,CAApI,EAAuIE,CAAvI,EAA0IC,CAA1I,EAA8I;AAE7IrF,EAAAA,GAAG,CAACuH,mBAAJ,CAAyB5D,QAAzB,EAAmCuB,CAAnC;;AACAjF,EAAAA,GAAG,CAACsH,mBAAJ,CAAyB5D,QAAzB,EAAmCyB,CAAnC;;AACAlF,EAAAA,GAAG,CAACqH,mBAAJ,CAAyB5D,QAAzB,EAAmC0B,CAAnC;;AAEA,MAAMmC,eAAe,GAAGf,MAAM,CAAC5E,qBAA/B;;AAEA,MAAKb,QAAQ,CAAC0B,YAAT,IAAyBmB,aAAzB,IAA0C2D,eAA/C,EAAiE;AAEhElH,IAAAA,OAAO,CAACmH,GAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;;AACAlH,IAAAA,OAAO,CAACkH,GAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;;AACAjH,IAAAA,OAAO,CAACiH,GAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;;AAEA,SAAM,IAAIpD,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGT,aAAa,CAAC1B,MAApC,EAA4CkC,CAAC,GAAGC,EAAhD,EAAoDD,CAAC,EAArD,EAA2D;AAE1D,UAAMqD,SAAS,GAAGF,eAAe,CAAEnD,CAAF,CAAjC;AACA,UAAMjC,cAAc,GAAGyB,aAAa,CAAEQ,CAAF,CAApC;AAEA,UAAKqD,SAAS,KAAK,CAAnB,EAAuB;;AAEvBvH,MAAAA,MAAM,CAACoH,mBAAP,CAA4BnF,cAA5B,EAA4C8C,CAA5C;;AACA9E,MAAAA,MAAM,CAACmH,mBAAP,CAA4BnF,cAA5B,EAA4CgD,CAA5C;;AACA/E,MAAAA,MAAM,CAACkH,mBAAP,CAA4BnF,cAA5B,EAA4CiD,CAA5C;;AAEA,UAAKvB,oBAAL,EAA4B;AAE3BxD,QAAAA,OAAO,CAACqH,eAAR,CAAyBxH,MAAzB,EAAiCuH,SAAjC;;AACAnH,QAAAA,OAAO,CAACoH,eAAR,CAAyBvH,MAAzB,EAAiCsH,SAAjC;;AACAlH,QAAAA,OAAO,CAACmH,eAAR,CAAyBtH,MAAzB,EAAiCqH,SAAjC;AAEA,OAND,MAMO;AAENpH,QAAAA,OAAO,CAACqH,eAAR,CAAyBxH,MAAM,CAACyH,GAAP,CAAY5H,GAAZ,CAAzB,EAA4C0H,SAA5C;;AACAnH,QAAAA,OAAO,CAACoH,eAAR,CAAyBvH,MAAM,CAACwH,GAAP,CAAY3H,GAAZ,CAAzB,EAA4CyH,SAA5C;;AACAlH,QAAAA,OAAO,CAACmH,eAAR,CAAyBtH,MAAM,CAACuH,GAAP,CAAY1H,GAAZ,CAAzB,EAA4CwH,SAA5C;AAEA;AAED;;AAED1H,IAAAA,GAAG,CAAC6H,GAAJ,CAASvH,OAAT;;AACAL,IAAAA,GAAG,CAAC4H,GAAJ,CAAStH,OAAT;;AACAL,IAAAA,GAAG,CAAC2H,GAAJ,CAASrH,OAAT;AAEA;;AAED,MAAKiG,MAAM,CAACqB,aAAZ,EAA4B;AAE3BrB,IAAAA,MAAM,CAACsB,aAAP,CAAsB7C,CAAtB,EAAyBlF,GAAzB;AACAyG,IAAAA,MAAM,CAACsB,aAAP,CAAsB3C,CAAtB,EAAyBnF,GAAzB;AACAwG,IAAAA,MAAM,CAACsB,aAAP,CAAsB1C,CAAtB,EAAyBnF,GAAzB;AAEA;;AAED,MAAMuD,YAAY,GAAG6C,iBAAiB,CAAEG,MAAF,EAAUzF,QAAV,EAAoB8B,SAApB,EAA+BM,GAA/B,EAAoCpD,GAApC,EAAyCC,GAAzC,EAA8CC,GAA9C,EAAmDU,kBAAnD,CAAtC;;AAEA,MAAK6C,YAAL,EAAoB;AAEnB,QAAKM,EAAL,EAAU;AAETtD,MAAAA,IAAI,CAAC8G,mBAAL,CAA0BxD,EAA1B,EAA8BmB,CAA9B;;AACAxE,MAAAA,IAAI,CAAC6G,mBAAL,CAA0BxD,EAA1B,EAA8BqB,CAA9B;;AACAzE,MAAAA,IAAI,CAAC4G,mBAAL,CAA0BxD,EAA1B,EAA8BsB,CAA9B;;AAEA5B,MAAAA,YAAY,CAACM,EAAb,GAAkBxE,QAAQ,CAACiH,KAAT,CAAgB5F,kBAAhB,EAAoCZ,GAApC,EAAyCC,GAAzC,EAA8CC,GAA9C,EAAmDO,IAAnD,EAAyDC,IAAzD,EAA+DC,IAA/D,EAAqE,IAAIzB,OAAJ,EAArE,CAAlB;AAEA;;AAED,QAAK8E,GAAL,EAAW;AAEVvD,MAAAA,IAAI,CAAC8G,mBAAL,CAA0BvD,GAA1B,EAA+BkB,CAA/B;;AACAxE,MAAAA,IAAI,CAAC6G,mBAAL,CAA0BvD,GAA1B,EAA+BoB,CAA/B;;AACAzE,MAAAA,IAAI,CAAC4G,mBAAL,CAA0BvD,GAA1B,EAA+BqB,CAA/B;;AAEA5B,MAAAA,YAAY,CAACO,GAAb,GAAmBzE,QAAQ,CAACiH,KAAT,CAAgB5F,kBAAhB,EAAoCZ,GAApC,EAAyCC,GAAzC,EAA8CC,GAA9C,EAAmDO,IAAnD,EAAyDC,IAAzD,EAA+DC,IAA/D,EAAqE,IAAIzB,OAAJ,EAArE,CAAnB;AAEA;;AAED,QAAMuG,IAAI,GAAG,IAAIjG,KAAJ,CAAW0F,CAAX,EAAcE,CAAd,EAAiBC,CAAjB,CAAb;AACA9F,IAAAA,QAAQ,CAACyI,SAAT,CAAoBhI,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCuF,IAAI,CAACwC,MAAxC;AAEAxE,IAAAA,YAAY,CAACgC,IAAb,GAAoBA,IAApB;AAEA;;AAED,SAAOhC,YAAP;AAEA;;AAED,SAAS3C,IAAT","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Face3 } from '../core/Face3.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nconst _inverseMatrix = new Matrix4();\nconst _ray = new Ray();\nconst _sphere = new Sphere();\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _tempA = new Vector3();\nconst _tempB = new Vector3();\nconst _tempC = new Vector3();\n\nconst _morphA = new Vector3();\nconst _morphB = new Vector3();\nconst _morphC = new Vector3();\n\nconst _uvA = new Vector2();\nconst _uvB = new Vector2();\nconst _uvC = new Vector2();\n\nconst _intersectionPoint = new Vector3();\nconst _intersectionPointWorld = new Vector3();\n\nfunction Mesh( geometry, material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Mesh';\n\n\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\tthis.material = material !== undefined ? material : new MeshBasicMaterial();\n\n\tthis.updateMorphTargets();\n\n}\n\nMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Mesh,\n\n\tisMesh: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t},\n\n\tupdateMorphTargets: function () {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.getInverse( matrixWorld );\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconst isMultiMaterial = Array.isArray( material );\n\n\t\t\tconst vertices = geometry.vertices;\n\t\t\tconst faces = geometry.faces;\n\t\t\tlet uvs;\n\n\t\t\tconst faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\tfor ( let f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\tconst face = faces[ f ];\n\t\t\t\tconst faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\tconst fvA = vertices[ face.a ];\n\t\t\t\tconst fvB = vertices[ face.b ];\n\t\t\t\tconst fvC = vertices[ face.c ];\n\n\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\tconst uvs_f = uvs[ f ];\n\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tintersection.face = face;\n\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n} );\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( material.morphTargets && morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA.add( _morphA );\n\t\t_vB.add( _morphB );\n\t\t_vC.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA );\n\t\tobject.boneTransform( b, _vB );\n\t\tobject.boneTransform( c, _vC );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tconst face = new Face3( a, b, c );\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { Mesh };\n"]},"metadata":{},"sourceType":"module"}