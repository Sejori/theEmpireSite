{"ast":null,"code":"import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass PolarGridHelper extends LineSegments {\n  constructor(radius, radials, circles, divisions, color1, color2) {\n    radius = radius || 10;\n    radials = radials || 16;\n    circles = circles || 8;\n    divisions = divisions || 64;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n    var vertices = [];\n    var colors = []; // create the radials\n\n    for (var i = 0; i <= radials; i++) {\n      var v = i / radials * (Math.PI * 2);\n      var x = Math.sin(v) * radius;\n      var z = Math.cos(v) * radius;\n      vertices.push(0, 0, 0);\n      vertices.push(x, 0, z);\n      var color = i & 1 ? color1 : color2;\n      colors.push(color.r, color.g, color.b);\n      colors.push(color.r, color.g, color.b);\n    } // create the circles\n\n\n    for (var _i = 0; _i <= circles; _i++) {\n      var _color = _i & 1 ? color1 : color2;\n\n      var r = radius - radius / circles * _i;\n\n      for (var j = 0; j < divisions; j++) {\n        // first vertex\n        var _v = j / divisions * (Math.PI * 2);\n\n        var _x = Math.sin(_v) * r;\n\n        var _z = Math.cos(_v) * r;\n\n        vertices.push(_x, 0, _z);\n        colors.push(_color.r, _color.g, _color.b); // second vertex\n\n        _v = (j + 1) / divisions * (Math.PI * 2);\n        _x = Math.sin(_v) * r;\n        _z = Math.cos(_v) * r;\n        vertices.push(_x, 0, _z);\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'PolarGridHelper';\n  }\n\n}\n\nexport { PolarGridHelper };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/helpers/PolarGridHelper.js"],"names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","PolarGridHelper","constructor","radius","radials","circles","divisions","color1","color2","undefined","vertices","colors","i","v","Math","PI","x","sin","z","cos","push","color","r","g","b","j","geometry","setAttribute","material","vertexColors","toneMapped","type"],"mappings":"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","sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( let i = 0; i <= radials; i ++ ) {\n\n\t\t\tconst v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( let i = 0; i <= circles; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / circles * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n}\n\n\nexport { PolarGridHelper };\n"]},"metadata":{},"sourceType":"module"}