{"ast":null,"code":"import { Vector2 } from './Vector2.js';\n\nvar _vector = /*@__PURE__*/new Vector2();\n\nclass Box2 {\n  constructor(min, max) {\n    Object.defineProperty(this, 'isBox2', {\n      value: true\n    });\n    this.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n    this.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n  }\n\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  }\n\n  setFromCenterAndSize(center, size) {\n    var halfSize = _vector.copy(size).multiplyScalar(0.5);\n\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  makeEmpty() {\n    this.min.x = this.min.y = +Infinity;\n    this.max.x = this.max.y = -Infinity;\n    return this;\n  }\n\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y;\n  }\n\n  getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box2: .getCenter() target is now required');\n      target = new Vector2();\n    }\n\n    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  getSize(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box2: .getSize() target is now required');\n      target = new Vector2();\n    }\n\n    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n  }\n\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n  }\n\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    if (target === undefined) {\n      console.warn('THREE.Box2: .getParameter() target is now required');\n      target = new Vector2();\n    }\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n  }\n\n  intersectsBox(box) {\n    // using 4 splitting planes to rule out intersections\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n  }\n\n  clampPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Box2: .clampPoint() target is now required');\n      target = new Vector2();\n    }\n\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  distanceToPoint(point) {\n    var clampedPoint = _vector.copy(point).clamp(this.min, this.max);\n\n    return clampedPoint.sub(point).length();\n  }\n\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max);\n    return this;\n  }\n\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n\n}\n\nexport { Box2 };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/Box2.js"],"names":["Vector2","_vector","Box2","constructor","min","max","Object","defineProperty","value","undefined","Infinity","set","copy","setFromPoints","points","makeEmpty","i","il","length","expandByPoint","setFromCenterAndSize","center","size","halfSize","multiplyScalar","sub","add","clone","box","x","y","isEmpty","getCenter","target","console","warn","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","clamp","distanceToPoint","clampedPoint","intersect","union","translate","offset","equals"],"mappings":"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","sourcesContent":["import { Vector2 } from './Vector2.js';\n\nconst _vector = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min, max ) {\n\n\t\tObject.defineProperty( this, 'isBox2', { value: true } );\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\n\nexport { Box2 };\n"]},"metadata":{},"sourceType":"module"}