{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('three')) : typeof define === 'function' && define.amd ? define(['exports', 'three'], factory) : (global = global || self, factory(global.troika_three_utils = {}, global.THREE));\n})(this, function (exports, three) {\n  'use strict';\n  /**\n   * Regular expression for matching the `void main() {` opener line in GLSL.\n   * @type {RegExp}\n   */\n\n  var voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n  /**\n   * Recursively expands all `#include <xyz>` statements within string of shader code.\n   * Copied from three's WebGLProgram#parseIncludes for external use.\n   *\n   * @param {string} source - The GLSL source code to evaluate\n   * @return {string} The GLSL code with all includes expanded\n   */\n\n  function expandShaderIncludes(source) {\n    var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n    function replace(match, include) {\n      var chunk = three.ShaderChunk[include];\n      return chunk ? expandShaderIncludes(chunk) : match;\n    }\n\n    return source.replace(pattern, replace);\n  } // Local assign polyfill to avoid importing troika-core\n\n\n  var assign = Object.assign || function ()\n  /*target, ...sources*/\n  {\n    var arguments$1 = arguments;\n    var target = arguments[0];\n\n    for (var i = 1, len = arguments.length; i < len; i++) {\n      var source = arguments$1[i];\n\n      if (source) {\n        for (var prop in source) {\n          if (source.hasOwnProperty(prop)) {\n            target[prop] = source[prop];\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  var epoch = Date.now();\n  var CACHE = new WeakMap(); //threejs requires WeakMap internally so should be safe to assume support\n\n  /**\n   * A utility for creating a custom shader material derived from another material's\n   * shaders. This allows you to inject custom shader logic and transforms into the\n   * builtin ThreeJS materials without having to recreate them from scratch.\n   *\n   * @param {THREE.Material} baseMaterial - the original material to derive from\n   *\n   * @param {Object} options - How the base material should be modified.\n   * @param {Object} options.defines - Custom `defines` for the material\n   * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\n   * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\n   *        be accessed and manipulated via the resulting material's `uniforms` property, just like\n   *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\n   * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\n   *        both shaders, and it will automatically be updated on each render frame with a number of\n   *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\n   *        true calendar time.\n   * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\n   *        shader's `void main` function.\n   * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\n   *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\n   *        those attributes exposed by their normal names as read/write values.\n   * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\n   *        definitions, above the `void main()` function.\n   * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\n   *        shader's `void main` function.\n   * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\n   *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\n   *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\n   *        want those to apply to your changes use `fragmentColorTransform` instead.\n   * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\n   *        output value. Will be injected near the end of the `void main` function, but before any\n   *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\n   *        `fragmentMainOutro`.\n   * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\n   *        for performing custom rewrites of the full shader code. Useful if you need to do something\n   *        special that's not covered by the other builtin options. This function will be executed before\n   *        any other transforms are applied.\n   *\n   * @return {THREE.Material}\n   *\n   * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\n   * which can be called to get a variant of the derived material for use in shadow casting. If the\n   * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\n   * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\n   * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\n   * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\n   * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\n   * scenarios, e.g. skipping antialiasing or expensive shader logic.\n   */\n\n  function createDerivedMaterial(baseMaterial, options) {\n    // First check the cache to see if we've already derived from this baseMaterial using\n    // this unique set of options, and if so just return a clone instead of a new subclass\n    // which is faster and allows their shader program to be shared when rendering.\n    var optionsHash = getOptionsHash(options);\n    var cached = CACHE.get(baseMaterial);\n\n    if (!cached) {\n      cached = Object.create(null);\n      CACHE.set(baseMaterial, cached);\n    }\n\n    if (cached[optionsHash]) {\n      return cached[optionsHash].clone();\n    } // Even if baseMaterial is changing, use a consistent id in shader rewrites based on the\n    // optionsHash. This makes it more likely that deriving from base materials of the same\n    // type/class, e.g. multiple instances of MeshStandardMaterial, will produce identical\n    // rewritten shader code so they can share a single WebGLProgram behind the scenes.\n\n\n    var id = getIdForOptionsHash(optionsHash);\n    var privateDerivedShadersProp = \"_derivedShaders\" + id;\n    var privateBeforeCompileProp = \"_onBeforeCompile\" + id;\n    var distanceMaterialTpl, depthMaterialTpl; // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n    // the renderer switches to this material's program\n\n    function onBeforeCompile(shaderInfo) {\n      baseMaterial.onBeforeCompile.call(this, shaderInfo); // Upgrade the shaders, caching the result\n\n      var ref = this[privateDerivedShadersProp] || (this[privateDerivedShadersProp] = {\n        vertex: {},\n        fragment: {}\n      });\n      var vertex = ref.vertex;\n      var fragment = ref.fragment;\n\n      if (vertex.source !== shaderInfo.vertexShader || fragment.source !== shaderInfo.fragmentShader) {\n        var upgraded = upgradeShaders(shaderInfo, options, id);\n        vertex.source = shaderInfo.vertexShader;\n        vertex.result = upgraded.vertexShader;\n        fragment.source = shaderInfo.fragmentShader;\n        fragment.result = upgraded.fragmentShader;\n      } // Inject upgraded shaders and uniforms into the program\n\n\n      shaderInfo.vertexShader = vertex.result;\n      shaderInfo.fragmentShader = fragment.result;\n      assign(shaderInfo.uniforms, this.uniforms); // Inject auto-updating time uniform if requested\n\n      if (options.timeUniform) {\n        shaderInfo.uniforms[options.timeUniform] = {\n          get value() {\n            return Date.now() - epoch;\n          }\n\n        };\n      } // Users can still add their own handlers on top of ours\n\n\n      if (this[privateBeforeCompileProp]) {\n        this[privateBeforeCompileProp](shaderInfo);\n      }\n    }\n\n    function DerivedMaterial() {\n      baseMaterial.constructor.apply(this, arguments);\n      this._listeners = undefined; //don't inherit EventDispatcher listeners\n    }\n\n    DerivedMaterial.prototype = Object.create(baseMaterial, {\n      constructor: {\n        value: DerivedMaterial\n      },\n      isDerivedMaterial: {\n        value: true\n      },\n      baseMaterial: {\n        value: baseMaterial\n      },\n      onBeforeCompile: {\n        get: function get() {\n          return onBeforeCompile;\n        },\n        set: function set(fn) {\n          this[privateBeforeCompileProp] = fn;\n        }\n      },\n      copy: {\n        value: function value(source) {\n          baseMaterial.copy.call(this, source);\n\n          if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n            this.extensions = assign({}, source.extensions);\n            this.defines = assign({}, source.defines);\n            this.uniforms = three.UniformsUtils.clone(source.uniforms);\n          }\n\n          return this;\n        }\n      },\n\n      /**\n       * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDepthMaterial: {\n        value: function value() {\n          var depthMaterial = this._depthMaterial;\n\n          if (!depthMaterial) {\n            if (!depthMaterialTpl) {\n              depthMaterialTpl = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new three.MeshDepthMaterial({\n                depthPacking: three.RGBADepthPacking\n              }), options);\n              depthMaterialTpl.defines.IS_DEPTH_MATERIAL = '';\n            }\n\n            depthMaterial = this._depthMaterial = depthMaterialTpl.clone();\n            depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n          }\n\n          return depthMaterial;\n        }\n      },\n\n      /**\n       * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\n       * transformations and discarded fragments.\n       */\n      getDistanceMaterial: {\n        value: function value() {\n          var distanceMaterial = this._distanceMaterial;\n\n          if (!distanceMaterial) {\n            if (!distanceMaterialTpl) {\n              distanceMaterialTpl = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new three.MeshDistanceMaterial(), options);\n              distanceMaterialTpl.defines.IS_DISTANCE_MATERIAL = '';\n            }\n\n            distanceMaterial = this._distanceMaterial = distanceMaterialTpl.clone();\n            distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n          }\n\n          return distanceMaterial;\n        }\n      },\n      dispose: {\n        value: function value() {\n          var ref = this;\n          var _depthMaterial = ref._depthMaterial;\n          var _distanceMaterial = ref._distanceMaterial;\n\n          if (_depthMaterial) {\n            _depthMaterial.dispose();\n          }\n\n          if (_distanceMaterial) {\n            _distanceMaterial.dispose();\n          }\n\n          baseMaterial.dispose.call(this);\n        }\n      }\n    });\n    var material = new DerivedMaterial();\n    material.copy(baseMaterial); // Merge uniforms, defines, and extensions\n\n    material.uniforms = assign(three.UniformsUtils.clone(baseMaterial.uniforms || {}), options.uniforms);\n    material.defines = assign({}, baseMaterial.defines, options.defines);\n    material.defines[\"TROIKA_DERIVED_MATERIAL_\" + id] = ''; //force a program change from the base material\n\n    material.extensions = assign({}, baseMaterial.extensions, options.extensions);\n    cached[optionsHash] = material;\n    return material.clone(); //return a clone so changes made to it don't affect the cached object\n  }\n\n  function upgradeShaders(ref, options, id) {\n    var vertexShader = ref.vertexShader;\n    var fragmentShader = ref.fragmentShader;\n    var vertexDefs = options.vertexDefs;\n    var vertexMainIntro = options.vertexMainIntro;\n    var vertexMainOutro = options.vertexMainOutro;\n    var vertexTransform = options.vertexTransform;\n    var fragmentDefs = options.fragmentDefs;\n    var fragmentMainIntro = options.fragmentMainIntro;\n    var fragmentMainOutro = options.fragmentMainOutro;\n    var fragmentColorTransform = options.fragmentColorTransform;\n    var customRewriter = options.customRewriter;\n    var timeUniform = options.timeUniform;\n    vertexDefs = vertexDefs || '';\n    vertexMainIntro = vertexMainIntro || '';\n    vertexMainOutro = vertexMainOutro || '';\n    fragmentDefs = fragmentDefs || '';\n    fragmentMainIntro = fragmentMainIntro || '';\n    fragmentMainOutro = fragmentMainOutro || ''; // Expand includes if needed\n\n    if (vertexTransform || customRewriter) {\n      vertexShader = expandShaderIncludes(vertexShader);\n    }\n\n    if (fragmentColorTransform || customRewriter) {\n      // We need to be able to find postprocessing chunks after include expansion in order to\n      // put them after the fragmentColorTransform, so mark them with comments first. Even if\n      // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n      // so we still mark them.\n      fragmentShader = fragmentShader.replace(/^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n');\n      fragmentShader = expandShaderIncludes(fragmentShader);\n    } // Apply custom rewriter function\n\n\n    if (customRewriter) {\n      var res = customRewriter({\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      });\n      vertexShader = res.vertexShader;\n      fragmentShader = res.fragmentShader;\n    } // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n    // those and re-insert them into the outro in the correct place:\n\n\n    if (fragmentColorTransform) {\n      var postChunks = [];\n      fragmentShader = fragmentShader.replace(/^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n      function (match) {\n        postChunks.push(match);\n        return '';\n      });\n      fragmentMainOutro = fragmentColorTransform + \"\\n\" + postChunks.join('\\n') + \"\\n\" + fragmentMainOutro;\n    } // Inject auto-updating time uniform if requested\n\n\n    if (timeUniform) {\n      var code = \"\\nuniform float \" + timeUniform + \";\\n\";\n      vertexDefs = code + vertexDefs;\n      fragmentDefs = code + fragmentDefs;\n    } // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n\n\n    if (vertexTransform) {\n      vertexDefs = vertexDefs + \"\\nvec3 troika_position_\" + id + \";\\nvec3 troika_normal_\" + id + \";\\nvec2 troika_uv_\" + id + \";\\nvoid troikaVertexTransform\" + id + \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \" + vertexTransform + \"\\n}\\n\";\n      vertexMainIntro = \"\\ntroika_position_\" + id + \" = vec3(position);\\ntroika_normal_\" + id + \" = vec3(normal);\\ntroika_uv_\" + id + \" = vec2(uv);\\ntroikaVertexTransform\" + id + \"(troika_position_\" + id + \", troika_normal_\" + id + \", troika_uv_\" + id + \");\\n\" + vertexMainIntro + \"\\n\";\n      vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, function (match, match1, index, fullStr) {\n        return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : \"troika_\" + match1 + \"_\" + id;\n      });\n    } // Inject defs and intro/outro snippets\n\n\n    vertexShader = injectIntoShaderCode(vertexShader, id, vertexDefs, vertexMainIntro, vertexMainOutro);\n    fragmentShader = injectIntoShaderCode(fragmentShader, id, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n    return {\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    };\n  }\n\n  function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n    if (intro || outro || defs) {\n      shaderCode = shaderCode.replace(voidMainRegExp, \"\\n\" + defs + \"\\nvoid troikaOrigMain\" + id + \"() {\");\n      shaderCode += \"\\nvoid main() {\\n  \" + intro + \"\\n  troikaOrigMain\" + id + \"();\\n  \" + outro + \"\\n}\";\n    }\n\n    return shaderCode;\n  }\n\n  function getOptionsHash(options) {\n    return JSON.stringify(options, optionsJsonReplacer);\n  }\n\n  function optionsJsonReplacer(key, value) {\n    return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value;\n  }\n\n  var _idCtr = 0;\n  var optionsHashesToIds = new Map();\n\n  function getIdForOptionsHash(optionsHash) {\n    var id = optionsHashesToIds.get(optionsHash);\n\n    if (id == null) {\n      optionsHashesToIds.set(optionsHash, id = ++_idCtr);\n    }\n\n    return id;\n  } // Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n  // TODO how can we keep this from getting stale?\n\n\n  var MATERIAL_TYPES_TO_SHADERS = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'phong',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n  /**\n   * Given a Three.js `Material` instance, find the shaders/uniforms that will be\n   * used to render that material.\n   *\n   * @param material - the Material instance\n   * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\n   */\n\n  function getShadersForMaterial(material) {\n    var builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n    return builtinType ? three.ShaderLib[builtinType] : material; //TODO fallback for unknown type?\n  }\n  /**\n   * Find all uniforms and their types within a shader code string.\n   *\n   * @param {string} shader - The shader code to parse\n   * @return {object} mapping of uniform names to their glsl type\n   */\n\n\n  function getShaderUniformTypes(shader) {\n    var uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\n    var uniforms = Object.create(null);\n    var match;\n\n    while ((match = uniformRE.exec(shader)) !== null) {\n      uniforms[match[2]] = match[1];\n    }\n\n    return uniforms;\n  }\n  /**\n   * @class ShaderFloatArray\n   *\n   * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\n   * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\n   * because:\n   *\n   *   - GLSL \"array\" uniforms can only be of a constant length.\n   *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\n   *     extension is available.\n   *\n   * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\n   * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\n   * and GLSL code for you to put in your custom shader to query the float values by array index.\n   *\n   * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\n   * only allow texture lookups in fragment shaders.\n   *\n   * TODO:\n   *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\n   *   - Use a float texture if the extension is available so we can skip the encoding process\n   */\n\n\n  var ShaderFloatArray = function ShaderFloatArray(name) {\n    this.name = name;\n    this.textureUniform = \"dataTex_\" + name;\n    this.textureSizeUniform = \"dataTexSize_\" + name;\n    this.multiplierUniform = \"dataMultiplier_\" + name;\n    /**\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\n     * length of the data array.\n     * @type {string}\n     */\n\n    this.dataSizeUniform = \"dataSize_\" + name;\n    /**\n     * @property readFunction - the name of the GLSL function that should be called to\n     * read data out of the array by index.\n     * @type {string}\n     */\n\n    this.readFunction = \"readData_\" + name;\n    this._raw = new Float32Array(0);\n    this._texture = new three.DataTexture(new Uint8Array(0), 0, 1);\n    this._length = 0;\n    this._multiplier = 1;\n  };\n\n  var prototypeAccessors = {\n    length: {\n      configurable: true\n    }\n  };\n  /**\n   * @property length - the current length of the data array\n   * @type {number}\n   */\n\n  prototypeAccessors.length.set = function (value) {\n    if (value !== this._length) {\n      // Find nearest power-of-2 that holds the new length\n      var size = Math.pow(2, Math.ceil(Math.log2(value)));\n      var raw = this._raw;\n\n      if (size < raw.length) {\n        this._raw = raw.subarray(0, size);\n      } else if (size > raw.length) {\n        this._raw = new Float32Array(size);\n\n        this._raw.set(raw);\n      }\n\n      this._length = value;\n    }\n  };\n\n  prototypeAccessors.length.get = function () {\n    return this._length;\n  };\n  /**\n   * Add a value to the end of the data array\n   * @param {number} value\n   */\n\n\n  ShaderFloatArray.prototype.push = function push(value) {\n    return this.set(this.length++, value);\n  };\n  /**\n   * Replace the existing data with that from a new array\n   * @param {ArrayLike<number>} array\n   */\n\n\n  ShaderFloatArray.prototype.setArray = function setArray(array) {\n    this.length = array.length;\n\n    this._raw.set(array);\n\n    this._needsRepack = true;\n  };\n  /**\n   * Get the current value at index\n   * @param {number} index\n   * @return {number}\n   */\n\n\n  ShaderFloatArray.prototype.get = function get(index) {\n    return this._raw[index];\n  };\n\n  ShaderFloatArray.prototype.set = function set(index, value) {\n    if (index + 1 > this._length) {\n      this.length = index + 1;\n    }\n\n    if (value !== this._raw[index]) {\n      this._raw[index] = value;\n      encodeFloatToFourInts(value / this._multiplier, this._texture.image.data, index * 4);\n      this._needsMultCheck = true;\n    }\n  };\n  /**\n   * Make a copy of this ShaderFloatArray\n   * @return {ShaderFloatArray}\n   */\n\n\n  ShaderFloatArray.prototype.clone = function clone() {\n    var clone = new ShaderFloatArray(this.name);\n    clone.setArray(this._raw);\n    return clone;\n  };\n  /**\n   * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\n   * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\n   * @return {Object}\n   */\n\n\n  ShaderFloatArray.prototype.getShaderUniforms = function getShaderUniforms() {\n    var obj;\n    var me = this;\n    return obj = {}, obj[this.textureUniform] = {\n      get value() {\n        me._sync();\n\n        return me._texture;\n      }\n\n    }, obj[this.textureSizeUniform] = {\n      get value() {\n        me._sync();\n\n        return me._texture.image.width;\n      }\n\n    }, obj[this.dataSizeUniform] = {\n      get value() {\n        me._sync();\n\n        return me.length;\n      }\n\n    }, obj[this.multiplierUniform] = {\n      get value() {\n        me._sync();\n\n        return me._multiplier;\n      }\n\n    }, obj;\n  };\n  /**\n   * Retrieve the GLSL code that must be injected into the shader's definitions area to\n   * enable reading from the data array. This exposes a function with a name matching\n   * the {@link #readFunction} property, which other shader code can call to read values\n   * from the array by their index.\n   * @return {string}\n   */\n\n\n  ShaderFloatArray.prototype.getShaderHeaderCode = function getShaderHeaderCode() {\n    var ref = this;\n    var textureUniform = ref.textureUniform;\n    var textureSizeUniform = ref.textureSizeUniform;\n    var dataSizeUniform = ref.dataSizeUniform;\n    var multiplierUniform = ref.multiplierUniform;\n    var readFunction = ref.readFunction;\n    return \"\\nuniform sampler2D \" + textureUniform + \";\\nuniform float \" + textureSizeUniform + \";\\nuniform float \" + dataSizeUniform + \";\\nuniform float \" + multiplierUniform + \";\\n\\nfloat \" + readFunction + \"(float index) {\\n  vec2 texUV = vec2((index + 0.5) / \" + textureSizeUniform + \", 0.5);\\n  vec4 pixel = texture2D(\" + textureUniform + \", texUV);\\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * \" + multiplierUniform + \";\\n}\\n\";\n  };\n  /**\n   * @private Synchronize any pending changes to the underlying DataTexture\n   */\n\n\n  ShaderFloatArray.prototype._sync = function _sync() {\n    var tex = this._texture;\n    var raw = this._raw;\n    var needsRepack = this._needsRepack; // If the size of the raw array changed, resize the texture to match\n\n    if (raw.length !== tex.image.width) {\n      tex.image = {\n        data: new Uint8Array(raw.length * 4),\n        width: raw.length,\n        height: 1\n      };\n      needsRepack = true;\n    } // If the values changed, check the multiplier. This should be a value by which\n    // all the values are divided to constrain them to the [0,1] range required by\n    // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\n    // maximum value for greatest accuracy.\n\n\n    if (needsRepack || this._needsMultCheck) {\n      var maxVal = this._raw.reduce(function (a, b) {\n        return Math.max(a, b);\n      }, 0);\n\n      var mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\n\n      if (mult !== this._multiplier) {\n        this._multiplier = mult;\n        needsRepack = true;\n      }\n\n      tex.needsUpdate = true;\n      this._needsMultCheck = false;\n    } // If things changed in a way we need to repack, do so\n\n\n    if (needsRepack) {\n      for (var i = 0, len = raw.length, mult$1 = this._multiplier; i < len; i++) {\n        encodeFloatToFourInts(raw[i] / mult$1, tex.image.data, i * 4);\n      }\n\n      this._needsRepack = false;\n    }\n  };\n\n  Object.defineProperties(ShaderFloatArray.prototype, prototypeAccessors);\n  /**\n   * Encode a floating point number into a set of four 8-bit integers.\n   * Also see the companion decoder function #decodeFloatFromFourInts.\n   *\n   * This is adapted to JavaScript from the basic approach at\n   * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n   * but writes out integers in the range 0-255 instead of floats in the range 0-1\n   * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\n   *\n   * Some precision will necessarily be lost during the encoding and decoding process.\n   * Testing shows that the maximum precision error is ~1.18e-10 which should be good\n   * enough for most cases.\n   *\n   * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\n   *        otherwise the results will be incorrect.\n   * @param {Array|Uint8Array} array - an array into which the four ints should be written\n   * @param {Number} startIndex - index in the output array at which to start writing the ints\n   * @return {Array|Uint8Array}\n   */\n\n  function encodeFloatToFourInts(value, array, startIndex) {\n    // This is adapted to JS from the basic approach at\n    // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n    // but writes to a Uint8Array instead of floats. Input values must be in\n    // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\n    var enc0 = 255 * value;\n    var enc1 = 255 * (enc0 % 1);\n    var enc2 = 255 * (enc1 % 1);\n    var enc3 = 255 * (enc2 % 1);\n    enc0 = enc0 & 255;\n    enc1 = enc1 & 255;\n    enc2 = enc2 & 255;\n    enc3 = Math.round(enc3) & 255;\n    array[startIndex] = enc0;\n    array[startIndex + 1] = enc1;\n    array[startIndex + 2] = enc2;\n    array[startIndex + 3] = enc3;\n    return array;\n  }\n  /*\n  Input geometry is a cylinder with r=1, height in y dimension from 0 to 1,\n  divided into a reasonable number of height segments.\n  */\n\n\n  var vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\n  var vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\n  var fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\n  var fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\"; // Debugging: separate color for each of the 6 sides:\n  // const fragmentColorTransform = `\n  // float sideNum = floor(vUV.x * 6.0);\n  // vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n  //   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n  //   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n  //   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n  //   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n  //   vec3(1.0, 0.0, 1.0);\n  // gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n  // `\n\n  function createBezierMeshMaterial(baseMaterial) {\n    return createDerivedMaterial(baseMaterial, {\n      uniforms: {\n        pointA: {\n          value: new three.Vector3()\n        },\n        controlA: {\n          value: new three.Vector3()\n        },\n        controlB: {\n          value: new three.Vector3()\n        },\n        pointB: {\n          value: new three.Vector3()\n        },\n        radius: {\n          value: 0.01\n        },\n        dashing: {\n          value: new three.Vector3()\n        } //on, off, offset\n\n      },\n      vertexDefs: vertexDefs,\n      vertexTransform: vertexTransform,\n      fragmentDefs: fragmentDefs,\n      fragmentMainIntro: fragmentMainIntro\n    });\n  }\n\n  var geometry = null;\n  var defaultBaseMaterial = new three.MeshStandardMaterial({\n    color: 0xffffff,\n    side: three.DoubleSide\n  });\n  /**\n   * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\n   * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\n   * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\n   * automatically.\n   *\n   * The cubiz bezier path is determined by its four `Vector3` properties:\n   * - `pointA`\n   * - `controlA`\n   * - `controlB`\n   * - `pointB`\n   *\n   * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\n   *\n   * You can also give the tube a dashed appearance with two properties:\n   *\n   * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\n   *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\n   *   used as input to the cubic bezier function, not its visible length.)\n   * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\n   *\n   * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\n   * thicker tubes.\n   *\n   * TODO: proper geometry bounding sphere and raycasting\n   * TODO: allow control of the geometry's segment counts\n   */\n\n  var BezierMesh = /*@__PURE__*/function (Mesh) {\n    function BezierMesh() {\n      Mesh.call(this, BezierMesh.getGeometry(), defaultBaseMaterial);\n      this.pointA = new three.Vector3();\n      this.controlA = new three.Vector3();\n      this.controlB = new three.Vector3();\n      this.pointB = new three.Vector3();\n      this.radius = 0.01;\n      this.dashArray = new three.Vector2();\n      this.dashOffset = 0; // TODO - disabling frustum culling until I figure out how to customize the\n      //  geometry's bounding sphere that gets used\n\n      this.frustumCulled = false;\n    }\n\n    if (Mesh) BezierMesh.__proto__ = Mesh;\n    BezierMesh.prototype = Object.create(Mesh && Mesh.prototype);\n    BezierMesh.prototype.constructor = BezierMesh;\n    var prototypeAccessors = {\n      material: {\n        configurable: true\n      },\n      customDepthMaterial: {\n        configurable: true\n      },\n      customDistanceMaterial: {\n        configurable: true\n      }\n    }; // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n\n    BezierMesh.getGeometry = function getGeometry() {\n      return geometry || (geometry = new three.CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0));\n    };\n\n    prototypeAccessors.material.get = function () {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || defaultBaseMaterial;\n\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial); // dispose the derived material when its base material is disposed:\n\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n\n      return derivedMaterial;\n    };\n\n    prototypeAccessors.material.set = function (baseMaterial) {\n      this._baseMaterial = baseMaterial;\n    }; // Create and update material for shadows upon request:\n\n\n    prototypeAccessors.customDepthMaterial.get = function () {\n      return this.material.getDepthMaterial();\n    };\n\n    prototypeAccessors.customDistanceMaterial.get = function () {\n      return this.material.getDistanceMaterial();\n    };\n\n    BezierMesh.prototype.onBeforeRender = function onBeforeRender(shaderInfo) {\n      var ref = this.material;\n      var uniforms = ref.uniforms;\n      var ref$1 = this;\n      var pointA = ref$1.pointA;\n      var controlA = ref$1.controlA;\n      var controlB = ref$1.controlB;\n      var pointB = ref$1.pointB;\n      var radius = ref$1.radius;\n      var dashArray = ref$1.dashArray;\n      var dashOffset = ref$1.dashOffset;\n      uniforms.pointA.value.copy(pointA);\n      uniforms.controlA.value.copy(controlA);\n      uniforms.controlB.value.copy(controlB);\n      uniforms.pointB.value.copy(pointB);\n      uniforms.radius.value = radius;\n      uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n    };\n\n    BezierMesh.prototype.raycast = function raycast(raycaster, intersects) {// TODO - just fail for now\n    };\n\n    Object.defineProperties(BezierMesh.prototype, prototypeAccessors);\n    return BezierMesh;\n  }(three.Mesh);\n\n  exports.BezierMesh = BezierMesh;\n  exports.ShaderFloatArray = ShaderFloatArray;\n  exports.createDerivedMaterial = createDerivedMaterial;\n  exports.expandShaderIncludes = expandShaderIncludes;\n  exports.getShaderUniformTypes = getShaderUniformTypes;\n  exports.getShadersForMaterial = getShadersForMaterial;\n  exports.voidMainRegExp = voidMainRegExp;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}