{"ast":null,"code":"import _slicedToArray from \"/Users/sebringrose/Projects/theEmpire/website/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/theEmpire/website/client/src/space.js\";\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\nimport * as THREE from 'three/src/Three'; // A THREE.js React renderer, see: https://github.com/drcmda/react-three-fiber\n\nimport { useFrame } from 'react-three-fiber'; // A React animation lib, see: https://github.com/react-spring/react-spring\n\nimport { useSpring, animated } from 'react-spring/three';\nimport { Text } from 'drei';\n\nfunction Planet({\n  active,\n  setActive,\n  stage,\n  setStage\n}) {\n  var planet = useRef();\n  var satellite = useRef();\n\n  var _useState = useState(0.2),\n      _useState2 = _slicedToArray(_useState, 2),\n      rotationSpeed = _useState2[0],\n      setRotationSpeed = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      theta = _useState4[0],\n      setTheta = _useState4[1];\n\n  useEffect(() => active ? setRotationSpeed(0.4) : setRotationSpeed(0.2), [active, setRotationSpeed]);\n  useFrame(() => {\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n    setTheta(theta => theta + THREE.Math.degToRad(rotationSpeed));\n    planet.current.rotation.set(planet.current.rotation._x, theta, planet.current.rotation._z);\n    satellite.current.position.set(1.6 * Math.sin(theta * 2), 1.6 * Math.cos(theta * 2), 0);\n    satellite.current.rotation.set(0, 0, -theta * 2);\n  });\n\n  var _useSpring = useSpring({\n    pos: planet.current ? active ? [planet.current.position._x, planet.current.position._y, planet.current.position._z + 2] : [planet.current.position._x, planet.current.position._y, planet.current.position._z] : [0, 0, 0],\n    scale: active ? [1.5, 1.5, 1.5] : [1.1, 1.1, 1.1],\n    config: {\n      mass: 100,\n      tension: 1000,\n      friction: 1000,\n      precision: 0.00001\n    }\n  }),\n      planetProps = Object.assign({}, _useSpring);\n\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: planet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(animated.mesh, Object.assign({\n    onClick: () => setStage(stage + 1),\n    onPointerOver: e => setActive(true),\n    onPointerOut: e => setActive(false)\n  }, planetProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: satellite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"icosahedronGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"blue\",\n    wireframe: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"icosahedronGeometry\", {\n    attach: \"geometry\",\n    args: [1, 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"red\",\n    wireframe: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })));\n}\n\nfunction Stars() {\n  var _useMemo = useMemo(() => {\n    var geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    var mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('white')\n    });\n    var coords = new Array(500).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geo, mat, vertices, coords];\n  }, []),\n      _useMemo2 = _slicedToArray(_useMemo, 4),\n      geo = _useMemo2[0],\n      mat = _useMemo2[1],\n      vertices = _useMemo2[2],\n      coords = _useMemo2[3];\n\n  return /*#__PURE__*/React.createElement(\"group\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, coords.map(([p1, p2, p3], i) => /*#__PURE__*/React.createElement(\"mesh\", {\n    key: i,\n    geometry: geo,\n    material: mat,\n    position: [p1, p2, p3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  })));\n}\n\nvar Space = ({\n  active,\n  setActive,\n  stage,\n  setStage\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ambientLight\", {\n  color: \"lightblue\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"pointLight\", {\n  color: \"white\",\n  intensity: 1,\n  position: [10, 10, 10],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Planet, {\n  active: active,\n  setActive: setActive,\n  stage: stage,\n  setStage: setStage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Stars, {\n  stage: stage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }\n}));\n\nexport default Space;","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/src/space.js"],"names":["React","useRef","useState","useEffect","useMemo","THREE","useFrame","useSpring","animated","Text","Planet","active","setActive","stage","setStage","planet","satellite","rotationSpeed","setRotationSpeed","theta","setTheta","Math","degToRad","current","rotation","set","_x","_z","position","sin","cos","pos","_y","scale","config","mass","tension","friction","precision","planetProps","e","Stars","geo","SphereBufferGeometry","mat","MeshBasicMaterial","color","Color","coords","Array","fill","map","i","random","vertices","p1","p2","p3","Space"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport * as THREE from 'three/src/Three'\n// A THREE.js React renderer, see: https://github.com/drcmda/react-three-fiber\nimport { useFrame } from 'react-three-fiber'\n// A React animation lib, see: https://github.com/react-spring/react-spring\nimport { useSpring, animated } from 'react-spring/three'\nimport { Text } from 'drei'\n\nfunction Planet({ active, setActive, stage, setStage }) {\n    const planet = useRef()\n    const satellite = useRef()\n    const [rotationSpeed, setRotationSpeed] = useState(0.2)   \n    const [theta, setTheta] = useState(0)\n    useEffect(() => active ? setRotationSpeed(0.4) : setRotationSpeed(0.2), [active, setRotationSpeed])\n\n    useFrame(() => {\n        // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n        setTheta(theta => theta + THREE.Math.degToRad(rotationSpeed))\n        planet.current.rotation.set(planet.current.rotation._x, theta, planet.current.rotation._z)\n        satellite.current.position.set(1.6 * Math.sin(theta*2), 1.6 * Math.cos(theta*2), 0)\n        satellite.current.rotation.set(0, 0, -theta*2)\n    })\n\n    const { ...planetProps } = useSpring({\n        pos: planet.current ? active ? [\n            planet.current.position._x,\n            planet.current.position._y, \n            planet.current.position._z + 2\n        ] : [\n            planet.current.position._x, \n            planet.current.position._y, \n            planet.current.position._z\n        ] : [0, 0, 0],\n        scale: active ? [1.5, 1.5, 1.5] : [1.1, 1.1, 1.1],\n        config: { mass: 100, tension: 1000, friction: 1000, precision: 0.00001 }\n    })\n\n    return (\n        <group ref={planet}>\n        <animated.mesh\n            onClick={() => setStage(stage + 1)}\n            onPointerOver={(e) => setActive(true)}\n            onPointerOut={(e) => setActive(false)}\n            {...planetProps}>\n            <mesh ref={satellite}>\n                <icosahedronGeometry attach=\"geometry\" args={[0.1, 2]} />\n                <meshStandardMaterial attach=\"material\" color=\"blue\" wireframe />\n            </mesh>\n            <icosahedronGeometry attach=\"geometry\" args={[1, 2]} />\n            <meshStandardMaterial attach=\"material\" color=\"red\" wireframe />\n        </animated.mesh>\n        </group>\n    )\n}\n\nfunction Stars() {\n    const [geo, mat, vertices, coords] = useMemo(() => {\n        const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n        const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('white') })\n        const coords = new Array(500).fill().map((i) => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n        return [geo, mat, vertices, coords]\n    }, [])\n\n    return (\n        <group>\n        {coords.map(([p1, p2, p3], i) => (\n            <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n        ))}\n        </group>\n    )\n}\n\nconst Space = ({ active, setActive, stage, setStage }) => (\n    <>\n        <ambientLight color=\"lightblue\" />\n        <pointLight color=\"white\" intensity={1} position={[10, 10, 10]} />\n        <Planet active={active} setActive={setActive} stage={stage} setStage={setStage} />\n        <Stars stage={stage} />\n    </>\n)\n\nexport default Space\n"]},"metadata":{},"sourceType":"module"}