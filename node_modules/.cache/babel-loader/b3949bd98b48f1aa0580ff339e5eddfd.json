{"ast":null,"code":"import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nclass Box3Helper extends LineSegments {\n  constructor(box, color = 0xffff00) {\n    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n    var geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    super(geometry, new LineBasicMaterial({\n      color: color,\n      toneMapped: false\n    }));\n    this.box = box;\n    this.type = 'Box3Helper';\n    this.geometry.computeBoundingSphere();\n  }\n\n  updateMatrixWorld(force) {\n    var box = this.box;\n    if (box.isEmpty()) return;\n    box.getCenter(this.position);\n    box.getSize(this.scale);\n    this.scale.multiplyScalar(0.5);\n    super.updateMatrixWorld(force);\n  }\n\n}\n\nexport { Box3Helper };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/helpers/Box3Helper.js"],"names":["LineSegments","LineBasicMaterial","BufferAttribute","Float32BufferAttribute","BufferGeometry","Box3Helper","constructor","box","color","indices","Uint16Array","positions","geometry","setIndex","setAttribute","toneMapped","type","computeBoundingSphere","updateMatrixWorld","force","isEmpty","getCenter","position","getSize","scale","multiplyScalar"],"mappings":"AAAA,SAASA,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,cAAT,QAA+B,2BAA/B;;AAEA,MAAMC,UAAN,SAAyBL,YAAzB,CAAsC;AAErCM,EAAAA,WAAW,CAAEC,GAAF,EAAOC,KAAK,GAAG,QAAf,EAA0B;AAEpC,QAAMC,OAAO,GAAG,IAAIC,WAAJ,CAAiB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkD,CAAlD,EAAqD,CAArD,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,CAA9D,EAAiE,CAAjE,EAAoE,CAApE,EAAuE,CAAvE,CAAjB,CAAhB;AAEA,QAAMC,SAAS,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAE,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAE,CAAxB,EAA2B,CAAE,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAE,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAAE,CAAtD,EAAyD,CAAE,CAA3D,EAA8D,CAA9D,EAAiE,CAAE,CAAnE,EAAsE,CAAE,CAAxE,EAA2E,CAAE,CAA7E,EAAgF,CAAE,CAAlF,EAAqF,CAArF,EAAwF,CAAE,CAA1F,EAA6F,CAAE,CAA/F,CAAlB;AAEA,QAAMC,QAAQ,GAAG,IAAIR,cAAJ,EAAjB;AAEAQ,IAAAA,QAAQ,CAACC,QAAT,CAAmB,IAAIX,eAAJ,CAAqBO,OAArB,EAA8B,CAA9B,CAAnB;AAEAG,IAAAA,QAAQ,CAACE,YAAT,CAAuB,UAAvB,EAAmC,IAAIX,sBAAJ,CAA4BQ,SAA5B,EAAuC,CAAvC,CAAnC;AAEA,UAAOC,QAAP,EAAiB,IAAIX,iBAAJ,CAAuB;AAAEO,MAAAA,KAAK,EAAEA,KAAT;AAAgBO,MAAAA,UAAU,EAAE;AAA5B,KAAvB,CAAjB;AAEA,SAAKR,GAAL,GAAWA,GAAX;AAEA,SAAKS,IAAL,GAAY,YAAZ;AAEA,SAAKJ,QAAL,CAAcK,qBAAd;AAEA;;AAEDC,EAAAA,iBAAiB,CAAEC,KAAF,EAAU;AAE1B,QAAMZ,GAAG,GAAG,KAAKA,GAAjB;AAEA,QAAKA,GAAG,CAACa,OAAJ,EAAL,EAAqB;AAErBb,IAAAA,GAAG,CAACc,SAAJ,CAAe,KAAKC,QAApB;AAEAf,IAAAA,GAAG,CAACgB,OAAJ,CAAa,KAAKC,KAAlB;AAEA,SAAKA,KAAL,CAAWC,cAAX,CAA2B,GAA3B;AAEA,UAAMP,iBAAN,CAAyBC,KAAzB;AAEA;;AAtCoC;;AA0CtC,SAASd,UAAT","sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nexport { Box3Helper };\n"]},"metadata":{},"sourceType":"module"}