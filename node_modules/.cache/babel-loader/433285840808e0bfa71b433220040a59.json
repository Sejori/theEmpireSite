{"ast":null,"code":"import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\nvar materialId = 0;\n\nfunction Material() {\n  Object.defineProperty(this, 'id', {\n    value: materialId++\n  });\n  this.uuid = MathUtils.generateUUID();\n  this.name = '';\n  this.type = 'Material';\n  this.fog = true;\n  this.blending = NormalBlending;\n  this.side = FrontSide;\n  this.flatShading = false;\n  this.vertexColors = false;\n  this.opacity = 1;\n  this.transparent = false;\n  this.blendSrc = SrcAlphaFactor;\n  this.blendDst = OneMinusSrcAlphaFactor;\n  this.blendEquation = AddEquation;\n  this.blendSrcAlpha = null;\n  this.blendDstAlpha = null;\n  this.blendEquationAlpha = null;\n  this.depthFunc = LessEqualDepth;\n  this.depthTest = true;\n  this.depthWrite = true;\n  this.stencilWriteMask = 0xff;\n  this.stencilFunc = AlwaysStencilFunc;\n  this.stencilRef = 0;\n  this.stencilFuncMask = 0xff;\n  this.stencilFail = KeepStencilOp;\n  this.stencilZFail = KeepStencilOp;\n  this.stencilZPass = KeepStencilOp;\n  this.stencilWrite = false;\n  this.clippingPlanes = null;\n  this.clipIntersection = false;\n  this.clipShadows = false;\n  this.shadowSide = null;\n  this.colorWrite = true;\n  this.precision = null; // override the renderer's default precision for this material\n\n  this.polygonOffset = false;\n  this.polygonOffsetFactor = 0;\n  this.polygonOffsetUnits = 0;\n  this.dithering = false;\n  this.alphaTest = 0;\n  this.premultipliedAlpha = false;\n  this.visible = true;\n  this.toneMapped = true;\n  this.userData = {};\n  this.version = 0;\n}\n\nMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n  constructor: Material,\n  isMaterial: true,\n  onBeforeCompile: function onBeforeCompile()\n  /* shaderobject, renderer */\n  {},\n  customProgramCacheKey: function customProgramCacheKey() {\n    return this.onBeforeCompile.toString();\n  },\n  setValues: function setValues(values) {\n    if (values === undefined) return;\n\n    for (var key in values) {\n      var newValue = values[key];\n\n      if (newValue === undefined) {\n        console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n        continue;\n      } // for backward compatability if shading is set in the constructor\n\n\n      if (key === 'shading') {\n        console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n        this.flatShading = newValue === FlatShading ? true : false;\n        continue;\n      }\n\n      var currentValue = this[key];\n\n      if (currentValue === undefined) {\n        console.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n        continue;\n      }\n\n      if (currentValue && currentValue.isColor) {\n        currentValue.set(newValue);\n      } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n        currentValue.copy(newValue);\n      } else {\n        this[key] = newValue;\n      }\n    }\n  },\n  toJSON: function toJSON(meta) {\n    var isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {}\n      };\n    }\n\n    var data = {\n      metadata: {\n        version: 4.5,\n        type: 'Material',\n        generator: 'Material.toJSON'\n      }\n    }; // standard Material serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n    if (this.color && this.color.isColor) data.color = this.color.getHex();\n    if (this.roughness !== undefined) data.roughness = this.roughness;\n    if (this.metalness !== undefined) data.metalness = this.metalness;\n    if (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n    if (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n    if (this.shininess !== undefined) data.shininess = this.shininess;\n    if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n    if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n    if (this.clearcoatMap && this.clearcoatMap.isTexture) {\n      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n    }\n\n    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n    }\n\n    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n    }\n\n    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n    if (this.lightMap && this.lightMap.isTexture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n    if (this.aoMap && this.aoMap.isTexture) {\n      data.aoMap = this.aoMap.toJSON(meta).uuid;\n      data.aoMapIntensity = this.aoMapIntensity;\n    }\n\n    if (this.bumpMap && this.bumpMap.isTexture) {\n      data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n      data.bumpScale = this.bumpScale;\n    }\n\n    if (this.normalMap && this.normalMap.isTexture) {\n      data.normalMap = this.normalMap.toJSON(meta).uuid;\n      data.normalMapType = this.normalMapType;\n      data.normalScale = this.normalScale.toArray();\n    }\n\n    if (this.displacementMap && this.displacementMap.isTexture) {\n      data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n      data.displacementScale = this.displacementScale;\n      data.displacementBias = this.displacementBias;\n    }\n\n    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n    if (this.envMap && this.envMap.isTexture) {\n      data.envMap = this.envMap.toJSON(meta).uuid;\n      data.reflectivity = this.reflectivity; // Scale behind envMap\n\n      data.refractionRatio = this.refractionRatio;\n      if (this.combine !== undefined) data.combine = this.combine;\n      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n    }\n\n    if (this.gradientMap && this.gradientMap.isTexture) {\n      data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n    }\n\n    if (this.size !== undefined) data.size = this.size;\n    if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n    if (this.blending !== NormalBlending) data.blending = this.blending;\n    if (this.flatShading === true) data.flatShading = this.flatShading;\n    if (this.side !== FrontSide) data.side = this.side;\n    if (this.vertexColors) data.vertexColors = true;\n    if (this.opacity < 1) data.opacity = this.opacity;\n    if (this.transparent === true) data.transparent = this.transparent;\n    data.depthFunc = this.depthFunc;\n    data.depthTest = this.depthTest;\n    data.depthWrite = this.depthWrite;\n    data.stencilWrite = this.stencilWrite;\n    data.stencilWriteMask = this.stencilWriteMask;\n    data.stencilFunc = this.stencilFunc;\n    data.stencilRef = this.stencilRef;\n    data.stencilFuncMask = this.stencilFuncMask;\n    data.stencilFail = this.stencilFail;\n    data.stencilZFail = this.stencilZFail;\n    data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n    if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n    if (this.polygonOffset === true) data.polygonOffset = true;\n    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n    if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n    if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n    if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n    if (this.scale !== undefined) data.scale = this.scale;\n    if (this.dithering === true) data.dithering = true;\n    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n    if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n    if (this.wireframe === true) data.wireframe = this.wireframe;\n    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n    if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n    if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n    if (this.morphTargets === true) data.morphTargets = true;\n    if (this.morphNormals === true) data.morphNormals = true;\n    if (this.skinning === true) data.skinning = true;\n    if (this.visible === false) data.visible = false;\n    if (this.toneMapped === false) data.toneMapped = false;\n    if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      var values = [];\n\n      for (var key in cache) {\n        var _data = cache[key];\n        delete _data.metadata;\n        values.push(_data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      var textures = extractFromCache(meta.textures);\n      var images = extractFromCache(meta.images);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n    }\n\n    return data;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  copy: function copy(source) {\n    this.name = source.name;\n    this.fog = source.fog;\n    this.blending = source.blending;\n    this.side = source.side;\n    this.flatShading = source.flatShading;\n    this.vertexColors = source.vertexColors;\n    this.opacity = source.opacity;\n    this.transparent = source.transparent;\n    this.blendSrc = source.blendSrc;\n    this.blendDst = source.blendDst;\n    this.blendEquation = source.blendEquation;\n    this.blendSrcAlpha = source.blendSrcAlpha;\n    this.blendDstAlpha = source.blendDstAlpha;\n    this.blendEquationAlpha = source.blendEquationAlpha;\n    this.depthFunc = source.depthFunc;\n    this.depthTest = source.depthTest;\n    this.depthWrite = source.depthWrite;\n    this.stencilWriteMask = source.stencilWriteMask;\n    this.stencilFunc = source.stencilFunc;\n    this.stencilRef = source.stencilRef;\n    this.stencilFuncMask = source.stencilFuncMask;\n    this.stencilFail = source.stencilFail;\n    this.stencilZFail = source.stencilZFail;\n    this.stencilZPass = source.stencilZPass;\n    this.stencilWrite = source.stencilWrite;\n    var srcPlanes = source.clippingPlanes;\n    var dstPlanes = null;\n\n    if (srcPlanes !== null) {\n      var n = srcPlanes.length;\n      dstPlanes = new Array(n);\n\n      for (var i = 0; i !== n; ++i) {\n        dstPlanes[i] = srcPlanes[i].clone();\n      }\n    }\n\n    this.clippingPlanes = dstPlanes;\n    this.clipIntersection = source.clipIntersection;\n    this.clipShadows = source.clipShadows;\n    this.shadowSide = source.shadowSide;\n    this.colorWrite = source.colorWrite;\n    this.precision = source.precision;\n    this.polygonOffset = source.polygonOffset;\n    this.polygonOffsetFactor = source.polygonOffsetFactor;\n    this.polygonOffsetUnits = source.polygonOffsetUnits;\n    this.dithering = source.dithering;\n    this.alphaTest = source.alphaTest;\n    this.premultipliedAlpha = source.premultipliedAlpha;\n    this.visible = source.visible;\n    this.toneMapped = source.toneMapped;\n    this.userData = JSON.parse(JSON.stringify(source.userData));\n    return this;\n  },\n  dispose: function dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n});\nObject.defineProperty(Material.prototype, 'needsUpdate', {\n  set: function set(value) {\n    if (value === true) this.version++;\n  }\n});\nexport { Material };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/materials/Material.js"],"names":["EventDispatcher","FrontSide","FlatShading","NormalBlending","LessEqualDepth","AddEquation","OneMinusSrcAlphaFactor","SrcAlphaFactor","AlwaysStencilFunc","KeepStencilOp","MathUtils","materialId","Material","Object","defineProperty","value","uuid","generateUUID","name","type","fog","blending","side","flatShading","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","visible","toneMapped","userData","version","prototype","assign","create","constructor","isMaterial","onBeforeCompile","customProgramCacheKey","toString","setValues","values","undefined","key","newValue","console","warn","currentValue","isColor","set","isVector3","copy","toJSON","meta","isRoot","textures","images","data","metadata","generator","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","isTexture","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","toArray","map","matcap","alphaMap","lightMap","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","reflectivity","refractionRatio","combine","envMapIntensity","gradientMap","size","sizeAttenuation","rotation","linewidth","dashSize","gapSize","scale","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","skinning","JSON","stringify","extractFromCache","cache","push","length","clone","source","srcPlanes","dstPlanes","n","Array","i","parse","dispose","dispatchEvent"],"mappings":"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","sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\n\nlet materialId = 0;\n\nfunction Material() {\n\n\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\tthis.uuid = MathUtils.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.fog = true;\n\n\tthis.blending = NormalBlending;\n\tthis.side = FrontSide;\n\tthis.flatShading = false;\n\tthis.vertexColors = false;\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blendSrc = SrcAlphaFactor;\n\tthis.blendDst = OneMinusSrcAlphaFactor;\n\tthis.blendEquation = AddEquation;\n\tthis.blendSrcAlpha = null;\n\tthis.blendDstAlpha = null;\n\tthis.blendEquationAlpha = null;\n\n\tthis.depthFunc = LessEqualDepth;\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.stencilWriteMask = 0xff;\n\tthis.stencilFunc = AlwaysStencilFunc;\n\tthis.stencilRef = 0;\n\tthis.stencilFuncMask = 0xff;\n\tthis.stencilFail = KeepStencilOp;\n\tthis.stencilZFail = KeepStencilOp;\n\tthis.stencilZPass = KeepStencilOp;\n\tthis.stencilWrite = false;\n\n\tthis.clippingPlanes = null;\n\tthis.clipIntersection = false;\n\tthis.clipShadows = false;\n\n\tthis.shadowSide = null;\n\n\tthis.colorWrite = true;\n\n\tthis.precision = null; // override the renderer's default precision for this material\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.dithering = false;\n\n\tthis.alphaTest = 0;\n\tthis.premultipliedAlpha = false;\n\n\tthis.visible = true;\n\n\tthis.toneMapped = true;\n\n\tthis.userData = {};\n\n\tthis.version = 0;\n\n}\n\nMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\tconstructor: Material,\n\n\tisMaterial: true,\n\n\tonBeforeCompile: function ( /* shaderobject, renderer */ ) {},\n\n\tcustomProgramCacheKey: function () {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t},\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen && this.sheen.isColor ) data.sheen = this.sheen.getHex();\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\t\t\tdata.refractionRatio = this.refractionRatio;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\t\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\n\t\t}\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\tif ( this.morphNormals === true ) data.morphNormals = true;\n\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n} );\n\nObject.defineProperty( Material.prototype, 'needsUpdate', {\n\n\tset: function ( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n} );\n\nexport { Material };\n"]},"metadata":{},"sourceType":"module"}