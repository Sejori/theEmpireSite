{"ast":null,"code":"import { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\nimport { WebGLCubeRenderTarget } from '../WebGLCubeRenderTarget.js';\n\nfunction WebGLCubeMaps(renderer) {\n  var cubemaps = new WeakMap();\n\n  function mapTextureMapping(texture, mapping) {\n    if (mapping === EquirectangularReflectionMapping) {\n      texture.mapping = CubeReflectionMapping;\n    } else if (mapping === EquirectangularRefractionMapping) {\n      texture.mapping = CubeRefractionMapping;\n    }\n\n    return texture;\n  }\n\n  function get(texture) {\n    if (texture && texture.isTexture) {\n      var mapping = texture.mapping;\n\n      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n        if (cubemaps.has(texture)) {\n          var cubemap = cubemaps.get(texture).texture;\n          return mapTextureMapping(cubemap, texture.mapping);\n        } else {\n          var image = texture.image;\n\n          if (image && image.height > 0) {\n            var currentRenderList = renderer.getRenderList();\n            var currentRenderTarget = renderer.getRenderTarget();\n            var currentRenderState = renderer.getRenderState();\n            var renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n            renderTarget.fromEquirectangularTexture(renderer, texture);\n            cubemaps.set(texture, renderTarget);\n            renderer.setRenderTarget(currentRenderTarget);\n            renderer.setRenderList(currentRenderList);\n            renderer.setRenderState(currentRenderState);\n            return mapTextureMapping(renderTarget.texture, texture.mapping);\n          } else {\n            // image not yet ready. try the conversion next frame\n            return null;\n          }\n        }\n      }\n    }\n\n    return texture;\n  }\n\n  function dispose() {\n    cubemaps = new WeakMap();\n  }\n\n  return {\n    get: get,\n    dispose: dispose\n  };\n}\n\nexport { WebGLCubeMaps };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webgl/WebGLCubeMaps.js"],"names":["CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","WebGLCubeRenderTarget","WebGLCubeMaps","renderer","cubemaps","WeakMap","mapTextureMapping","texture","mapping","get","isTexture","has","cubemap","image","height","currentRenderList","getRenderList","currentRenderTarget","getRenderTarget","currentRenderState","getRenderState","renderTarget","fromEquirectangularTexture","set","setRenderTarget","setRenderList","setRenderState","dispose"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,qBAAhC,EAAuDC,gCAAvD,EAAyFC,gCAAzF,QAAiI,oBAAjI;AACA,SAASC,qBAAT,QAAsC,6BAAtC;;AAEA,SAASC,aAAT,CAAwBC,QAAxB,EAAmC;AAElC,MAAIC,QAAQ,GAAG,IAAIC,OAAJ,EAAf;;AAEA,WAASC,iBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA+C;AAE9C,QAAKA,OAAO,KAAKT,gCAAjB,EAAoD;AAEnDQ,MAAAA,OAAO,CAACC,OAAR,GAAkBX,qBAAlB;AAEA,KAJD,MAIO,IAAKW,OAAO,KAAKR,gCAAjB,EAAoD;AAE1DO,MAAAA,OAAO,CAACC,OAAR,GAAkBV,qBAAlB;AAEA;;AAED,WAAOS,OAAP;AAEA;;AAED,WAASE,GAAT,CAAcF,OAAd,EAAwB;AAEvB,QAAKA,OAAO,IAAIA,OAAO,CAACG,SAAxB,EAAoC;AAEnC,UAAMF,OAAO,GAAGD,OAAO,CAACC,OAAxB;;AAEA,UAAKA,OAAO,KAAKT,gCAAZ,IAAgDS,OAAO,KAAKR,gCAAjE,EAAoG;AAEnG,YAAKI,QAAQ,CAACO,GAAT,CAAcJ,OAAd,CAAL,EAA+B;AAE9B,cAAMK,OAAO,GAAGR,QAAQ,CAACK,GAAT,CAAcF,OAAd,EAAwBA,OAAxC;AACA,iBAAOD,iBAAiB,CAAEM,OAAF,EAAWL,OAAO,CAACC,OAAnB,CAAxB;AAEA,SALD,MAKO;AAEN,cAAMK,KAAK,GAAGN,OAAO,CAACM,KAAtB;;AAEA,cAAKA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAA7B,EAAiC;AAEhC,gBAAMC,iBAAiB,GAAGZ,QAAQ,CAACa,aAAT,EAA1B;AACA,gBAAMC,mBAAmB,GAAGd,QAAQ,CAACe,eAAT,EAA5B;AACA,gBAAMC,kBAAkB,GAAGhB,QAAQ,CAACiB,cAAT,EAA3B;AAEA,gBAAMC,YAAY,GAAG,IAAIpB,qBAAJ,CAA2BY,KAAK,CAACC,MAAN,GAAe,CAA1C,CAArB;AACAO,YAAAA,YAAY,CAACC,0BAAb,CAAyCnB,QAAzC,EAAmDI,OAAnD;AACAH,YAAAA,QAAQ,CAACmB,GAAT,CAAchB,OAAd,EAAuBc,YAAvB;AAEAlB,YAAAA,QAAQ,CAACqB,eAAT,CAA0BP,mBAA1B;AACAd,YAAAA,QAAQ,CAACsB,aAAT,CAAwBV,iBAAxB;AACAZ,YAAAA,QAAQ,CAACuB,cAAT,CAAyBP,kBAAzB;AAEA,mBAAOb,iBAAiB,CAAEe,YAAY,CAACd,OAAf,EAAwBA,OAAO,CAACC,OAAhC,CAAxB;AAEA,WAhBD,MAgBO;AAEN;AAEA,mBAAO,IAAP;AAEA;AAED;AAED;AAED;;AAED,WAAOD,OAAP;AAEA;;AAED,WAASoB,OAAT,GAAmB;AAElBvB,IAAAA,QAAQ,GAAG,IAAIC,OAAJ,EAAX;AAEA;;AAED,SAAO;AACNI,IAAAA,GAAG,EAAEA,GADC;AAENkB,IAAAA,OAAO,EAAEA;AAFH,GAAP;AAKA;;AAED,SAASzB,aAAT","sourcesContent":["import { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from '../../constants.js';\nimport { WebGLCubeRenderTarget } from '../WebGLCubeRenderTarget.js';\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst currentRenderList = renderer.getRenderList();\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\tconst currentRenderState = renderer.getRenderState();\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\t\t\t\t\t\trenderer.setRenderList( currentRenderList );\n\t\t\t\t\t\trenderer.setRenderState( currentRenderState );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nexport { WebGLCubeMaps };\n"]},"metadata":{},"sourceType":"module"}