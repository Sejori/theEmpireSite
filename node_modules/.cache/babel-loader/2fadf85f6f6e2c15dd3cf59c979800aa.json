{"ast":null,"code":"import { AnimationClip } from '../animation/AnimationClip.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\n\nfunction AnimationLoader(manager) {\n  Loader.call(this, manager);\n}\n\nAnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AnimationLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(json) {\n    var animations = [];\n\n    for (var i = 0; i < json.length; i++) {\n      var clip = AnimationClip.parse(json[i]);\n      animations.push(clip);\n    }\n\n    return animations;\n  }\n});\nexport { AnimationLoader };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/loaders/AnimationLoader.js"],"names":["AnimationClip","FileLoader","Loader","AnimationLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","json","animations","i","length","clip","push"],"mappings":"AAAA,SAASA,aAAT,QAA8B,+BAA9B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,SAASC,eAAT,CAA0BC,OAA1B,EAAoC;AAEnCF,EAAAA,MAAM,CAACG,IAAP,CAAa,IAAb,EAAmBD,OAAnB;AAEA;;AAEDD,eAAe,CAACG,SAAhB,GAA4BC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAeP,MAAM,CAACI,SAAtB,CAAf,EAAkD;AAE7EI,EAAAA,WAAW,EAAEP,eAFgE;AAI7EQ,EAAAA,IAAI,EAAE,cAAWC,GAAX,EAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,OAApC,EAA8C;AAEnD,QAAMC,KAAK,GAAG,IAAd;AAEA,QAAMC,MAAM,GAAG,IAAIhB,UAAJ,CAAgBe,KAAK,CAACZ,OAAtB,CAAf;AACAa,IAAAA,MAAM,CAACC,OAAP,CAAgBF,KAAK,CAACG,IAAtB;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAyBJ,KAAK,CAACK,aAA/B;AACAJ,IAAAA,MAAM,CAACK,kBAAP,CAA2BN,KAAK,CAACO,eAAjC;AACAN,IAAAA,MAAM,CAACN,IAAP,CAAaC,GAAb,EAAkB,UAAWY,IAAX,EAAkB;AAEnC,UAAI;AAEHX,QAAAA,MAAM,CAAEG,KAAK,CAACS,KAAN,CAAaC,IAAI,CAACD,KAAL,CAAYD,IAAZ,CAAb,CAAF,CAAN;AAEA,OAJD,CAIE,OAAQG,CAAR,EAAY;AAEb,YAAKZ,OAAL,EAAe;AAEdA,UAAAA,OAAO,CAAEY,CAAF,CAAP;AAEA,SAJD,MAIO;AAENC,UAAAA,OAAO,CAACC,KAAR,CAAeF,CAAf;AAEA;;AAEDX,QAAAA,KAAK,CAACZ,OAAN,CAAc0B,SAAd,CAAyBlB,GAAzB;AAEA;AAED,KAtBD,EAsBGE,UAtBH,EAsBeC,OAtBf;AAwBA,GApC4E;AAsC7EU,EAAAA,KAAK,EAAE,eAAWM,IAAX,EAAkB;AAExB,QAAMC,UAAU,GAAG,EAAnB;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGF,IAAI,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAyC;AAExC,UAAME,IAAI,GAAGnC,aAAa,CAACyB,KAAd,CAAqBM,IAAI,CAAEE,CAAF,CAAzB,CAAb;AAEAD,MAAAA,UAAU,CAACI,IAAX,CAAiBD,IAAjB;AAEA;;AAED,WAAOH,UAAP;AAEA;AApD4E,CAAlD,CAA5B;AAyDA,SAAS7B,eAAT","sourcesContent":["import { AnimationClip } from '../animation/AnimationClip.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\n\nfunction AnimationLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: AnimationLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n} );\n\n\nexport { AnimationLoader };\n"]},"metadata":{},"sourceType":"module"}