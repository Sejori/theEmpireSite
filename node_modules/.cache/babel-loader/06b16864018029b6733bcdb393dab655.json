{"ast":null,"code":"import { SphericalHarmonics3 } from '../math/SphericalHarmonics3.js';\nimport { Light } from './Light.js';\n\nfunction LightProbe(sh, intensity) {\n  Light.call(this, undefined, intensity);\n  this.type = 'LightProbe';\n  this.sh = sh !== undefined ? sh : new SphericalHarmonics3();\n}\n\nLightProbe.prototype = Object.assign(Object.create(Light.prototype), {\n  constructor: LightProbe,\n  isLightProbe: true,\n  copy: function copy(source) {\n    Light.prototype.copy.call(this, source);\n    this.sh.copy(source.sh);\n    return this;\n  },\n  fromJSON: function fromJSON(json) {\n    this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n    this.sh.fromArray(json.sh);\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    var data = Light.prototype.toJSON.call(this, meta);\n    data.object.sh = this.sh.toArray();\n    return data;\n  }\n});\nexport { LightProbe };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/lights/LightProbe.js"],"names":["SphericalHarmonics3","Light","LightProbe","sh","intensity","call","undefined","type","prototype","Object","assign","create","constructor","isLightProbe","copy","source","fromJSON","json","fromArray","toJSON","meta","data","object","toArray"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,gCAApC;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,UAAT,CAAqBC,EAArB,EAAyBC,SAAzB,EAAqC;AAEpCH,EAAAA,KAAK,CAACI,IAAN,CAAY,IAAZ,EAAkBC,SAAlB,EAA6BF,SAA7B;AAEA,OAAKG,IAAL,GAAY,YAAZ;AAEA,OAAKJ,EAAL,GAAYA,EAAE,KAAKG,SAAT,GAAuBH,EAAvB,GAA4B,IAAIH,mBAAJ,EAAtC;AAEA;;AAEDE,UAAU,CAACM,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAeV,KAAK,CAACO,SAArB,CAAf,EAAiD;AAEvEI,EAAAA,WAAW,EAAEV,UAF0D;AAIvEW,EAAAA,YAAY,EAAE,IAJyD;AAMvEC,EAAAA,IAAI,EAAE,cAAWC,MAAX,EAAoB;AAEzBd,IAAAA,KAAK,CAACO,SAAN,CAAgBM,IAAhB,CAAqBT,IAArB,CAA2B,IAA3B,EAAiCU,MAAjC;AAEA,SAAKZ,EAAL,CAAQW,IAAR,CAAcC,MAAM,CAACZ,EAArB;AAEA,WAAO,IAAP;AAEA,GAdsE;AAgBvEa,EAAAA,QAAQ,EAAE,kBAAWC,IAAX,EAAkB;AAE3B,SAAKb,SAAL,GAAiBa,IAAI,CAACb,SAAtB,CAF2B,CAEM;;AACjC,SAAKD,EAAL,CAAQe,SAAR,CAAmBD,IAAI,CAACd,EAAxB;AAEA,WAAO,IAAP;AAEA,GAvBsE;AAyBvEgB,EAAAA,MAAM,EAAE,gBAAWC,IAAX,EAAkB;AAEzB,QAAMC,IAAI,GAAGpB,KAAK,CAACO,SAAN,CAAgBW,MAAhB,CAAuBd,IAAvB,CAA6B,IAA7B,EAAmCe,IAAnC,CAAb;AAEAC,IAAAA,IAAI,CAACC,MAAL,CAAYnB,EAAZ,GAAiB,KAAKA,EAAL,CAAQoB,OAAR,EAAjB;AAEA,WAAOF,IAAP;AAEA;AAjCsE,CAAjD,CAAvB;AAqCA,SAASnB,UAAT","sourcesContent":["import { SphericalHarmonics3 } from '../math/SphericalHarmonics3.js';\nimport { Light } from './Light.js';\n\nfunction LightProbe( sh, intensity ) {\n\n\tLight.call( this, undefined, intensity );\n\n\tthis.type = 'LightProbe';\n\n\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\n\n}\n\nLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\tconstructor: LightProbe,\n\n\tisLightProbe: true,\n\n\tcopy: function ( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t},\n\n\tfromJSON: function ( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tconst data = Light.prototype.toJSON.call( this, meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n} );\n\nexport { LightProbe };\n"]},"metadata":{},"sourceType":"module"}