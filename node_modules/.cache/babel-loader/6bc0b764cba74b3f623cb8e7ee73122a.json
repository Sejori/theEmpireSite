{"ast":null,"code":"import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nvar _geometry;\n\nvar _intersectPoint = new Vector3();\n\nvar _worldScale = new Vector3();\n\nvar _mvPosition = new Vector3();\n\nvar _alignedPosition = new Vector2();\n\nvar _rotatedPosition = new Vector2();\n\nvar _viewWorldMatrix = new Matrix4();\n\nvar _vA = new Vector3();\n\nvar _vB = new Vector3();\n\nvar _vC = new Vector3();\n\nvar _uvA = new Vector2();\n\nvar _uvB = new Vector2();\n\nvar _uvC = new Vector2();\n\nfunction Sprite(material) {\n  Object3D.call(this);\n  this.type = 'Sprite';\n\n  if (_geometry === undefined) {\n    _geometry = new BufferGeometry();\n    var float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n    var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n    _geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n    _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n    _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  }\n\n  this.geometry = _geometry;\n  this.material = material !== undefined ? material : new SpriteMaterial();\n  this.center = new Vector2(0.5, 0.5);\n}\n\nSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: Sprite,\n  isSprite: true,\n  raycast: function raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n    }\n\n    _worldScale.setFromMatrixScale(this.matrixWorld);\n\n    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n      _worldScale.multiplyScalar(-_mvPosition.z);\n    }\n\n    var rotation = this.material.rotation;\n    var sin, cos;\n\n    if (rotation !== 0) {\n      cos = Math.cos(rotation);\n      sin = Math.sin(rotation);\n    }\n\n    var center = this.center;\n    transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n    transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n    _uvA.set(0, 0);\n\n    _uvB.set(1, 0);\n\n    _uvC.set(1, 1); // check first triangle\n\n\n    var intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\n\n    if (intersect === null) {\n      // check second triangle\n      transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n      _uvB.set(0, 1);\n\n      intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\n\n      if (intersect === null) {\n        return;\n      }\n    }\n\n    var distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n    if (distance < raycaster.near || distance > raycaster.far) return;\n    intersects.push({\n      distance: distance,\n      point: _intersectPoint.clone(),\n      uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\n      face: null,\n      object: this\n    });\n  },\n  copy: function copy(source) {\n    Object3D.prototype.copy.call(this, source);\n    if (source.center !== undefined) this.center.copy(source.center);\n    this.material = source.material;\n    return this;\n  }\n});\n\nfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n  // compute position in camera space\n  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n  if (sin !== undefined) {\n    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n  } else {\n    _rotatedPosition.copy(_alignedPosition);\n  }\n\n  vertexPosition.copy(mvPosition);\n  vertexPosition.x += _rotatedPosition.x;\n  vertexPosition.y += _rotatedPosition.y; // transform to world space\n\n  vertexPosition.applyMatrix4(_viewWorldMatrix);\n}\n\nexport { Sprite };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/objects/Sprite.js"],"names":["Vector2","Vector3","Matrix4","Triangle","Object3D","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","SpriteMaterial","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","material","call","type","undefined","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","geometry","center","prototype","Object","assign","create","constructor","isSprite","raycast","raycaster","intersects","camera","console","error","setFromMatrixScale","matrixWorld","copy","modelViewMatrix","multiplyMatrices","matrixWorldInverse","setFromMatrixPosition","isPerspectiveCamera","sizeAttenuation","multiplyScalar","z","rotation","sin","cos","Math","transformVertex","set","intersect","ray","intersectTriangle","distance","origin","distanceTo","near","far","push","point","clone","uv","getUV","face","object","source","vertexPosition","mvPosition","scale","subVectors","addScalar","multiply","x","y","applyMatrix4"],"mappings":"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","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { InterleavedBuffer } from '../core/InterleavedBuffer.js';\nimport { InterleavedBufferAttribute } from '../core/InterleavedBufferAttribute.js';\nimport { SpriteMaterial } from '../materials/SpriteMaterial.js';\n\nlet _geometry;\n\nconst _intersectPoint = new Vector3();\nconst _worldScale = new Vector3();\nconst _mvPosition = new Vector3();\n\nconst _alignedPosition = new Vector2();\nconst _rotatedPosition = new Vector2();\nconst _viewWorldMatrix = new Matrix4();\n\nconst _vA = new Vector3();\nconst _vB = new Vector3();\nconst _vC = new Vector3();\n\nconst _uvA = new Vector2();\nconst _uvB = new Vector2();\nconst _uvC = new Vector2();\n\nfunction Sprite( material ) {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Sprite';\n\n\tif ( _geometry === undefined ) {\n\n\t\t_geometry = new BufferGeometry();\n\n\t\tconst float32Array = new Float32Array( [\n\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t] );\n\n\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t}\n\n\tthis.geometry = _geometry;\n\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\tthis.center = new Vector2( 0.5, 0.5 );\n\n}\n\nSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Sprite,\n\n\tisSprite: true,\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t},\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n} );\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nexport { Sprite };\n"]},"metadata":{},"sourceType":"module"}