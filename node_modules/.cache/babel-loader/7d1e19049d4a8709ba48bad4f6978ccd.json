{"ast":null,"code":"import { Object3D } from '../core/Object3D.js';\n\nclass Audio extends Object3D {\n  constructor(listener) {\n    super();\n    this.type = 'Audio';\n    this.listener = listener;\n    this.context = listener.context;\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n    this.autoplay = false;\n    this.buffer = null;\n    this.detune = 0;\n    this.loop = false;\n    this.loopStart = 0;\n    this.loopEnd = 0;\n    this.offset = 0;\n    this.duration = undefined;\n    this.playbackRate = 1;\n    this.isPlaying = false;\n    this.hasPlaybackControl = true;\n    this.source = null;\n    this.sourceType = 'empty';\n    this._startedAt = 0;\n    this._progress = 0;\n    this._connected = false;\n    this.filters = [];\n  }\n\n  getOutput() {\n    return this.gain;\n  }\n\n  setNodeSource(audioNode) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'audioNode';\n    this.source = audioNode;\n    this.connect();\n    return this;\n  }\n\n  setMediaElementSource(mediaElement) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaNode';\n    this.source = this.context.createMediaElementSource(mediaElement);\n    this.connect();\n    return this;\n  }\n\n  setMediaStreamSource(mediaStream) {\n    this.hasPlaybackControl = false;\n    this.sourceType = 'mediaStreamNode';\n    this.source = this.context.createMediaStreamSource(mediaStream);\n    this.connect();\n    return this;\n  }\n\n  setBuffer(audioBuffer) {\n    this.buffer = audioBuffer;\n    this.sourceType = 'buffer';\n    if (this.autoplay) this.play();\n    return this;\n  }\n\n  play(delay) {\n    if (delay === undefined) delay = 0;\n\n    if (this.isPlaying === true) {\n      console.warn('THREE.Audio: Audio is already playing.');\n      return;\n    }\n\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this._startedAt = this.context.currentTime + delay;\n    var source = this.context.createBufferSource();\n    source.buffer = this.buffer;\n    source.loop = this.loop;\n    source.loopStart = this.loopStart;\n    source.loopEnd = this.loopEnd;\n    source.onended = this.onEnded.bind(this);\n    source.start(this._startedAt, this._progress + this.offset, this.duration);\n    this.isPlaying = true;\n    this.source = source;\n    this.setDetune(this.detune);\n    this.setPlaybackRate(this.playbackRate);\n    return this.connect();\n  }\n\n  pause() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    if (this.isPlaying === true) {\n      // update current progress\n      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n      if (this.loop === true) {\n        // ensure _progress does not exceed duration with looped audios\n        this._progress = this._progress % (this.duration || this.buffer.duration);\n      }\n\n      this.source.stop();\n      this.source.onended = null;\n      this.isPlaying = false;\n    }\n\n    return this;\n  }\n\n  stop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this._progress = 0;\n    this.source.stop();\n    this.source.onended = null;\n    this.isPlaying = false;\n    return this;\n  }\n\n  connect() {\n    if (this.filters.length > 0) {\n      this.source.connect(this.filters[0]);\n\n      for (var i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].connect(this.filters[i]);\n      }\n\n      this.filters[this.filters.length - 1].connect(this.getOutput());\n    } else {\n      this.source.connect(this.getOutput());\n    }\n\n    this._connected = true;\n    return this;\n  }\n\n  disconnect() {\n    if (this.filters.length > 0) {\n      this.source.disconnect(this.filters[0]);\n\n      for (var i = 1, l = this.filters.length; i < l; i++) {\n        this.filters[i - 1].disconnect(this.filters[i]);\n      }\n\n      this.filters[this.filters.length - 1].disconnect(this.getOutput());\n    } else {\n      this.source.disconnect(this.getOutput());\n    }\n\n    this._connected = false;\n    return this;\n  }\n\n  getFilters() {\n    return this.filters;\n  }\n\n  setFilters(value) {\n    if (!value) value = [];\n\n    if (this._connected === true) {\n      this.disconnect();\n      this.filters = value;\n      this.connect();\n    } else {\n      this.filters = value;\n    }\n\n    return this;\n  }\n\n  setDetune(value) {\n    this.detune = value;\n    if (this.source.detune === undefined) return; // only set detune when available\n\n    if (this.isPlaying === true) {\n      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n    }\n\n    return this;\n  }\n\n  getDetune() {\n    return this.detune;\n  }\n\n  getFilter() {\n    return this.getFilters()[0];\n  }\n\n  setFilter(filter) {\n    return this.setFilters(filter ? [filter] : []);\n  }\n\n  setPlaybackRate(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.playbackRate = value;\n\n    if (this.isPlaying === true) {\n      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n    }\n\n    return this;\n  }\n\n  getPlaybackRate() {\n    return this.playbackRate;\n  }\n\n  onEnded() {\n    this.isPlaying = false;\n  }\n\n  getLoop() {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return false;\n    }\n\n    return this.loop;\n  }\n\n  setLoop(value) {\n    if (this.hasPlaybackControl === false) {\n      console.warn('THREE.Audio: this Audio has no playback control.');\n      return;\n    }\n\n    this.loop = value;\n\n    if (this.isPlaying === true) {\n      this.source.loop = this.loop;\n    }\n\n    return this;\n  }\n\n  setLoopStart(value) {\n    this.loopStart = value;\n    return this;\n  }\n\n  setLoopEnd(value) {\n    this.loopEnd = value;\n    return this;\n  }\n\n  getVolume() {\n    return this.gain.gain.value;\n  }\n\n  setVolume(value) {\n    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n    return this;\n  }\n\n}\n\nexport { Audio };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/audio/Audio.js"],"names":["Object3D","Audio","constructor","listener","type","context","gain","createGain","connect","getInput","autoplay","buffer","detune","loop","loopStart","loopEnd","offset","duration","undefined","playbackRate","isPlaying","hasPlaybackControl","source","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","audioBuffer","play","delay","console","warn","currentTime","createBufferSource","onended","onEnded","bind","start","setDetune","setPlaybackRate","pause","Math","max","stop","length","i","l","disconnect","getFilters","setFilters","value","setTargetAtTime","getDetune","getFilter","setFilter","filter","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume"],"mappings":"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","sourcesContent":["import { Object3D } from '../core/Object3D.js';\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay ) {\n\n\t\tif ( delay === undefined ) delay = 0;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value;\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { Audio };\n"]},"metadata":{},"sourceType":"module"}