{"ast":null,"code":"import { RGBAFormat, HalfFloatType, FloatType, UnsignedByteType, LinearEncoding, NoToneMapping } from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Frustum } from '../math/Frustum.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { WebGLAnimation } from './webgl/WebGLAnimation.js';\nimport { WebGLAttributes } from './webgl/WebGLAttributes.js';\nimport { WebGLBackground } from './webgl/WebGLBackground.js';\nimport { WebGLBindingStates } from './webgl/WebGLBindingStates.js';\nimport { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer.js';\nimport { WebGLCapabilities } from './webgl/WebGLCapabilities.js';\nimport { WebGLClipping } from './webgl/WebGLClipping.js';\nimport { WebGLCubeMaps } from './webgl/WebGLCubeMaps.js';\nimport { WebGLExtensions } from './webgl/WebGLExtensions.js';\nimport { WebGLGeometries } from './webgl/WebGLGeometries.js';\nimport { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer.js';\nimport { WebGLInfo } from './webgl/WebGLInfo.js';\nimport { WebGLMorphtargets } from './webgl/WebGLMorphtargets.js';\nimport { WebGLObjects } from './webgl/WebGLObjects.js';\nimport { WebGLPrograms } from './webgl/WebGLPrograms.js';\nimport { WebGLProperties } from './webgl/WebGLProperties.js';\nimport { WebGLRenderLists } from './webgl/WebGLRenderLists.js';\nimport { WebGLRenderStates } from './webgl/WebGLRenderStates.js';\nimport { WebGLShadowMap } from './webgl/WebGLShadowMap.js';\nimport { WebGLState } from './webgl/WebGLState.js';\nimport { WebGLTextures } from './webgl/WebGLTextures.js';\nimport { WebGLUniforms } from './webgl/WebGLUniforms.js';\nimport { WebGLUtils } from './webgl/WebGLUtils.js';\nimport { WebXRManager } from './webxr/WebXRManager.js';\nimport { WebGLMaterials } from \"./webgl/WebGLMaterials.js\";\n\nfunction WebGLRenderer(parameters) {\n  parameters = parameters || {};\n\n  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),\n      _context = parameters.context !== undefined ? parameters.context : null,\n      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n      _depth = parameters.depth !== undefined ? parameters.depth : true,\n      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n      _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n      _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n      _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n      _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n  var currentRenderList = null;\n  var currentRenderState = null; // public properties\n\n  this.domElement = _canvas; // Debug configuration container\n\n  this.debug = {\n    /**\n     * Enables error checking and reporting when shader programs are being compiled\n     * @type {boolean}\n     */\n    checkShaderErrors: true\n  }; // clearing\n\n  this.autoClear = true;\n  this.autoClearColor = true;\n  this.autoClearDepth = true;\n  this.autoClearStencil = true; // scene graph\n\n  this.sortObjects = true; // user-defined clipping\n\n  this.clippingPlanes = [];\n  this.localClippingEnabled = false; // physically based shading\n\n  this.gammaFactor = 2.0; // for backwards compatibility\n\n  this.outputEncoding = LinearEncoding; // physical lights\n\n  this.physicallyCorrectLights = false; // tone mapping\n\n  this.toneMapping = NoToneMapping;\n  this.toneMappingExposure = 1.0; // morphs\n\n  this.maxMorphTargets = 8;\n  this.maxMorphNormals = 4; // internal properties\n\n  var _this = this;\n\n  var _isContextLost = false; // internal state cache\n\n  var _framebuffer = null;\n  var _currentActiveCubeFace = 0;\n  var _currentActiveMipmapLevel = 0;\n  var _currentRenderTarget = null;\n  var _currentFramebuffer = null;\n\n  var _currentMaterialId = -1;\n\n  var _currentCamera = null;\n  var _currentArrayCamera = null;\n\n  var _currentViewport = new Vector4();\n\n  var _currentScissor = new Vector4();\n\n  var _currentScissorTest = null; //\n\n  var _width = _canvas.width;\n  var _height = _canvas.height;\n  var _pixelRatio = 1;\n  var _opaqueSort = null;\n  var _transparentSort = null;\n\n  var _viewport = new Vector4(0, 0, _width, _height);\n\n  var _scissor = new Vector4(0, 0, _width, _height);\n\n  var _scissorTest = false; // frustum\n\n  var _frustum = new Frustum(); // clipping\n\n\n  var _clippingEnabled = false;\n  var _localClippingEnabled = false; // camera matrices cache\n\n  var _projScreenMatrix = new Matrix4();\n\n  var _vector3 = new Vector3();\n\n  var _emptyScene = {\n    background: null,\n    fog: null,\n    environment: null,\n    overrideMaterial: null,\n    isScene: true\n  };\n\n  function getTargetPixelRatio() {\n    return _currentRenderTarget === null ? _pixelRatio : 1;\n  } // initialize\n\n\n  var _gl = _context;\n\n  function getContext(contextNames, contextAttributes) {\n    for (var i = 0; i < contextNames.length; i++) {\n      var contextName = contextNames[i];\n\n      var context = _canvas.getContext(contextName, contextAttributes);\n\n      if (context !== null) return context;\n    }\n\n    return null;\n  }\n\n  try {\n    var contextAttributes = {\n      alpha: _alpha,\n      depth: _depth,\n      stencil: _stencil,\n      antialias: _antialias,\n      premultipliedAlpha: _premultipliedAlpha,\n      preserveDrawingBuffer: _preserveDrawingBuffer,\n      powerPreference: _powerPreference,\n      failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n    }; // event listeners must be registered before WebGL context is created, see #12753\n\n    _canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n    _canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n    if (_gl === null) {\n      var contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n      if (_this.isWebGL1Renderer === true) {\n        contextNames.shift();\n      }\n\n      _gl = getContext(contextNames, contextAttributes);\n\n      if (_gl === null) {\n        if (getContext(contextNames)) {\n          throw new Error('Error creating WebGL context with your selected attributes.');\n        } else {\n          throw new Error('Error creating WebGL context.');\n        }\n      }\n    } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n    if (_gl.getShaderPrecisionFormat === undefined) {\n      _gl.getShaderPrecisionFormat = function () {\n        return {\n          'rangeMin': 1,\n          'rangeMax': 1,\n          'precision': 1\n        };\n      };\n    }\n  } catch (error) {\n    console.error('THREE.WebGLRenderer: ' + error.message);\n    throw error;\n  }\n\n  var extensions, capabilities, state, info;\n  var properties, textures, cubemaps, attributes, geometries, objects;\n  var programCache, materials, renderLists, renderStates, clipping;\n  var background, morphtargets, bufferRenderer, indexedBufferRenderer;\n  var utils, bindingStates;\n\n  function initGLContext() {\n    extensions = new WebGLExtensions(_gl);\n    capabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\n    if (capabilities.isWebGL2 === false) {\n      extensions.get('WEBGL_depth_texture');\n      extensions.get('OES_texture_float');\n      extensions.get('OES_texture_half_float');\n      extensions.get('OES_texture_half_float_linear');\n      extensions.get('OES_standard_derivatives');\n      extensions.get('OES_element_index_uint');\n      extensions.get('OES_vertex_array_object');\n      extensions.get('ANGLE_instanced_arrays');\n    }\n\n    extensions.get('OES_texture_float_linear');\n    utils = new WebGLUtils(_gl, extensions, capabilities);\n    state = new WebGLState(_gl, extensions, capabilities);\n    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n    info = new WebGLInfo(_gl);\n    properties = new WebGLProperties();\n    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n    cubemaps = new WebGLCubeMaps(_this);\n    attributes = new WebGLAttributes(_gl, capabilities);\n    bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n    geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n    objects = new WebGLObjects(_gl, geometries, attributes, info);\n    morphtargets = new WebGLMorphtargets(_gl);\n    clipping = new WebGLClipping(properties);\n    programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n    materials = new WebGLMaterials(properties);\n    renderLists = new WebGLRenderLists(properties);\n    renderStates = new WebGLRenderStates();\n    background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n    info.programs = programCache.programs;\n    _this.capabilities = capabilities;\n    _this.extensions = extensions;\n    _this.properties = properties;\n    _this.renderLists = renderLists;\n    _this.state = state;\n    _this.info = info;\n  }\n\n  initGLContext(); // xr\n\n  var xr = new WebXRManager(_this, _gl);\n  this.xr = xr; // shadow map\n\n  var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n  this.shadowMap = shadowMap; // API\n\n  this.getContext = function () {\n    return _gl;\n  };\n\n  this.getContextAttributes = function () {\n    return _gl.getContextAttributes();\n  };\n\n  this.forceContextLoss = function () {\n    var extension = extensions.get('WEBGL_lose_context');\n    if (extension) extension.loseContext();\n  };\n\n  this.forceContextRestore = function () {\n    var extension = extensions.get('WEBGL_lose_context');\n    if (extension) extension.restoreContext();\n  };\n\n  this.getPixelRatio = function () {\n    return _pixelRatio;\n  };\n\n  this.setPixelRatio = function (value) {\n    if (value === undefined) return;\n    _pixelRatio = value;\n    this.setSize(_width, _height, false);\n  };\n\n  this.getSize = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n      target = new Vector2();\n    }\n\n    return target.set(_width, _height);\n  };\n\n  this.setSize = function (width, height, updateStyle) {\n    if (xr.isPresenting) {\n      console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n      return;\n    }\n\n    _width = width;\n    _height = height;\n    _canvas.width = Math.floor(width * _pixelRatio);\n    _canvas.height = Math.floor(height * _pixelRatio);\n\n    if (updateStyle !== false) {\n      _canvas.style.width = width + 'px';\n      _canvas.style.height = height + 'px';\n    }\n\n    this.setViewport(0, 0, width, height);\n  };\n\n  this.getDrawingBufferSize = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n      target = new Vector2();\n    }\n\n    return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n  };\n\n  this.setDrawingBufferSize = function (width, height, pixelRatio) {\n    _width = width;\n    _height = height;\n    _pixelRatio = pixelRatio;\n    _canvas.width = Math.floor(width * pixelRatio);\n    _canvas.height = Math.floor(height * pixelRatio);\n    this.setViewport(0, 0, width, height);\n  };\n\n  this.getCurrentViewport = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n      target = new Vector4();\n    }\n\n    return target.copy(_currentViewport);\n  };\n\n  this.getViewport = function (target) {\n    return target.copy(_viewport);\n  };\n\n  this.setViewport = function (x, y, width, height) {\n    if (x.isVector4) {\n      _viewport.set(x.x, x.y, x.z, x.w);\n    } else {\n      _viewport.set(x, y, width, height);\n    }\n\n    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n  };\n\n  this.getScissor = function (target) {\n    return target.copy(_scissor);\n  };\n\n  this.setScissor = function (x, y, width, height) {\n    if (x.isVector4) {\n      _scissor.set(x.x, x.y, x.z, x.w);\n    } else {\n      _scissor.set(x, y, width, height);\n    }\n\n    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n  };\n\n  this.getScissorTest = function () {\n    return _scissorTest;\n  };\n\n  this.setScissorTest = function (boolean) {\n    state.setScissorTest(_scissorTest = boolean);\n  };\n\n  this.setOpaqueSort = function (method) {\n    _opaqueSort = method;\n  };\n\n  this.setTransparentSort = function (method) {\n    _transparentSort = method;\n  }; // Clearing\n\n\n  this.getClearColor = function () {\n    return background.getClearColor();\n  };\n\n  this.setClearColor = function () {\n    background.setClearColor.apply(background, arguments);\n  };\n\n  this.getClearAlpha = function () {\n    return background.getClearAlpha();\n  };\n\n  this.setClearAlpha = function () {\n    background.setClearAlpha.apply(background, arguments);\n  };\n\n  this.clear = function (color, depth, stencil) {\n    var bits = 0;\n    if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n    if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n    if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    _gl.clear(bits);\n  };\n\n  this.clearColor = function () {\n    this.clear(true, false, false);\n  };\n\n  this.clearDepth = function () {\n    this.clear(false, true, false);\n  };\n\n  this.clearStencil = function () {\n    this.clear(false, false, true);\n  }; //\n\n\n  this.dispose = function () {\n    _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n    _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n    renderLists.dispose();\n    renderStates.dispose();\n    properties.dispose();\n    cubemaps.dispose();\n    objects.dispose();\n    bindingStates.dispose();\n    xr.dispose();\n    animation.stop();\n  }; // Events\n\n\n  function onContextLost(event) {\n    event.preventDefault();\n    console.log('THREE.WebGLRenderer: Context Lost.');\n    _isContextLost = true;\n  }\n\n  function onContextRestore()\n  /* event */\n  {\n    console.log('THREE.WebGLRenderer: Context Restored.');\n    _isContextLost = false;\n    initGLContext();\n  }\n\n  function onMaterialDispose(event) {\n    var material = event.target;\n    material.removeEventListener('dispose', onMaterialDispose);\n    deallocateMaterial(material);\n  } // Buffer deallocation\n\n\n  function deallocateMaterial(material) {\n    releaseMaterialProgramReference(material);\n    properties.remove(material);\n  }\n\n  function releaseMaterialProgramReference(material) {\n    var programInfo = properties.get(material).program;\n\n    if (programInfo !== undefined) {\n      programCache.releaseProgram(programInfo);\n    }\n  } // Buffer rendering\n\n\n  function renderObjectImmediate(object, program) {\n    object.render(function (object) {\n      _this.renderBufferImmediate(object, program);\n    });\n  }\n\n  this.renderBufferImmediate = function (object, program) {\n    bindingStates.initAttributes();\n    var buffers = properties.get(object);\n    if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n    if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n    if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n    if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n    var programAttributes = program.getAttributes();\n\n    if (object.hasPositions) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n      bindingStates.enableAttribute(programAttributes.position);\n\n      _gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasNormals) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n      bindingStates.enableAttribute(programAttributes.normal);\n\n      _gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasUvs) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n      bindingStates.enableAttribute(programAttributes.uv);\n\n      _gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasColors) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n      bindingStates.enableAttribute(programAttributes.color);\n\n      _gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    bindingStates.disableUnusedAttributes();\n\n    _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n    object.count = 0;\n  };\n\n  this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n    if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n    var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n    var program = setProgram(camera, scene, material, object);\n    state.setMaterial(material, frontFaceCW); //\n\n    var index = geometry.index;\n    var position = geometry.attributes.position; //\n\n    if (index === null) {\n      if (position === undefined || position.count === 0) return;\n    } else if (index.count === 0) {\n      return;\n    } //\n\n\n    var rangeFactor = 1;\n\n    if (material.wireframe === true) {\n      index = geometries.getWireframeAttribute(geometry);\n      rangeFactor = 2;\n    }\n\n    if (material.morphTargets || material.morphNormals) {\n      morphtargets.update(object, geometry, material, program);\n    }\n\n    bindingStates.setup(object, material, program, geometry, index);\n    var attribute;\n    var renderer = bufferRenderer;\n\n    if (index !== null) {\n      attribute = attributes.get(index);\n      renderer = indexedBufferRenderer;\n      renderer.setIndex(attribute);\n    } //\n\n\n    var dataCount = index !== null ? index.count : position.count;\n    var rangeStart = geometry.drawRange.start * rangeFactor;\n    var rangeCount = geometry.drawRange.count * rangeFactor;\n    var groupStart = group !== null ? group.start * rangeFactor : 0;\n    var groupCount = group !== null ? group.count * rangeFactor : Infinity;\n    var drawStart = Math.max(rangeStart, groupStart);\n    var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n    var drawCount = Math.max(0, drawEnd - drawStart + 1);\n    if (drawCount === 0) return; //\n\n    if (object.isMesh) {\n      if (material.wireframe === true) {\n        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n        renderer.setMode(_gl.LINES);\n      } else {\n        renderer.setMode(_gl.TRIANGLES);\n      }\n    } else if (object.isLine) {\n      var lineWidth = material.linewidth;\n      if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n      state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n      if (object.isLineSegments) {\n        renderer.setMode(_gl.LINES);\n      } else if (object.isLineLoop) {\n        renderer.setMode(_gl.LINE_LOOP);\n      } else {\n        renderer.setMode(_gl.LINE_STRIP);\n      }\n    } else if (object.isPoints) {\n      renderer.setMode(_gl.POINTS);\n    } else if (object.isSprite) {\n      renderer.setMode(_gl.TRIANGLES);\n    }\n\n    if (object.isInstancedMesh) {\n      renderer.renderInstances(drawStart, drawCount, object.count);\n    } else if (geometry.isInstancedBufferGeometry) {\n      var instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n      renderer.renderInstances(drawStart, drawCount, instanceCount);\n    } else {\n      renderer.render(drawStart, drawCount);\n    }\n  }; // Compile\n\n\n  this.compile = function (scene, camera) {\n    currentRenderState = renderStates.get(scene, camera);\n    currentRenderState.init();\n    scene.traverse(function (object) {\n      if (object.isLight) {\n        currentRenderState.pushLight(object);\n\n        if (object.castShadow) {\n          currentRenderState.pushShadow(object);\n        }\n      }\n    });\n    currentRenderState.setupLights(camera);\n    var compiled = new WeakMap();\n    scene.traverse(function (object) {\n      var material = object.material;\n\n      if (material) {\n        if (Array.isArray(material)) {\n          for (var i = 0; i < material.length; i++) {\n            var material2 = material[i];\n\n            if (compiled.has(material2) === false) {\n              initMaterial(material2, scene, object);\n              compiled.set(material2);\n            }\n          }\n        } else if (compiled.has(material) === false) {\n          initMaterial(material, scene, object);\n          compiled.set(material);\n        }\n      }\n    });\n  }; // Animation Loop\n\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time) {\n    if (xr.isPresenting) return;\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n  if (typeof window !== 'undefined') animation.setContext(window);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n    xr.setAnimationLoop(callback);\n    callback === null ? animation.stop() : animation.start();\n  }; // Rendering\n\n\n  this.render = function (scene, camera) {\n    var renderTarget, forceClear;\n\n    if (arguments[2] !== undefined) {\n      console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n      renderTarget = arguments[2];\n    }\n\n    if (arguments[3] !== undefined) {\n      console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n      forceClear = arguments[3];\n    }\n\n    if (camera !== undefined && camera.isCamera !== true) {\n      console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n      return;\n    }\n\n    if (_isContextLost === true) return; // reset caching for this frame\n\n    bindingStates.resetDefaultState();\n    _currentMaterialId = -1;\n    _currentCamera = null; // update scene graph\n\n    if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    if (xr.enabled === true && xr.isPresenting === true) {\n      camera = xr.getCamera(camera);\n    } //\n\n\n    if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n    currentRenderState = renderStates.get(scene, camera);\n    currentRenderState.init();\n\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n    _frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n    _localClippingEnabled = this.localClippingEnabled;\n    _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n    currentRenderList = renderLists.get(scene, camera);\n    currentRenderList.init();\n    projectObject(scene, camera, 0, _this.sortObjects);\n    currentRenderList.finish();\n\n    if (_this.sortObjects === true) {\n      currentRenderList.sort(_opaqueSort, _transparentSort);\n    } //\n\n\n    if (_clippingEnabled === true) clipping.beginShadows();\n    var shadowsArray = currentRenderState.state.shadowsArray;\n    shadowMap.render(shadowsArray, scene, camera);\n    currentRenderState.setupLights(camera);\n    if (_clippingEnabled === true) clipping.endShadows(); //\n\n    if (this.info.autoReset === true) this.info.reset();\n\n    if (renderTarget !== undefined) {\n      this.setRenderTarget(renderTarget);\n    } //\n\n\n    background.render(currentRenderList, scene, camera, forceClear); // render scene\n\n    var opaqueObjects = currentRenderList.opaque;\n    var transparentObjects = currentRenderList.transparent;\n    if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n    if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n    if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n    if (_currentRenderTarget !== null) {\n      // Generate mipmap if we're using any kind of mipmap filtering\n      textures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n      textures.updateMultisampleRenderTarget(_currentRenderTarget);\n    } // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n    state.buffers.depth.setTest(true);\n    state.buffers.depth.setMask(true);\n    state.buffers.color.setMask(true);\n    state.setPolygonOffset(false); // _gl.finish();\n\n    currentRenderList = null;\n    currentRenderState = null;\n  };\n\n  function projectObject(object, camera, groupOrder, sortObjects) {\n    if (object.visible === false) return;\n    var visible = object.layers.test(camera.layers);\n\n    if (visible) {\n      if (object.isGroup) {\n        groupOrder = object.renderOrder;\n      } else if (object.isLOD) {\n        if (object.autoUpdate === true) object.update(camera);\n      } else if (object.isLight) {\n        currentRenderState.pushLight(object);\n\n        if (object.castShadow) {\n          currentRenderState.pushShadow(object);\n        }\n      } else if (object.isSprite) {\n        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n          if (sortObjects) {\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n\n          var geometry = objects.update(object);\n          var material = object.material;\n\n          if (material.visible) {\n            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n          }\n        }\n      } else if (object.isImmediateRenderObject) {\n        if (sortObjects) {\n          _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n        }\n\n        currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.isSkinnedMesh) {\n          // update skeleton only once in a frame\n          if (object.skeleton.frame !== info.render.frame) {\n            object.skeleton.update();\n            object.skeleton.frame = info.render.frame;\n          }\n        }\n\n        if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n          if (sortObjects) {\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n\n          var _geometry = objects.update(object);\n\n          var _material = object.material;\n\n          if (Array.isArray(_material)) {\n            var groups = _geometry.groups;\n\n            for (var i = 0, l = groups.length; i < l; i++) {\n              var group = groups[i];\n              var groupMaterial = _material[group.materialIndex];\n\n              if (groupMaterial && groupMaterial.visible) {\n                currentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n              }\n            }\n          } else if (_material.visible) {\n            currentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n          }\n        }\n      }\n    }\n\n    var children = object.children;\n\n    for (var _i = 0, _l = children.length; _i < _l; _i++) {\n      projectObject(children[_i], camera, groupOrder, sortObjects);\n    }\n  }\n\n  function renderObjects(renderList, scene, camera) {\n    var overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n    for (var i = 0, l = renderList.length; i < l; i++) {\n      var renderItem = renderList[i];\n      var object = renderItem.object;\n      var geometry = renderItem.geometry;\n      var material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n      var group = renderItem.group;\n\n      if (camera.isArrayCamera) {\n        _currentArrayCamera = camera;\n        var cameras = camera.cameras;\n\n        for (var j = 0, jl = cameras.length; j < jl; j++) {\n          var camera2 = cameras[j];\n\n          if (object.layers.test(camera2.layers)) {\n            state.viewport(_currentViewport.copy(camera2.viewport));\n            currentRenderState.setupLights(camera2);\n            renderObject(object, scene, camera2, geometry, material, group);\n          }\n        }\n      } else {\n        _currentArrayCamera = null;\n        renderObject(object, scene, camera, geometry, material, group);\n      }\n    }\n  }\n\n  function renderObject(object, scene, camera, geometry, material, group) {\n    object.onBeforeRender(_this, scene, camera, geometry, material, group);\n    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n    if (object.isImmediateRenderObject) {\n      var program = setProgram(camera, scene, material, object);\n      state.setMaterial(material);\n      bindingStates.reset();\n      renderObjectImmediate(object, program);\n    } else {\n      _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n    }\n\n    object.onAfterRender(_this, scene, camera, geometry, material, group);\n    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n  }\n\n  function initMaterial(material, scene, object) {\n    if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n    var materialProperties = properties.get(material);\n    var lights = currentRenderState.state.lights;\n    var shadowsArray = currentRenderState.state.shadowsArray;\n    var lightsStateVersion = lights.state.version;\n    var parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n    var programCacheKey = programCache.getProgramCacheKey(parameters);\n    var program = materialProperties.program;\n    var programChange = true;\n\n    if (program === undefined) {\n      // new material\n      material.addEventListener('dispose', onMaterialDispose);\n    } else if (program.cacheKey !== programCacheKey) {\n      // changed glsl or parameters\n      releaseMaterialProgramReference(material);\n    } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n      programChange = false;\n    } else if (parameters.shaderID !== undefined) {\n      // same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect\n      var environment = material.isMeshStandardMaterial ? scene.environment : null;\n      materialProperties.envMap = cubemaps.get(material.envMap || environment);\n      return;\n    } else {\n      // only rebuild uniform list\n      programChange = false;\n    }\n\n    if (programChange) {\n      parameters.uniforms = programCache.getUniforms(material);\n      material.onBeforeCompile(parameters, _this);\n      program = programCache.acquireProgram(parameters, programCacheKey);\n      materialProperties.program = program;\n      materialProperties.uniforms = parameters.uniforms;\n      materialProperties.outputEncoding = parameters.outputEncoding;\n    }\n\n    var uniforms = materialProperties.uniforms;\n\n    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n      materialProperties.numClippingPlanes = clipping.numPlanes;\n      materialProperties.numIntersection = clipping.numIntersection;\n      uniforms.clippingPlanes = clipping.uniform;\n    }\n\n    materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n    materialProperties.fog = scene.fog;\n    materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment); // store the light setup it was created for\n\n    materialProperties.needsLights = materialNeedsLights(material);\n    materialProperties.lightsStateVersion = lightsStateVersion;\n\n    if (materialProperties.needsLights) {\n      // wire up the material to this renderer's lighting state\n      uniforms.ambientLightColor.value = lights.state.ambient;\n      uniforms.lightProbe.value = lights.state.probe;\n      uniforms.directionalLights.value = lights.state.directional;\n      uniforms.directionalLightShadows.value = lights.state.directionalShadow;\n      uniforms.spotLights.value = lights.state.spot;\n      uniforms.spotLightShadows.value = lights.state.spotShadow;\n      uniforms.rectAreaLights.value = lights.state.rectArea;\n      uniforms.ltc_1.value = lights.state.rectAreaLTC1;\n      uniforms.ltc_2.value = lights.state.rectAreaLTC2;\n      uniforms.pointLights.value = lights.state.point;\n      uniforms.pointLightShadows.value = lights.state.pointShadow;\n      uniforms.hemisphereLights.value = lights.state.hemi;\n      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n      uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n      uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n    }\n\n    var progUniforms = materialProperties.program.getUniforms();\n    var uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n    materialProperties.uniformsList = uniformsList;\n  }\n\n  function setProgram(camera, scene, material, object) {\n    if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n    textures.resetTextureUnits();\n    var fog = scene.fog;\n    var environment = material.isMeshStandardMaterial ? scene.environment : null;\n    var encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n    var envMap = cubemaps.get(material.envMap || environment);\n    var materialProperties = properties.get(material);\n    var lights = currentRenderState.state.lights;\n\n    if (_clippingEnabled === true) {\n      if (_localClippingEnabled === true || camera !== _currentCamera) {\n        var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n        // object instead of the material, once it becomes feasible\n        // (#8465, #8379)\n\n        clipping.setState(material, camera, useCache);\n      }\n    }\n\n    if (material.version === materialProperties.__version) {\n      if (material.fog && materialProperties.fog !== fog) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.environment !== environment) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.outputEncoding !== encoding) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.envMap !== envMap) {\n        initMaterial(material, scene, object);\n      }\n    } else {\n      initMaterial(material, scene, object);\n      materialProperties.__version = material.version;\n    }\n\n    var refreshProgram = false;\n    var refreshMaterial = false;\n    var refreshLights = false;\n    var program = materialProperties.program,\n        p_uniforms = program.getUniforms(),\n        m_uniforms = materialProperties.uniforms;\n\n    if (state.useProgram(program.program)) {\n      refreshProgram = true;\n      refreshMaterial = true;\n      refreshLights = true;\n    }\n\n    if (material.id !== _currentMaterialId) {\n      _currentMaterialId = material.id;\n      refreshMaterial = true;\n    }\n\n    if (refreshProgram || _currentCamera !== camera) {\n      p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n      if (capabilities.logarithmicDepthBuffer) {\n        p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n      }\n\n      if (_currentCamera !== camera) {\n        _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n        // now, in case this material supports lights - or later, when\n        // the next material that does gets activated:\n\n        refreshMaterial = true; // set to true on material change\n\n        refreshLights = true; // remains set until update done\n      } // load material specific uniforms\n      // (shader material also gets them for the sake of genericity)\n\n\n      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n        var uCamPos = p_uniforms.map.cameraPosition;\n\n        if (uCamPos !== undefined) {\n          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n        }\n      }\n\n      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n        p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n      }\n\n      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n      }\n    } // skinning uniforms must be set even if material didn't change\n    // auto-setting of texture unit for bone texture must go before other textures\n    // otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n    if (material.skinning) {\n      p_uniforms.setOptional(_gl, object, 'bindMatrix');\n      p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n      var skeleton = object.skeleton;\n\n      if (skeleton) {\n        var bones = skeleton.bones;\n\n        if (capabilities.floatVertexTextures) {\n          if (skeleton.boneTexture === undefined) {\n            // layout (1 matrix = 4 pixels)\n            //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n            //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n            //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n            //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n            //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n            var size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n            size = MathUtils.ceilPowerOfTwo(size);\n            size = Math.max(size, 4);\n            var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n            boneMatrices.set(skeleton.boneMatrices); // copy current values\n\n            var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n            skeleton.boneMatrices = boneMatrices;\n            skeleton.boneTexture = boneTexture;\n            skeleton.boneTextureSize = size;\n          }\n\n          p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n          p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n        } else {\n          p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n        }\n      }\n    }\n\n    if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n      materialProperties.receiveShadow = object.receiveShadow;\n      p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n    }\n\n    if (refreshMaterial) {\n      p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n      if (materialProperties.needsLights) {\n        // the current material requires lighting info\n        // note: all lighting uniforms are always set correctly\n        // they simply reference the renderer's state for their\n        // values\n        //\n        // use the current material's .needsUpdate flags to set\n        // the GL state when required\n        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n      } // refresh uniforms common to several materials\n\n\n      if (fog && material.fog) {\n        materials.refreshFogUniforms(m_uniforms, fog);\n      }\n\n      materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n    }\n\n    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n      material.uniformsNeedUpdate = false;\n    }\n\n    if (material.isSpriteMaterial) {\n      p_uniforms.setValue(_gl, 'center', object.center);\n    } // common matrices\n\n\n    p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n    p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n    p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n    return program;\n  } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n  function markUniformsLightsNeedsUpdate(uniforms, value) {\n    uniforms.ambientLightColor.needsUpdate = value;\n    uniforms.lightProbe.needsUpdate = value;\n    uniforms.directionalLights.needsUpdate = value;\n    uniforms.directionalLightShadows.needsUpdate = value;\n    uniforms.pointLights.needsUpdate = value;\n    uniforms.pointLightShadows.needsUpdate = value;\n    uniforms.spotLights.needsUpdate = value;\n    uniforms.spotLightShadows.needsUpdate = value;\n    uniforms.rectAreaLights.needsUpdate = value;\n    uniforms.hemisphereLights.needsUpdate = value;\n  }\n\n  function materialNeedsLights(material) {\n    return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n  } //\n\n\n  this.setFramebuffer = function (value) {\n    if (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(_gl.FRAMEBUFFER, value);\n    _framebuffer = value;\n  };\n\n  this.getActiveCubeFace = function () {\n    return _currentActiveCubeFace;\n  };\n\n  this.getActiveMipmapLevel = function () {\n    return _currentActiveMipmapLevel;\n  };\n\n  this.getRenderList = function () {\n    return currentRenderList;\n  };\n\n  this.setRenderList = function (renderList) {\n    currentRenderList = renderList;\n  };\n\n  this.getRenderState = function () {\n    return currentRenderState;\n  };\n\n  this.setRenderState = function (renderState) {\n    currentRenderState = renderState;\n  };\n\n  this.getRenderTarget = function () {\n    return _currentRenderTarget;\n  };\n\n  this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\n    _currentRenderTarget = renderTarget;\n    _currentActiveCubeFace = activeCubeFace;\n    _currentActiveMipmapLevel = activeMipmapLevel;\n\n    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n      textures.setupRenderTarget(renderTarget);\n    }\n\n    var framebuffer = _framebuffer;\n    var isCube = false;\n\n    if (renderTarget) {\n      var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n      if (renderTarget.isWebGLCubeRenderTarget) {\n        framebuffer = __webglFramebuffer[activeCubeFace];\n        isCube = true;\n      } else if (renderTarget.isWebGLMultisampleRenderTarget) {\n        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n      } else {\n        framebuffer = __webglFramebuffer;\n      }\n\n      _currentViewport.copy(renderTarget.viewport);\n\n      _currentScissor.copy(renderTarget.scissor);\n\n      _currentScissorTest = renderTarget.scissorTest;\n    } else {\n      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n      _currentScissorTest = _scissorTest;\n    }\n\n    if (_currentFramebuffer !== framebuffer) {\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      _currentFramebuffer = framebuffer;\n    }\n\n    state.viewport(_currentViewport);\n    state.scissor(_currentScissor);\n    state.setScissorTest(_currentScissorTest);\n\n    if (isCube) {\n      var textureProperties = properties.get(renderTarget.texture);\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n    }\n  };\n\n  this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n      console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n      return;\n    }\n\n    var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n    if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n      framebuffer = framebuffer[activeCubeFaceIndex];\n    }\n\n    if (framebuffer) {\n      var restore = false;\n\n      if (framebuffer !== _currentFramebuffer) {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n        restore = true;\n      }\n\n      try {\n        var texture = renderTarget.texture;\n        var textureFormat = texture.format;\n        var textureType = texture.type;\n\n        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n          return;\n        }\n\n        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n        !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n        !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n          return;\n        }\n\n        if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n          // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n          if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n          }\n        } else {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n        }\n      } finally {\n        if (restore) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n        }\n      }\n    }\n  };\n\n  this.copyFramebufferToTexture = function (position, texture, level) {\n    if (level === undefined) level = 0;\n    var levelScale = Math.pow(2, -level);\n    var width = Math.floor(texture.image.width * levelScale);\n    var height = Math.floor(texture.image.height * levelScale);\n    var glFormat = utils.convert(texture.format);\n    textures.setTexture2D(texture, 0);\n\n    _gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n    state.unbindTexture();\n  };\n\n  this.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n    if (level === undefined) level = 0;\n    var width = srcTexture.image.width;\n    var height = srcTexture.image.height;\n    var glFormat = utils.convert(dstTexture.format);\n    var glType = utils.convert(dstTexture.type);\n    textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n    // parameters, make sure they are correct for the dstTexture\n\n    _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\n\n    _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\n\n    _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\n\n    if (srcTexture.isDataTexture) {\n      _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n    } else {\n      if (srcTexture.isCompressedTexture) {\n        _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n      } else {\n        _gl.texSubImage2D(_gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image);\n      }\n    } // Generate mipmaps only when copying level 0\n\n\n    if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\n    state.unbindTexture();\n  };\n\n  this.initTexture = function (texture) {\n    textures.setTexture2D(texture, 0);\n    state.unbindTexture();\n  };\n\n  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n      detail: this\n    })); // eslint-disable-line no-undef\n\n  }\n}\n\nexport { WebGLRenderer };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/WebGLRenderer.js"],"names":["RGBAFormat","HalfFloatType","FloatType","UnsignedByteType","LinearEncoding","NoToneMapping","MathUtils","DataTexture","Frustum","Matrix4","Vector2","Vector3","Vector4","WebGLAnimation","WebGLAttributes","WebGLBackground","WebGLBindingStates","WebGLBufferRenderer","WebGLCapabilities","WebGLClipping","WebGLCubeMaps","WebGLExtensions","WebGLGeometries","WebGLIndexedBufferRenderer","WebGLInfo","WebGLMorphtargets","WebGLObjects","WebGLPrograms","WebGLProperties","WebGLRenderLists","WebGLRenderStates","WebGLShadowMap","WebGLState","WebGLTextures","WebGLUniforms","WebGLUtils","WebXRManager","WebGLMaterials","WebGLRenderer","parameters","_canvas","canvas","undefined","document","createElementNS","_context","context","_alpha","alpha","_depth","depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","debug","checkShaderErrors","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","clippingPlanes","localClippingEnabled","gammaFactor","outputEncoding","physicallyCorrectLights","toneMapping","toneMappingExposure","maxMorphTargets","maxMorphNormals","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","width","_height","height","_pixelRatio","_opaqueSort","_transparentSort","_viewport","_scissor","_scissorTest","_frustum","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","background","fog","environment","overrideMaterial","isScene","getTargetPixelRatio","_gl","getContext","contextNames","contextAttributes","i","length","contextName","addEventListener","onContextLost","onContextRestore","isWebGL1Renderer","shift","Error","getShaderPrecisionFormat","error","console","message","extensions","capabilities","state","info","properties","textures","cubemaps","attributes","geometries","objects","programCache","materials","renderLists","renderStates","clipping","morphtargets","bufferRenderer","indexedBufferRenderer","utils","bindingStates","initGLContext","isWebGL2","get","scissor","copy","multiplyScalar","floor","viewport","programs","xr","shadowMap","maxTextureSize","getContextAttributes","forceContextLoss","extension","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","value","setSize","getSize","target","warn","set","updateStyle","isPresenting","Math","style","setViewport","getDrawingBufferSize","setDrawingBufferSize","pixelRatio","getCurrentViewport","getViewport","x","y","isVector4","z","w","getScissor","setScissor","getScissorTest","setScissorTest","boolean","setOpaqueSort","method","setTransparentSort","getClearColor","setClearColor","apply","arguments","getClearAlpha","setClearAlpha","clear","color","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearColor","clearDepth","clearStencil","dispose","removeEventListener","animation","stop","event","preventDefault","log","onMaterialDispose","material","deallocateMaterial","releaseMaterialProgramReference","remove","programInfo","program","releaseProgram","renderObjectImmediate","object","render","renderBufferImmediate","initAttributes","buffers","hasPositions","position","createBuffer","hasNormals","normal","hasUvs","uv","hasColors","programAttributes","getAttributes","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","FLOAT","normalArray","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","count","renderBufferDirect","camera","scene","geometry","group","frontFaceCW","isMesh","matrixWorld","determinant","setProgram","setMaterial","index","rangeFactor","wireframe","getWireframeAttribute","morphTargets","morphNormals","update","setup","attribute","renderer","setIndex","dataCount","rangeStart","drawRange","start","rangeCount","groupStart","groupCount","Infinity","drawStart","max","drawEnd","min","drawCount","setLineWidth","wireframeLinewidth","setMode","LINES","isLine","lineWidth","linewidth","isLineSegments","isLineLoop","LINE_LOOP","LINE_STRIP","isPoints","POINTS","isSprite","isInstancedMesh","renderInstances","isInstancedBufferGeometry","instanceCount","_maxInstanceCount","compile","init","traverse","isLight","pushLight","castShadow","pushShadow","setupLights","compiled","WeakMap","Array","isArray","material2","has","initMaterial","onAnimationFrameCallback","onAnimationFrame","time","setAnimationLoop","window","setContext","callback","renderTarget","forceClear","isCamera","resetDefaultState","autoUpdate","updateMatrixWorld","parent","enabled","getCamera","onBeforeRender","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","projectObject","finish","sort","beginShadows","shadowsArray","endShadows","autoReset","reset","setRenderTarget","opaqueObjects","opaque","transparentObjects","transparent","renderObjects","onAfterRender","updateRenderTargetMipmap","updateMultisampleRenderTarget","setTest","setMask","setPolygonOffset","groupOrder","visible","layers","test","isGroup","renderOrder","isLOD","frustumCulled","intersectsSprite","setFromMatrixPosition","applyMatrix4","push","isImmediateRenderObject","isSkinnedMesh","skeleton","frame","intersectsObject","groups","l","groupMaterial","materialIndex","children","renderList","renderItem","isArrayCamera","cameras","j","jl","camera2","renderObject","modelViewMatrix","normalMatrix","getNormalMatrix","materialProperties","lights","lightsStateVersion","version","getParameters","programCacheKey","getProgramCacheKey","programChange","cacheKey","shaderID","isMeshStandardMaterial","envMap","uniforms","getUniforms","onBeforeCompile","acquireProgram","isShaderMaterial","isRawShaderMaterial","numClippingPlanes","numPlanes","numIntersection","uniform","needsLights","materialNeedsLights","ambientLightColor","ambient","lightProbe","probe","directionalLights","directional","directionalLightShadows","directionalShadow","spotLights","spot","spotLightShadows","spotShadow","rectAreaLights","rectArea","ltc_1","rectAreaLTC1","ltc_2","rectAreaLTC2","pointLights","point","pointLightShadows","pointShadow","hemisphereLights","hemi","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","uniformsList","seqWithValue","seq","resetTextureUnits","encoding","texture","useCache","id","setState","__version","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","setValue","logarithmicDepthBuffer","far","LN2","isMeshPhongMaterial","isMeshToonMaterial","uCamPos","map","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","isOrthographicCamera","isShadowMaterial","skinning","setOptional","bones","floatVertexTextures","boneTexture","size","sqrt","ceilPowerOfTwo","boneMatrices","Float32Array","boneTextureSize","receiveShadow","markUniformsLightsNeedsUpdate","refreshFogUniforms","refreshMaterialUniforms","upload","uniformsNeedUpdate","isSpriteMaterial","center","needsUpdate","setFramebuffer","bindFramebuffer","FRAMEBUFFER","getActiveCubeFace","getActiveMipmapLevel","getRenderList","setRenderList","getRenderState","setRenderState","renderState","getRenderTarget","activeCubeFace","activeMipmapLevel","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","isWebGLCubeRenderTarget","isWebGLMultisampleRenderTarget","__webglMultisampledFramebuffer","scissorTest","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","readRenderTargetPixels","buffer","activeCubeFaceIndex","isWebGLRenderTarget","restore","textureFormat","format","textureType","type","convert","getParameter","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","pow","image","glFormat","setTexture2D","copyTexImage2D","TEXTURE_2D","unbindTexture","copyTextureToTexture","srcTexture","dstTexture","glType","pixelStorei","UNPACK_FLIP_Y_WEBGL","flipY","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","UNPACK_ALIGNMENT","unpackAlignment","isDataTexture","texSubImage2D","data","isCompressedTexture","compressedTexSubImage2D","mipmaps","generateMipmaps","generateMipmap","initTexture","__THREE_DEVTOOLS__","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["import {\n\tRGBAFormat,\n\tHalfFloatType,\n\tFloatType,\n\tUnsignedByteType,\n\tLinearEncoding,\n\tNoToneMapping\n} from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Frustum } from '../math/Frustum.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { WebGLAnimation } from './webgl/WebGLAnimation.js';\nimport { WebGLAttributes } from './webgl/WebGLAttributes.js';\nimport { WebGLBackground } from './webgl/WebGLBackground.js';\nimport { WebGLBindingStates } from './webgl/WebGLBindingStates.js';\nimport { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer.js';\nimport { WebGLCapabilities } from './webgl/WebGLCapabilities.js';\nimport { WebGLClipping } from './webgl/WebGLClipping.js';\nimport { WebGLCubeMaps } from './webgl/WebGLCubeMaps.js';\nimport { WebGLExtensions } from './webgl/WebGLExtensions.js';\nimport { WebGLGeometries } from './webgl/WebGLGeometries.js';\nimport { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer.js';\nimport { WebGLInfo } from './webgl/WebGLInfo.js';\nimport { WebGLMorphtargets } from './webgl/WebGLMorphtargets.js';\nimport { WebGLObjects } from './webgl/WebGLObjects.js';\nimport { WebGLPrograms } from './webgl/WebGLPrograms.js';\nimport { WebGLProperties } from './webgl/WebGLProperties.js';\nimport { WebGLRenderLists } from './webgl/WebGLRenderLists.js';\nimport { WebGLRenderStates } from './webgl/WebGLRenderStates.js';\nimport { WebGLShadowMap } from './webgl/WebGLShadowMap.js';\nimport { WebGLState } from './webgl/WebGLState.js';\nimport { WebGLTextures } from './webgl/WebGLTextures.js';\nimport { WebGLUniforms } from './webgl/WebGLUniforms.js';\nimport { WebGLUtils } from './webgl/WebGLUtils.js';\nimport { WebXRManager } from './webxr/WebXRManager.js';\nimport { WebGLMaterials } from \"./webgl/WebGLMaterials.js\";\n\nfunction WebGLRenderer( parameters ) {\n\n\tparameters = parameters || {};\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _framebuffer = null;\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentFramebuffer = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\tlet _currentArrayCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\textensions.get( 'OES_texture_float' );\n\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\textensions.get( 'OES_vertex_array_object' );\n\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t}\n\n\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( properties );\n\t\trenderLists = new WebGLRenderLists( properties );\n\t\trenderStates = new WebGLRenderStates();\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// shadow map\n\n\tconst shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\ttarget = new Vector4();\n\n\t\t}\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\n\t\txr.dispose();\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tconst programInfo = properties.get( material ).program;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\tbindingStates.initAttributes();\n\n\t\tconst buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.normal );\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.uv );\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tbindingStates.enableAttribute( programAttributes.color );\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tbindingStates.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tconst compiled = new WeakMap();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tif ( compiled.has( material2 ) === false ) {\n\n\t\t\t\t\t\t\tinitMaterial( material2, scene, object );\n\t\t\t\t\t\t\tcompiled.set( material2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( compiled.has( material ) === false ) {\n\n\t\t\t\t\tinitMaterial( material, scene, object );\n\t\t\t\t\tcompiled.set( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( xr.isPresenting ) return;\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tlet renderTarget, forceClear;\n\n\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t}\n\n\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\tforceClear = arguments[ 3 ];\n\n\t\t}\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// reset caching for this frame\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tcamera = xr.getCamera( camera );\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\tif ( renderTarget !== undefined ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\t// _gl.finish();\n\n\t\tcurrentRenderList = null;\n\t\tcurrentRenderState = null;\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tconst program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\tbindingStates.reset();\n\n\t\t\trenderObjectImmediate( object, program );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t}\n\n\tfunction initMaterial( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet program = materialProperties.program;\n\t\tlet programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\tprogramChange = false;\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list, envMap still needs the update here to avoid a frame-late effect\n\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.envMap = cubemaps.get( material.envMap || environment );\n\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = cubemaps.get( material.envMap || materialProperties.environment );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = materialProperties.program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, scene, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\tconst envMap = cubemaps.get( material.envMap || environment );\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tinitMaterial( material, scene, object );\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tconst bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tlet size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\t//\n\tthis.setFramebuffer = function ( value ) {\n\n\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) _gl.bindFramebuffer( _gl.FRAMEBUFFER, value );\n\n\t\t_framebuffer = value;\n\n\t};\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderList = function () {\n\n\t\treturn currentRenderList;\n\n\t};\n\n\tthis.setRenderList = function ( renderList ) {\n\n\t\tcurrentRenderList = renderList;\n\n\t};\n\n\tthis.getRenderState = function () {\n\n\t\treturn currentRenderState;\n\n\t};\n\n\tthis.setRenderState = function ( renderState ) {\n\n\t\tcurrentRenderState = renderState;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tlet framebuffer = _framebuffer;\n\t\tlet isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tlet restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\tif ( level === undefined ) level = 0;\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\t\tconst glFormat = utils.convert( texture.format );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\tif ( level === undefined ) level = 0;\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nexport { WebGLRenderer };\n"]},"metadata":{},"sourceType":"module"}