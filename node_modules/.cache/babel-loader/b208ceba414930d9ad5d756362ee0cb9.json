{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nvar _sphere = /*@__PURE__*/new Sphere();\n\nvar _vector = /*@__PURE__*/new Vector3();\n\nclass Frustum {\n  constructor(p0, p1, p2, p3, p4, p5) {\n    this.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n  }\n\n  set(p0, p1, p2, p3, p4, p5) {\n    var planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(frustum) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n\n    return this;\n  }\n\n  setFromProjectionMatrix(m) {\n    var planes = this.planes;\n    var me = m.elements;\n    var me0 = me[0],\n        me1 = me[1],\n        me2 = me[2],\n        me3 = me[3];\n    var me4 = me[4],\n        me5 = me[5],\n        me6 = me[6],\n        me7 = me[7];\n    var me8 = me[8],\n        me9 = me[9],\n        me10 = me[10],\n        me11 = me[11];\n    var me12 = me[12],\n        me13 = me[13],\n        me14 = me[14],\n        me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    return this;\n  }\n\n  intersectsObject(object) {\n    var geometry = object.geometry;\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  }\n\n  intersectsSprite(sprite) {\n    _sphere.center.set(0, 0, 0);\n\n    _sphere.radius = 0.7071067811865476;\n\n    _sphere.applyMatrix4(sprite.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  }\n\n  intersectsSphere(sphere) {\n    var planes = this.planes;\n    var center = sphere.center;\n    var negRadius = -sphere.radius;\n\n    for (var i = 0; i < 6; i++) {\n      var distance = planes[i].distanceToPoint(center);\n\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  intersectsBox(box) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      var plane = planes[i]; // corner at max distance\n\n      _vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n      if (plane.distanceToPoint(_vector) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  containsPoint(point) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexport { Frustum };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/Frustum.js"],"names":["Vector3","Sphere","Plane","_sphere","_vector","Frustum","constructor","p0","p1","p2","p3","p4","p5","planes","undefined","set","copy","clone","frustum","i","setFromProjectionMatrix","m","me","elements","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","normalize","intersectsObject","object","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","matrixWorld","intersectsSphere","intersectsSprite","sprite","center","radius","sphere","negRadius","distance","distanceToPoint","intersectsBox","box","plane","x","normal","max","min","y","z","containsPoint","point"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n}\n\n\nexport { Frustum };\n"]},"metadata":{},"sourceType":"module"}