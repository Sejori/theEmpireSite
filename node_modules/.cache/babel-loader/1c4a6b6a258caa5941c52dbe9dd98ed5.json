{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Quaternion } from '../math/Quaternion.js';\nimport { Audio } from './Audio.js';\n\nvar _position = /*@__PURE__*/new Vector3();\n\nvar _quaternion = /*@__PURE__*/new Quaternion();\n\nvar _scale = /*@__PURE__*/new Vector3();\n\nvar _orientation = /*@__PURE__*/new Vector3();\n\nclass PositionalAudio extends Audio {\n  constructor(listener) {\n    super(listener);\n    this.panner = this.context.createPanner();\n    this.panner.panningModel = 'HRTF';\n    this.panner.connect(this.gain);\n  }\n\n  getOutput() {\n    return this.panner;\n  }\n\n  getRefDistance() {\n    return this.panner.refDistance;\n  }\n\n  setRefDistance(value) {\n    this.panner.refDistance = value;\n    return this;\n  }\n\n  getRolloffFactor() {\n    return this.panner.rolloffFactor;\n  }\n\n  setRolloffFactor(value) {\n    this.panner.rolloffFactor = value;\n    return this;\n  }\n\n  getDistanceModel() {\n    return this.panner.distanceModel;\n  }\n\n  setDistanceModel(value) {\n    this.panner.distanceModel = value;\n    return this;\n  }\n\n  getMaxDistance() {\n    return this.panner.maxDistance;\n  }\n\n  setMaxDistance(value) {\n    this.panner.maxDistance = value;\n    return this;\n  }\n\n  setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n    this.panner.coneInnerAngle = coneInnerAngle;\n    this.panner.coneOuterAngle = coneOuterAngle;\n    this.panner.coneOuterGain = coneOuterGain;\n    return this;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n    this.matrixWorld.decompose(_position, _quaternion, _scale);\n\n    _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n    var panner = this.panner;\n\n    if (panner.positionX) {\n      // code path for Chrome and Firefox (see #14393)\n      var endTime = this.context.currentTime + this.listener.timeDelta;\n      panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n      panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n      panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n      panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n      panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n      panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n    } else {\n      panner.setPosition(_position.x, _position.y, _position.z);\n      panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n    }\n  }\n\n}\n\nexport { PositionalAudio };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/audio/PositionalAudio.js"],"names":["Vector3","Quaternion","Audio","_position","_quaternion","_scale","_orientation","PositionalAudio","constructor","listener","panner","context","createPanner","panningModel","connect","gain","getOutput","getRefDistance","refDistance","setRefDistance","value","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","updateMatrixWorld","force","hasPlaybackControl","isPlaying","matrixWorld","decompose","set","applyQuaternion","positionX","endTime","currentTime","timeDelta","linearRampToValueAtTime","x","positionY","y","positionZ","z","orientationX","orientationY","orientationZ","setPosition","setOrientation"],"mappings":"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","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Quaternion } from '../math/Quaternion.js';\nimport { Audio } from './Audio.js';\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nexport { PositionalAudio };\n"]},"metadata":{},"sourceType":"module"}