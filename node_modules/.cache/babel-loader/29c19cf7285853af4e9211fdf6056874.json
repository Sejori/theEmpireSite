{"ast":null,"code":"class AudioAnalyser {\n  constructor(audio, fftSize) {\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n    audio.getOutput().connect(this.analyser);\n  }\n\n  getFrequencyData() {\n    this.analyser.getByteFrequencyData(this.data);\n    return this.data;\n  }\n\n  getAverageFrequency() {\n    var value = 0;\n    var data = this.getFrequencyData();\n\n    for (var i = 0; i < data.length; i++) {\n      value += data[i];\n    }\n\n    return value / data.length;\n  }\n\n}\n\nexport { AudioAnalyser };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/audio/AudioAnalyser.js"],"names":["AudioAnalyser","constructor","audio","fftSize","analyser","context","createAnalyser","undefined","data","Uint8Array","frequencyBinCount","getOutput","connect","getFrequencyData","getByteFrequencyData","getAverageFrequency","value","i","length"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;AAEnBC,EAAAA,WAAW,CAAEC,KAAF,EAASC,OAAT,EAAmB;AAE7B,SAAKC,QAAL,GAAgBF,KAAK,CAACG,OAAN,CAAcC,cAAd,EAAhB;AACA,SAAKF,QAAL,CAAcD,OAAd,GAAwBA,OAAO,KAAKI,SAAZ,GAAwBJ,OAAxB,GAAkC,IAA1D;AAEA,SAAKK,IAAL,GAAY,IAAIC,UAAJ,CAAgB,KAAKL,QAAL,CAAcM,iBAA9B,CAAZ;AAEAR,IAAAA,KAAK,CAACS,SAAN,GAAkBC,OAAlB,CAA2B,KAAKR,QAAhC;AAEA;;AAGDS,EAAAA,gBAAgB,GAAG;AAElB,SAAKT,QAAL,CAAcU,oBAAd,CAAoC,KAAKN,IAAzC;AAEA,WAAO,KAAKA,IAAZ;AAEA;;AAEDO,EAAAA,mBAAmB,GAAG;AAErB,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAMR,IAAI,GAAG,KAAKK,gBAAL,EAAb;;AAEA,SAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGT,IAAI,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAyC;AAExCD,MAAAA,KAAK,IAAIR,IAAI,CAAES,CAAF,CAAb;AAEA;;AAED,WAAOD,KAAK,GAAGR,IAAI,CAACU,MAApB;AAEA;;AAnCkB;;AAuCpB,SAASlB,aAAT","sourcesContent":["class AudioAnalyser {\n\n\tconstructor( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nexport { AudioAnalyser };\n"]},"metadata":{},"sourceType":"module"}