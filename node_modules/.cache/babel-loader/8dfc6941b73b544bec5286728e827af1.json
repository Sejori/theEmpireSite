{"ast":null,"code":"import { Group } from '../../objects/Group.js';\n\nfunction WebXRController() {\n  this._targetRay = null;\n  this._grip = null;\n  this._hand = null;\n}\n\nObject.assign(WebXRController.prototype, {\n  constructor: WebXRController,\n  getHandSpace: function getHandSpace() {\n    if (this._hand === null) {\n      this._hand = new Group();\n      this._hand.matrixAutoUpdate = false;\n      this._hand.visible = false;\n      this._hand.joints = [];\n      this._hand.inputState = {\n        pinching: false\n      };\n\n      if (window.XRHand) {\n        for (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n          // The transform of this joint will be updated with the joint pose on each frame\n          var joint = new Group();\n          joint.matrixAutoUpdate = false;\n          joint.visible = false;\n\n          this._hand.joints.push(joint); // ??\n\n\n          this._hand.add(joint);\n        }\n      }\n    }\n\n    return this._hand;\n  },\n  getTargetRaySpace: function getTargetRaySpace() {\n    if (this._targetRay === null) {\n      this._targetRay = new Group();\n      this._targetRay.matrixAutoUpdate = false;\n      this._targetRay.visible = false;\n    }\n\n    return this._targetRay;\n  },\n  getGripSpace: function getGripSpace() {\n    if (this._grip === null) {\n      this._grip = new Group();\n      this._grip.matrixAutoUpdate = false;\n      this._grip.visible = false;\n    }\n\n    return this._grip;\n  },\n  dispatchEvent: function dispatchEvent(event) {\n    if (this._targetRay !== null) {\n      this._targetRay.dispatchEvent(event);\n    }\n\n    if (this._grip !== null) {\n      this._grip.dispatchEvent(event);\n    }\n\n    if (this._hand !== null) {\n      this._hand.dispatchEvent(event);\n    }\n\n    return this;\n  },\n  disconnect: function disconnect(inputSource) {\n    this.dispatchEvent({\n      type: 'disconnected',\n      data: inputSource\n    });\n\n    if (this._targetRay !== null) {\n      this._targetRay.visible = false;\n    }\n\n    if (this._grip !== null) {\n      this._grip.visible = false;\n    }\n\n    if (this._hand !== null) {\n      this._hand.visible = false;\n    }\n\n    return this;\n  },\n  update: function update(inputSource, frame, referenceSpace) {\n    var inputPose = null;\n    var gripPose = null;\n    var handPose = null;\n    var targetRay = this._targetRay;\n    var grip = this._grip;\n    var hand = this._hand;\n\n    if (inputSource) {\n      if (hand && inputSource.hand) {\n        handPose = true;\n\n        for (var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++) {\n          if (inputSource.hand[i]) {\n            // Update the joints groups with the XRJoint poses\n            var jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace);\n            var joint = hand.joints[i];\n\n            if (jointPose !== null) {\n              joint.matrix.fromArray(jointPose.transform.matrix);\n              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n              joint.jointRadius = jointPose.radius;\n            }\n\n            joint.visible = jointPose !== null; // Custom events\n            // Check pinch\n\n            var indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];\n            var thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];\n            var distance = indexTip.position.distanceTo(thumbTip.position);\n            var distanceToPinch = 0.02;\n            var threshold = 0.005;\n\n            if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n              hand.inputState.pinching = false;\n              this.dispatchEvent({\n                type: \"pinchend\",\n                handedness: inputSource.handedness,\n                target: this\n              });\n            } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n              hand.inputState.pinching = true;\n              this.dispatchEvent({\n                type: \"pinchstart\",\n                handedness: inputSource.handedness,\n                target: this\n              });\n            }\n          }\n        }\n      } else {\n        if (targetRay !== null) {\n          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n          if (inputPose !== null) {\n            targetRay.matrix.fromArray(inputPose.transform.matrix);\n            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n          }\n        }\n\n        if (grip !== null && inputSource.gripSpace) {\n          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n          if (gripPose !== null) {\n            grip.matrix.fromArray(gripPose.transform.matrix);\n            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n          }\n        }\n      }\n    }\n\n    if (targetRay !== null) {\n      targetRay.visible = inputPose !== null;\n    }\n\n    if (grip !== null) {\n      grip.visible = gripPose !== null;\n    }\n\n    if (hand !== null) {\n      hand.visible = handPose !== null;\n    }\n\n    return this;\n  }\n});\nexport { WebXRController };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webxr/WebXRController.js"],"names":["Group","WebXRController","_targetRay","_grip","_hand","Object","assign","prototype","constructor","getHandSpace","matrixAutoUpdate","visible","joints","inputState","pinching","window","XRHand","i","LITTLE_PHALANX_TIP","joint","push","add","getTargetRaySpace","getGripSpace","dispatchEvent","event","disconnect","inputSource","type","data","update","frame","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","jointPose","getJointPose","matrix","fromArray","transform","decompose","position","rotation","scale","jointRadius","radius","indexTip","INDEX_PHALANX_TIP","thumbTip","THUMB_PHALANX_TIP","distance","distanceTo","distanceToPinch","threshold","handedness","target","getPose","targetRaySpace","gripSpace"],"mappings":"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","sourcesContent":["import { Group } from '../../objects/Group.js';\n\nfunction WebXRController() {\n\n\tthis._targetRay = null;\n\tthis._grip = null;\n\tthis._hand = null;\n\n}\n\nObject.assign( WebXRController.prototype, {\n\n\tconstructor: WebXRController,\n\n\tgetHandSpace: function () {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = [];\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t\tif ( window.XRHand ) {\n\n\t\t\t\tfor ( let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\tthis._hand.joints.push( joint );\n\t\t\t\t\t// ??\n\t\t\t\t\tthis._hand.add( joint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t},\n\n\tgetTargetRaySpace: function () {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t},\n\n\tgetGripSpace: function () {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tdisconnect: function ( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tupdate: function ( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( let i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i ++ ) {\n\n\t\t\t\t\tif ( inputSource.hand[ i ] ) {\n\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tconst jointPose = frame.getJointPose( inputSource.hand[ i ], referenceSpace );\n\t\t\t\t\t\tconst joint = hand.joints[ i ];\n\n\t\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t\t\t// Custom events\n\n\t\t\t\t\t\t// Check pinch\n\t\t\t\t\t\tconst indexTip = hand.joints[ window.XRHand.INDEX_PHALANX_TIP ];\n\t\t\t\t\t\tconst thumbTip = hand.joints[ window.XRHand.THUMB_PHALANX_TIP ];\n\t\t\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\t\t\ttype: \"pinchend\",\n\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\t\t\ttype: \"pinchstart\",\n\t\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { WebXRController };\n"]},"metadata":{},"sourceType":"module"}