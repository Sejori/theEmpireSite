{"ast":null,"code":"import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass TorusBufferGeometry extends BufferGeometry {\n  constructor(radius, tube, radialSegments, tubularSegments, arc) {\n    super();\n    this.type = 'TorusBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radius = radius || 1;\n    tube = tube || 0.4;\n    radialSegments = Math.floor(radialSegments) || 8;\n    tubularSegments = Math.floor(tubularSegments) || 6;\n    arc = arc || Math.PI * 2; // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = []; // helper variables\n\n    var center = new Vector3();\n    var vertex = new Vector3();\n    var normal = new Vector3(); // generate vertices, normals and uvs\n\n    for (var j = 0; j <= radialSegments; j++) {\n      for (var i = 0; i <= tubularSegments; i++) {\n        var u = i / tubularSegments * arc;\n        var v = j / radialSegments * Math.PI * 2; // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n        normals.push(normal.x, normal.y, normal.z); // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    } // generate indices\n\n\n    for (var _j = 1; _j <= radialSegments; _j++) {\n      for (var _i = 1; _i <= tubularSegments; _i++) {\n        // indices\n        var a = (tubularSegments + 1) * _j + _i - 1;\n        var b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n        var c = (tubularSegments + 1) * (_j - 1) + _i;\n        var d = (tubularSegments + 1) * _j + _i; // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n  }\n\n}\n\nexport { TorusBufferGeometry };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/geometries/TorusBufferGeometry.js"],"names":["BufferGeometry","Float32BufferAttribute","Vector3","TorusBufferGeometry","constructor","radius","tube","radialSegments","tubularSegments","arc","type","parameters","Math","floor","PI","indices","vertices","normals","uvs","center","vertex","normal","j","i","u","v","x","cos","y","sin","z","push","subVectors","normalize","a","b","c","d","setIndex","setAttribute"],"mappings":"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","sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nclass TorusBufferGeometry extends BufferGeometry {\n\n\tconstructor( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n}\n\nexport { TorusBufferGeometry };\n"]},"metadata":{},"sourceType":"module"}