{"ast":null,"code":"import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader(manager) {\n  Loader.call(this, manager);\n}\n\nDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: DataTextureLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texture = new DataTexture();\n    var loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setPath(this.path);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      var texData = scope.parse(buffer);\n      if (!texData) return;\n\n      if (texData.image !== undefined) {\n        texture.image = texData.image;\n      } else if (texData.data !== undefined) {\n        texture.image.width = texData.width;\n        texture.image.height = texData.height;\n        texture.image.data = texData.data;\n      }\n\n      texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n      texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n      texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n      texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n      texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n      if (texData.format !== undefined) {\n        texture.format = texData.format;\n      }\n\n      if (texData.type !== undefined) {\n        texture.type = texData.type;\n      }\n\n      if (texData.mipmaps !== undefined) {\n        texture.mipmaps = texData.mipmaps;\n        texture.minFilter = LinearMipmapLinearFilter; // presumably...\n      }\n\n      if (texData.mipmapCount === 1) {\n        texture.minFilter = LinearFilter;\n      }\n\n      texture.needsUpdate = true;\n      if (onLoad) onLoad(texture, texData);\n    }, onProgress, onError);\n    return texture;\n  }\n});\nexport { DataTextureLoader };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/loaders/DataTextureLoader.js"],"names":["LinearFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","FileLoader","DataTexture","Loader","DataTextureLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","texture","loader","setResponseType","setRequestHeader","requestHeader","setPath","path","setWithCredentials","withCredentials","buffer","texData","parse","image","undefined","data","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","format","type","mipmaps","mipmapCount","needsUpdate"],"mappings":"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","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n\nexport { DataTextureLoader };\n"]},"metadata":{},"sourceType":"module"}