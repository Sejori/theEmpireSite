{"ast":null,"code":"import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass GridHelper extends LineSegments {\n  constructor(size, divisions, color1, color2) {\n    size = size || 10;\n    divisions = divisions || 10;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n    var center = divisions / 2;\n    var step = size / divisions;\n    var halfSize = size / 2;\n    var vertices = [],\n        colors = [];\n\n    for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n      vertices.push(-halfSize, 0, k, halfSize, 0, k);\n      vertices.push(k, 0, -halfSize, k, 0, halfSize);\n      var color = i === center ? color1 : color2;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({\n      vertexColors: true,\n      toneMapped: false\n    });\n    super(geometry, material);\n    this.type = 'GridHelper';\n  }\n\n}\n\nexport { GridHelper };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/helpers/GridHelper.js"],"names":["LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","Color","GridHelper","constructor","size","divisions","color1","color2","undefined","center","step","halfSize","vertices","colors","i","j","k","push","color","toArray","geometry","setAttribute","material","vertexColors","toneMapped","type"],"mappings":"AAAA,SAASA,YAAT,QAA6B,4BAA7B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,MAAMC,UAAN,SAAyBL,YAAzB,CAAsC;AAErCM,EAAAA,WAAW,CAAEC,IAAF,EAAQC,SAAR,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAoC;AAE9CH,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAC,IAAAA,SAAS,GAAGA,SAAS,IAAI,EAAzB;AACAC,IAAAA,MAAM,GAAG,IAAIL,KAAJ,CAAWK,MAAM,KAAKE,SAAX,GAAuBF,MAAvB,GAAgC,QAA3C,CAAT;AACAC,IAAAA,MAAM,GAAG,IAAIN,KAAJ,CAAWM,MAAM,KAAKC,SAAX,GAAuBD,MAAvB,GAAgC,QAA3C,CAAT;AAEA,QAAME,MAAM,GAAGJ,SAAS,GAAG,CAA3B;AACA,QAAMK,IAAI,GAAGN,IAAI,GAAGC,SAApB;AACA,QAAMM,QAAQ,GAAGP,IAAI,GAAG,CAAxB;AAEA,QAAMQ,QAAQ,GAAG,EAAjB;AAAA,QAAqBC,MAAM,GAAG,EAA9B;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,CAAC,GAAG,CAAEL,QAA9B,EAAwCG,CAAC,IAAIT,SAA7C,EAAwDS,CAAC,IAAKE,CAAC,IAAIN,IAAnE,EAA0E;AAEzEE,MAAAA,QAAQ,CAACK,IAAT,CAAe,CAAEN,QAAjB,EAA2B,CAA3B,EAA8BK,CAA9B,EAAiCL,QAAjC,EAA2C,CAA3C,EAA8CK,CAA9C;AACAJ,MAAAA,QAAQ,CAACK,IAAT,CAAeD,CAAf,EAAkB,CAAlB,EAAqB,CAAEL,QAAvB,EAAiCK,CAAjC,EAAoC,CAApC,EAAuCL,QAAvC;AAEA,UAAMO,KAAK,GAAGJ,CAAC,KAAKL,MAAN,GAAeH,MAAf,GAAwBC,MAAtC;AAEAW,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAC5BG,MAAAA,KAAK,CAACC,OAAN,CAAeN,MAAf,EAAuBE,CAAvB;AAA4BA,MAAAA,CAAC,IAAI,CAAL;AAE5B;;AAED,QAAMK,QAAQ,GAAG,IAAIpB,cAAJ,EAAjB;AACAoB,IAAAA,QAAQ,CAACC,YAAT,CAAuB,UAAvB,EAAmC,IAAItB,sBAAJ,CAA4Ba,QAA5B,EAAsC,CAAtC,CAAnC;AACAQ,IAAAA,QAAQ,CAACC,YAAT,CAAuB,OAAvB,EAAgC,IAAItB,sBAAJ,CAA4Bc,MAA5B,EAAoC,CAApC,CAAhC;AAEA,QAAMS,QAAQ,GAAG,IAAIxB,iBAAJ,CAAuB;AAAEyB,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAAvB,CAAjB;AAEA,UAAOJ,QAAP,EAAiBE,QAAjB;AAEA,SAAKG,IAAL,GAAY,YAAZ;AAEA;;AAvCoC;;AA4CtC,SAASvB,UAAT","sourcesContent":["import { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Color } from '../math/Color.js';\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n}\n\n\nexport { GridHelper };\n"]},"metadata":{},"sourceType":"module"}