{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { MathUtils } from './MathUtils.js';\n\nvar _startP = /*@__PURE__*/new Vector3();\n\nvar _startEnd = /*@__PURE__*/new Vector3();\n\nclass Line3 {\n  constructor(start, end) {\n    this.start = start !== undefined ? start : new Vector3();\n    this.end = end !== undefined ? end : new Vector3();\n  }\n\n  set(start, end) {\n    this.start.copy(start);\n    this.end.copy(end);\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(line) {\n    this.start.copy(line.start);\n    this.end.copy(line.end);\n    return this;\n  }\n\n  getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Line3: .getCenter() target is now required');\n      target = new Vector3();\n    }\n\n    return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n  }\n\n  delta(target) {\n    if (target === undefined) {\n      console.warn('THREE.Line3: .delta() target is now required');\n      target = new Vector3();\n    }\n\n    return target.subVectors(this.end, this.start);\n  }\n\n  distanceSq() {\n    return this.start.distanceToSquared(this.end);\n  }\n\n  distance() {\n    return this.start.distanceTo(this.end);\n  }\n\n  at(t, target) {\n    if (target === undefined) {\n      console.warn('THREE.Line3: .at() target is now required');\n      target = new Vector3();\n    }\n\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  closestPointToPointParameter(point, clampToLine) {\n    _startP.subVectors(point, this.start);\n\n    _startEnd.subVectors(this.end, this.start);\n\n    var startEnd2 = _startEnd.dot(_startEnd);\n\n    var startEnd_startP = _startEnd.dot(_startP);\n\n    var t = startEnd_startP / startEnd2;\n\n    if (clampToLine) {\n      t = MathUtils.clamp(t, 0, 1);\n    }\n\n    return t;\n  }\n\n  closestPointToPoint(point, clampToLine, target) {\n    var t = this.closestPointToPointParameter(point, clampToLine);\n\n    if (target === undefined) {\n      console.warn('THREE.Line3: .closestPointToPoint() target is now required');\n      target = new Vector3();\n    }\n\n    return this.delta(target).multiplyScalar(t).add(this.start);\n  }\n\n  applyMatrix4(matrix) {\n    this.start.applyMatrix4(matrix);\n    this.end.applyMatrix4(matrix);\n    return this;\n  }\n\n  equals(line) {\n    return line.start.equals(this.start) && line.end.equals(this.end);\n  }\n\n}\n\nexport { Line3 };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/Line3.js"],"names":["Vector3","MathUtils","_startP","_startEnd","Line3","constructor","start","end","undefined","set","copy","clone","line","getCenter","target","console","warn","addVectors","multiplyScalar","delta","subVectors","distanceSq","distanceToSquared","distance","distanceTo","at","t","add","closestPointToPointParameter","point","clampToLine","startEnd2","dot","startEnd_startP","clamp","closestPointToPoint","applyMatrix4","matrix","equals"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\nimport { MathUtils } from './MathUtils.js';\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = MathUtils.clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n}\n\n\nexport { Line3 };\n"]},"metadata":{},"sourceType":"module"}