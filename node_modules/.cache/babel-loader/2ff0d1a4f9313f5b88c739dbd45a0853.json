{"ast":null,"code":"import { Cache } from './Cache.js';\nimport { Loader } from './Loader.js';\n\nfunction ImageBitmapLoader(manager) {\n  if (typeof createImageBitmap === 'undefined') {\n    console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n  }\n\n  if (typeof fetch === 'undefined') {\n    console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n  }\n\n  Loader.call(this, manager);\n  this.options = {\n    premultiplyAlpha: 'none'\n  };\n}\n\nImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ImageBitmapLoader,\n  isImageBitmapLoader: true,\n  setOptions: function setOptions(options) {\n    this.options = options;\n    return this;\n  },\n  load: function load(url, onLoad, onProgress, onError) {\n    if (url === undefined) url = '';\n    if (this.path !== undefined) url = this.path + url;\n    url = this.manager.resolveURL(url);\n    var scope = this;\n    var cached = Cache.get(url);\n\n    if (cached !== undefined) {\n      scope.manager.itemStart(url);\n      setTimeout(function () {\n        if (onLoad) onLoad(cached);\n        scope.manager.itemEnd(url);\n      }, 0);\n      return cached;\n    }\n\n    var fetchOptions = {};\n    fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n    fetch(url, fetchOptions).then(function (res) {\n      return res.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, scope.options);\n    }).then(function (imageBitmap) {\n      Cache.add(url, imageBitmap);\n      if (onLoad) onLoad(imageBitmap);\n      scope.manager.itemEnd(url);\n    }).catch(function (e) {\n      if (onError) onError(e);\n      scope.manager.itemError(url);\n      scope.manager.itemEnd(url);\n    });\n    scope.manager.itemStart(url);\n  }\n});\nexport { ImageBitmapLoader };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/loaders/ImageBitmapLoader.js"],"names":["Cache","Loader","ImageBitmapLoader","manager","createImageBitmap","console","warn","fetch","call","options","premultiplyAlpha","prototype","Object","assign","create","constructor","isImageBitmapLoader","setOptions","load","url","onLoad","onProgress","onError","undefined","path","resolveURL","scope","cached","get","itemStart","setTimeout","itemEnd","fetchOptions","credentials","crossOrigin","then","res","blob","imageBitmap","add","catch","e","itemError"],"mappings":"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","sourcesContent":["import { Cache } from './Cache.js';\nimport { Loader } from './Loader.js';\n\nfunction ImageBitmapLoader( manager ) {\n\n\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t}\n\n\tif ( typeof fetch === 'undefined' ) {\n\n\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t}\n\n\tLoader.call( this, manager );\n\n\tthis.options = { premultiplyAlpha: 'none' };\n\n}\n\nImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: ImageBitmapLoader,\n\n\tisImageBitmapLoader: true,\n\n\tsetOptions: function setOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n} );\n\nexport { ImageBitmapLoader };\n"]},"metadata":{},"sourceType":"module"}