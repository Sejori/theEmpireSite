{"ast":null,"code":"/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\nimport { MathUtils } from './MathUtils.js';\n\nclass Spherical {\n  constructor(radius = 1, phi = 0, theta = 0) {\n    this.radius = radius;\n    this.phi = phi; // polar angle\n\n    this.theta = theta; // azimuthal angle\n\n    return this;\n  }\n\n  set(radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this;\n  } // restrict phi to be betwee EPS and PI-EPS\n\n\n  makeSafe() {\n    var EPS = 0.000001;\n    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n    return this;\n  }\n\n  setFromVector3(v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  }\n\n  setFromCartesianCoords(x, y, z) {\n    this.radius = Math.sqrt(x * x + y * y + z * z);\n\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(x, z);\n      this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n    }\n\n    return this;\n  }\n\n}\n\nexport { Spherical };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/Spherical.js"],"names":["MathUtils","Spherical","constructor","radius","phi","theta","set","clone","copy","other","makeSafe","EPS","Math","max","min","PI","setFromVector3","v","setFromCartesianCoords","x","y","z","sqrt","atan2","acos","clamp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,gBAA1B;;AAEA,MAAMC,SAAN,CAAgB;AAEfC,EAAAA,WAAW,CAAEC,MAAM,GAAG,CAAX,EAAcC,GAAG,GAAG,CAApB,EAAuBC,KAAK,GAAG,CAA/B,EAAmC;AAE7C,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX,CAH6C,CAG7B;;AAChB,SAAKC,KAAL,GAAaA,KAAb,CAJ6C,CAIzB;;AAEpB,WAAO,IAAP;AAEA;;AAEDC,EAAAA,GAAG,CAAEH,MAAF,EAAUC,GAAV,EAAeC,KAAf,EAAuB;AAEzB,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AAEA,WAAO,IAAP;AAEA;;AAEDE,EAAAA,KAAK,GAAG;AAEP,WAAO,IAAI,KAAKL,WAAT,GAAuBM,IAAvB,CAA6B,IAA7B,CAAP;AAEA;;AAEDA,EAAAA,IAAI,CAAEC,KAAF,EAAU;AAEb,SAAKN,MAAL,GAAcM,KAAK,CAACN,MAApB;AACA,SAAKC,GAAL,GAAWK,KAAK,CAACL,GAAjB;AACA,SAAKC,KAAL,GAAaI,KAAK,CAACJ,KAAnB;AAEA,WAAO,IAAP;AAEA,GApCc,CAsCf;;;AACAK,EAAAA,QAAQ,GAAG;AAEV,QAAMC,GAAG,GAAG,QAAZ;AACA,SAAKP,GAAL,GAAWQ,IAAI,CAACC,GAAL,CAAUF,GAAV,EAAeC,IAAI,CAACE,GAAL,CAAUF,IAAI,CAACG,EAAL,GAAUJ,GAApB,EAAyB,KAAKP,GAA9B,CAAf,CAAX;AAEA,WAAO,IAAP;AAEA;;AAEDY,EAAAA,cAAc,CAAEC,CAAF,EAAM;AAEnB,WAAO,KAAKC,sBAAL,CAA6BD,CAAC,CAACE,CAA/B,EAAkCF,CAAC,CAACG,CAApC,EAAuCH,CAAC,CAACI,CAAzC,CAAP;AAEA;;AAEDH,EAAAA,sBAAsB,CAAEC,CAAF,EAAKC,CAAL,EAAQC,CAAR,EAAY;AAEjC,SAAKlB,MAAL,GAAcS,IAAI,CAACU,IAAL,CAAWH,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAZ,GAAgBC,CAAC,GAAGA,CAA/B,CAAd;;AAEA,QAAK,KAAKlB,MAAL,KAAgB,CAArB,EAAyB;AAExB,WAAKE,KAAL,GAAa,CAAb;AACA,WAAKD,GAAL,GAAW,CAAX;AAEA,KALD,MAKO;AAEN,WAAKC,KAAL,GAAaO,IAAI,CAACW,KAAL,CAAYJ,CAAZ,EAAeE,CAAf,CAAb;AACA,WAAKjB,GAAL,GAAWQ,IAAI,CAACY,IAAL,CAAWxB,SAAS,CAACyB,KAAV,CAAiBL,CAAC,GAAG,KAAKjB,MAA1B,EAAkC,CAAE,CAApC,EAAuC,CAAvC,CAAX,CAAX;AAEA;;AAED,WAAO,IAAP;AAEA;;AAxEc;;AA4EhB,SAASF,SAAT","sourcesContent":["/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nimport { MathUtils } from './MathUtils.js';\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { Spherical };\n"]},"metadata":{},"sourceType":"module"}