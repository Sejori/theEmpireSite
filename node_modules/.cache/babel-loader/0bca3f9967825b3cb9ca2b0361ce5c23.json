{"ast":null,"code":"import { BackSide, FrontSide, CubeUVReflectionMapping } from '../../constants.js';\nimport { BoxBufferGeometry } from '../../geometries/BoxBufferGeometry.js';\nimport { PlaneBufferGeometry } from '../../geometries/PlaneBufferGeometry.js';\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\nimport { Color } from '../../math/Color.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { cloneUniforms } from '../shaders/UniformsUtils.js';\n\nfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n  var clearColor = new Color(0x000000);\n  var clearAlpha = 0;\n  var planeMesh;\n  var boxMesh;\n  var currentBackground = null;\n  var currentBackgroundVersion = 0;\n  var currentTonemapping = null;\n\n  function render(renderList, scene, camera, forceClear) {\n    var background = scene.isScene === true ? scene.background : null;\n\n    if (background && background.isTexture) {\n      background = cubemaps.get(background);\n    } // Ignore background in AR\n    // TODO: Reconsider this.\n\n\n    var xr = renderer.xr;\n    var session = xr.getSession && xr.getSession();\n\n    if (session && session.environmentBlendMode === 'additive') {\n      background = null;\n    }\n\n    if (background === null) {\n      setClear(clearColor, clearAlpha);\n    } else if (background && background.isColor) {\n      setClear(background, 1);\n      forceClear = true;\n    }\n\n    if (renderer.autoClear || forceClear) {\n      renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n    }\n\n    if (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n      if (boxMesh === undefined) {\n        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n          name: 'BackgroundCubeMaterial',\n          uniforms: cloneUniforms(ShaderLib.cube.uniforms),\n          vertexShader: ShaderLib.cube.vertexShader,\n          fragmentShader: ShaderLib.cube.fragmentShader,\n          side: BackSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        boxMesh.geometry.deleteAttribute('normal');\n        boxMesh.geometry.deleteAttribute('uv');\n\n        boxMesh.onBeforeRender = function (renderer, scene, camera) {\n          this.matrixWorld.copyPosition(camera.matrixWorld);\n        }; // enable code injection for non-built-in material\n\n\n        Object.defineProperty(boxMesh.material, 'envMap', {\n          get: function get() {\n            return this.uniforms.envMap.value;\n          }\n        });\n        objects.update(boxMesh);\n      }\n\n      if (background.isWebGLCubeRenderTarget) {\n        // TODO Deprecate\n        background = background.texture;\n      }\n\n      boxMesh.material.uniforms.envMap.value = background;\n      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        boxMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      } // push to the pre-sorted opaque render list\n\n\n      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n    } else if (background && background.isTexture) {\n      if (planeMesh === undefined) {\n        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({\n          name: 'BackgroundMaterial',\n          uniforms: cloneUniforms(ShaderLib.background.uniforms),\n          vertexShader: ShaderLib.background.vertexShader,\n          fragmentShader: ShaderLib.background.fragmentShader,\n          side: FrontSide,\n          depthTest: false,\n          depthWrite: false,\n          fog: false\n        }));\n        planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n        Object.defineProperty(planeMesh.material, 'map', {\n          get: function get() {\n            return this.uniforms.t2D.value;\n          }\n        });\n        objects.update(planeMesh);\n      }\n\n      planeMesh.material.uniforms.t2D.value = background;\n\n      if (background.matrixAutoUpdate === true) {\n        background.updateMatrix();\n      }\n\n      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n        planeMesh.material.needsUpdate = true;\n        currentBackground = background;\n        currentBackgroundVersion = background.version;\n        currentTonemapping = renderer.toneMapping;\n      } // push to the pre-sorted opaque render list\n\n\n      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n    }\n  }\n\n  function setClear(color, alpha) {\n    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n  }\n\n  return {\n    getClearColor: function getClearColor() {\n      return clearColor;\n    },\n    setClearColor: function setClearColor(color, alpha) {\n      clearColor.set(color);\n      clearAlpha = alpha !== undefined ? alpha : 1;\n      setClear(clearColor, clearAlpha);\n    },\n    getClearAlpha: function getClearAlpha() {\n      return clearAlpha;\n    },\n    setClearAlpha: function setClearAlpha(alpha) {\n      clearAlpha = alpha;\n      setClear(clearColor, clearAlpha);\n    },\n    render: render\n  };\n}\n\nexport { WebGLBackground };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webgl/WebGLBackground.js"],"names":["BackSide","FrontSide","CubeUVReflectionMapping","BoxBufferGeometry","PlaneBufferGeometry","ShaderMaterial","Color","Mesh","ShaderLib","cloneUniforms","WebGLBackground","renderer","cubemaps","state","objects","premultipliedAlpha","clearColor","clearAlpha","planeMesh","boxMesh","currentBackground","currentBackgroundVersion","currentTonemapping","render","renderList","scene","camera","forceClear","background","isScene","isTexture","get","xr","session","getSession","environmentBlendMode","setClear","isColor","autoClear","clear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","isWebGLCubeRenderTarget","mapping","undefined","name","uniforms","cube","vertexShader","fragmentShader","side","depthTest","depthWrite","fog","geometry","deleteAttribute","onBeforeRender","matrixWorld","copyPosition","Object","defineProperty","material","envMap","value","update","texture","flipEnvMap","_needsFlipEnvMap","version","toneMapping","needsUpdate","unshift","t2D","matrixAutoUpdate","updateMatrix","uvTransform","copy","matrix","color","alpha","buffers","r","g","b","getClearColor","setClearColor","set","getClearAlpha","setClearAlpha"],"mappings":"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","sourcesContent":["import { BackSide, FrontSide, CubeUVReflectionMapping } from '../../constants.js';\nimport { BoxBufferGeometry } from '../../geometries/BoxBufferGeometry.js';\nimport { PlaneBufferGeometry } from '../../geometries/PlaneBufferGeometry.js';\nimport { ShaderMaterial } from '../../materials/ShaderMaterial.js';\nimport { Color } from '../../math/Color.js';\nimport { Mesh } from '../../objects/Mesh.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { cloneUniforms } from '../shaders/UniformsUtils.js';\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = 0;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tif ( background.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t// TODO Deprecate\n\n\t\t\t\tbackground = background.texture;\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background._needsFlipEnvMap ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\n\nexport { WebGLBackground };\n"]},"metadata":{},"sourceType":"module"}