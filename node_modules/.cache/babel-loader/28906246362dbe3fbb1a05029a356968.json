{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n  constructor(min, max) {\n    Object.defineProperty(this, 'isBox3', {\n      value: true\n    });\n    this.min = min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n    this.max = max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n  }\n\n  set(min, max) {\n    this.min.copy(min);\n    this.max.copy(max);\n    return this;\n  }\n\n  setFromArray(array) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = array.length; i < l; i += 3) {\n      var x = array[i];\n      var y = array[i + 1];\n      var z = array[i + 2];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  }\n\n  setFromBufferAttribute(attribute) {\n    var minX = +Infinity;\n    var minY = +Infinity;\n    var minZ = +Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var maxZ = -Infinity;\n\n    for (var i = 0, l = attribute.count; i < l; i++) {\n      var x = attribute.getX(i);\n      var y = attribute.getY(i);\n      var z = attribute.getZ(i);\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (z < minZ) minZ = z;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      if (z > maxZ) maxZ = z;\n    }\n\n    this.min.set(minX, minY, minZ);\n    this.max.set(maxX, maxY, maxZ);\n    return this;\n  }\n\n  setFromPoints(points) {\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      this.expandByPoint(points[i]);\n    }\n\n    return this;\n  }\n\n  setFromCenterAndSize(center, size) {\n    var halfSize = _vector.copy(size).multiplyScalar(0.5);\n\n    this.min.copy(center).sub(halfSize);\n    this.max.copy(center).add(halfSize);\n    return this;\n  }\n\n  setFromObject(object) {\n    this.makeEmpty();\n    return this.expandByObject(object);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(box) {\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n    return this;\n  }\n\n  makeEmpty() {\n    this.min.x = this.min.y = this.min.z = +Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n    return this;\n  }\n\n  isEmpty() {\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n  }\n\n  getCenter(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getCenter() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n  }\n\n  getSize(target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getSize() target is now required');\n      target = new Vector3();\n    }\n\n    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n  }\n\n  expandByPoint(point) {\n    this.min.min(point);\n    this.max.max(point);\n    return this;\n  }\n\n  expandByVector(vector) {\n    this.min.sub(vector);\n    this.max.add(vector);\n    return this;\n  }\n\n  expandByScalar(scalar) {\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n    return this;\n  }\n\n  expandByObject(object) {\n    // Computes the world-axis-aligned bounding box of an object (including its children),\n    // accounting for both the object's, and children's, world transforms\n    object.updateWorldMatrix(false, false);\n    var geometry = object.geometry;\n\n    if (geometry !== undefined) {\n      if (geometry.boundingBox === null) {\n        geometry.computeBoundingBox();\n      }\n\n      _box.copy(geometry.boundingBox);\n\n      _box.applyMatrix4(object.matrixWorld);\n\n      this.union(_box);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      this.expandByObject(children[i]);\n    }\n\n    return this;\n  }\n\n  containsPoint(point) {\n    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n  }\n\n  containsBox(box) {\n    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n  }\n\n  getParameter(point, target) {\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n    if (target === undefined) {\n      console.warn('THREE.Box3: .getParameter() target is now required');\n      target = new Vector3();\n    }\n\n    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n  }\n\n  intersectsBox(box) {\n    // using 6 splitting planes to rule out intersections.\n    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n  }\n\n  intersectsSphere(sphere) {\n    // Find the point on the AABB closest to the sphere center.\n    this.clampPoint(sphere.center, _vector); // If that point is inside the sphere, the AABB and sphere intersect.\n\n    return _vector.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n\n  intersectsPlane(plane) {\n    // We compute the minimum and maximum dot product values. If those values\n    // are on the same side (back or front) of the plane, then there is no intersection.\n    var min, max;\n\n    if (plane.normal.x > 0) {\n      min = plane.normal.x * this.min.x;\n      max = plane.normal.x * this.max.x;\n    } else {\n      min = plane.normal.x * this.max.x;\n      max = plane.normal.x * this.min.x;\n    }\n\n    if (plane.normal.y > 0) {\n      min += plane.normal.y * this.min.y;\n      max += plane.normal.y * this.max.y;\n    } else {\n      min += plane.normal.y * this.max.y;\n      max += plane.normal.y * this.min.y;\n    }\n\n    if (plane.normal.z > 0) {\n      min += plane.normal.z * this.min.z;\n      max += plane.normal.z * this.max.z;\n    } else {\n      min += plane.normal.z * this.max.z;\n      max += plane.normal.z * this.min.z;\n    }\n\n    return min <= -plane.constant && max >= -plane.constant;\n  }\n\n  intersectsTriangle(triangle) {\n    if (this.isEmpty()) {\n      return false;\n    } // compute box center and extents\n\n\n    this.getCenter(_center);\n\n    _extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n    _v0.subVectors(triangle.a, _center);\n\n    _v1.subVectors(triangle.b, _center);\n\n    _v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n    _f0.subVectors(_v1, _v0);\n\n    _f1.subVectors(_v2, _v1);\n\n    _f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n    // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n    // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n    var axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // test 3 face normals from the aabb\n\n\n    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n      return false;\n    } // finally testing the face normal of the triangle\n    // use already existing triangle edge vectors here\n\n\n    _triangleNormal.crossVectors(_f0, _f1);\n\n    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n    return satForAxes(axes, _v0, _v1, _v2, _extents);\n  }\n\n  clampPoint(point, target) {\n    if (target === undefined) {\n      console.warn('THREE.Box3: .clampPoint() target is now required');\n      target = new Vector3();\n    }\n\n    return target.copy(point).clamp(this.min, this.max);\n  }\n\n  distanceToPoint(point) {\n    var clampedPoint = _vector.copy(point).clamp(this.min, this.max);\n\n    return clampedPoint.sub(point).length();\n  }\n\n  getBoundingSphere(target) {\n    if (target === undefined) {\n      console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n    }\n\n    this.getCenter(target.center);\n    target.radius = this.getSize(_vector).length() * 0.5;\n    return target;\n  }\n\n  intersect(box) {\n    this.min.max(box.min);\n    this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n    if (this.isEmpty()) this.makeEmpty();\n    return this;\n  }\n\n  union(box) {\n    this.min.min(box.min);\n    this.max.max(box.max);\n    return this;\n  }\n\n  applyMatrix4(matrix) {\n    // transform of empty box is an empty box.\n    if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n    this.setFromPoints(_points);\n    return this;\n  }\n\n  translate(offset) {\n    this.min.add(offset);\n    this.max.add(offset);\n    return this;\n  }\n\n  equals(box) {\n    return box.min.equals(this.min) && box.max.equals(this.max);\n  }\n\n}\n\nfunction satForAxes(axes, v0, v1, v2, extents) {\n  for (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n    _testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n    var r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n    var p0 = v0.dot(_testAxis);\n    var p1 = v1.dot(_testAxis);\n    var p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n      // points of the projected triangle are outside the projected half-length of the aabb\n      // the axis is seperating and we can exit\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\nvar _vector = /*@__PURE__*/new Vector3();\n\nvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\nvar _v0 = /*@__PURE__*/new Vector3();\n\nvar _v1 = /*@__PURE__*/new Vector3();\n\nvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\nvar _f0 = /*@__PURE__*/new Vector3();\n\nvar _f1 = /*@__PURE__*/new Vector3();\n\nvar _f2 = /*@__PURE__*/new Vector3();\n\nvar _center = /*@__PURE__*/new Vector3();\n\nvar _extents = /*@__PURE__*/new Vector3();\n\nvar _triangleNormal = /*@__PURE__*/new Vector3();\n\nvar _testAxis = /*@__PURE__*/new Vector3();\n\nexport { Box3 };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/Box3.js"],"names":["Vector3","Box3","constructor","min","max","Object","defineProperty","value","undefined","Infinity","set","copy","setFromArray","array","minX","minY","minZ","maxX","maxY","maxZ","i","l","length","x","y","z","setFromBufferAttribute","attribute","count","getX","getY","getZ","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","center","size","halfSize","_vector","multiplyScalar","sub","add","setFromObject","object","expandByObject","clone","box","isEmpty","getCenter","target","console","warn","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box","applyMatrix4","matrixWorld","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","radius","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","_center","_extents","_v0","a","_v1","b","_v2","c","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","crossVectors","clamp","distanceToPoint","clampedPoint","getBoundingSphere","error","intersect","matrix","_points","translate","offset","equals","v0","v1","v2","extents","j","_testAxis","fromArray","r","Math","abs","p0","dot","p1","p2"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min, max ) {\n\n\t\tObject.defineProperty( this, 'isBox3', { value: true } );\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box );\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\n\n\t\t}\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\n\nexport { Box3 };\n"]},"metadata":{},"sourceType":"module"}