{"ast":null,"code":"import _slicedToArray from \"/Users/sebringrose/Projects/theEmpire/website/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sebringrose/Projects/theEmpire/website/client/src/space.js\";\nimport React, { useRef, useMemo } from 'react';\nimport * as THREE from 'three/src/Three'; // A THREE.js React renderer, see: https://github.com/drcmda/react-three-fiber\n\nimport { useFrame } from 'react-three-fiber'; // A React animation lib, see: https://github.com/react-spring/react-spring\n\nimport { useSpring, animated } from 'react-spring/three';\nimport { Text } from 'drei';\n\nfunction Planet({\n  active,\n  setActive,\n  stage,\n  setStage\n}) {\n  var planet = useRef();\n  var theta = 0;\n  useFrame(() => {\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n    var r = THREE.Math.degToRad(theta += 0.1);\n    planet.current.rotation.set(planet.current.rotation._x, r, planet.current.rotation._z);\n  });\n\n  var _useSpring = useSpring({\n    pos: active ? [0, 0, 2] : [0, 0, 0],\n    scale: active ? [1.5, 1.5, 1.5] : [1.1, 1.1, 1.1],\n    rotation: active ? [0, THREE.Math.degToRad(180), 0] : [0, 0, 0],\n    config: {\n      mass: 100,\n      tension: 1000,\n      friction: 1000,\n      precision: 0.00001\n    }\n  }),\n      props = Object.assign({}, _useSpring);\n\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: planet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"theEmpire.dev\"), /*#__PURE__*/React.createElement(animated.mesh, {\n    onPointerClick: () => setStage(stage => stage++),\n    onPointerOver: e => setActive(true),\n    onPointerOut: e => setActive(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"icosahedronGeometry\", {\n    attach: \"geometry\",\n    args: [1, 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"red\",\n    wireframe: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  })));\n}\n\nfunction Stars({\n  stage\n}) {\n  var _useMemo = useMemo(() => {\n    var geo = new THREE.SphereBufferGeometry(1, 10, 10);\n    var mat = new THREE.MeshBasicMaterial({\n      color: new THREE.Color('white')\n    });\n    var coords = new Array(500).fill().map(i => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]);\n    return [geo, mat, vertices, coords];\n  }, []),\n      _useMemo2 = _slicedToArray(_useMemo, 4),\n      geo = _useMemo2[0],\n      mat = _useMemo2[1],\n      vertices = _useMemo2[2],\n      coords = _useMemo2[3];\n\n  return /*#__PURE__*/React.createElement(\"group\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, coords.map(([p1, p2, p3], i) => /*#__PURE__*/React.createElement(\"mesh\", {\n    key: i,\n    geometry: geo,\n    material: mat,\n    position: [p1, p2, p3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })));\n}\n\nvar Space = ({\n  active,\n  setActive,\n  setStage\n}) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ambientLight\", {\n  color: \"lightblue\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(\"pointLight\", {\n  color: \"white\",\n  intensity: 1,\n  position: [10, 10, 10],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Planet, {\n  active: active,\n  setActive: setActive,\n  setStage: setStage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Stars, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }\n}));\n\nexport default Space;","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/src/space.js"],"names":["React","useRef","useMemo","THREE","useFrame","useSpring","animated","Text","Planet","active","setActive","stage","setStage","planet","theta","r","Math","degToRad","current","rotation","set","_x","_z","pos","scale","config","mass","tension","friction","precision","props","e","Stars","geo","SphereBufferGeometry","mat","MeshBasicMaterial","color","Color","coords","Array","fill","map","i","random","vertices","p1","p2","p3","Space"],"mappings":"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","sourcesContent":["import React, { useRef, useMemo } from 'react'\nimport * as THREE from 'three/src/Three'\n// A THREE.js React renderer, see: https://github.com/drcmda/react-three-fiber\nimport { useFrame } from 'react-three-fiber'\n// A React animation lib, see: https://github.com/react-spring/react-spring\nimport { useSpring, animated } from 'react-spring/three'\nimport { Text } from 'drei'\n\nfunction Planet({ active, setActive, stage, setStage }) {\n    const planet = useRef()\n    let theta = 0\n\n    useFrame(() => {\n        // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\n        const r = THREE.Math.degToRad((theta += 0.1))\n        planet.current.rotation.set(planet.current.rotation._x, r, planet.current.rotation._z)\n    })\n\n    const { ...props } = useSpring({\n        pos: active ? [0, 0, 2] : [0, 0, 0],\n        scale: active ? [1.5, 1.5, 1.5] : [1.1, 1.1, 1.1],\n        rotation: active ? [0, THREE.Math.degToRad(180), 0] : [0, 0, 0],\n        config: { mass: 100, tension: 1000, friction: 1000, precision: 0.00001 }\n    })\n\n    return (\n        <group ref={planet}>\n        <Text>theEmpire.dev</Text>\n        <animated.mesh\n            onPointerClick={() => setStage((stage) => stage++)}\n            onPointerOver={(e) => setActive(true)}\n            onPointerOut={(e) => setActive(false)}\n        >\n            <icosahedronGeometry attach=\"geometry\" args={[1, 2]} />\n            <meshStandardMaterial attach=\"material\" color=\"red\" wireframe />\n        </animated.mesh>\n        </group>\n    )\n}\n\nfunction Stars({ stage }) {\n    const [geo, mat, vertices, coords] = useMemo(() => {\n        const geo = new THREE.SphereBufferGeometry(1, 10, 10)\n        const mat = new THREE.MeshBasicMaterial({ color: new THREE.Color('white') })\n        const coords = new Array(500).fill().map((i) => [Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400])\n        return [geo, mat, vertices, coords]\n    }, [])\n\n    return (\n        <group>\n        {coords.map(([p1, p2, p3], i) => (\n            <mesh key={i} geometry={geo} material={mat} position={[p1, p2, p3]} />\n        ))}\n        </group>\n    )\n}\n\nconst Space = ({ active, setActive, setStage }) => (\n    <>\n        <ambientLight color=\"lightblue\" />\n        <pointLight color=\"white\" intensity={1} position={[10, 10, 10]} />\n        <Planet active={active} setActive={setActive} setStage={setStage} />\n        <Stars />\n    </>\n)\n\nexport default Space\n"]},"metadata":{},"sourceType":"module"}