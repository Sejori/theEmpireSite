{"ast":null,"code":"import { BackSide } from '../../constants.js';\n\nfunction WebGLMaterials(properties) {\n  function refreshFogUniforms(uniforms, fog) {\n    uniforms.fogColor.value.copy(fog.color);\n\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n    if (material.isMeshBasicMaterial) {\n      refreshUniformsCommon(uniforms, material);\n    } else if (material.isMeshLambertMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsLambert(uniforms, material);\n    } else if (material.isMeshToonMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsToon(uniforms, material);\n    } else if (material.isMeshPhongMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsPhong(uniforms, material);\n    } else if (material.isMeshStandardMaterial) {\n      refreshUniformsCommon(uniforms, material);\n\n      if (material.isMeshPhysicalMaterial) {\n        refreshUniformsPhysical(uniforms, material);\n      } else {\n        refreshUniformsStandard(uniforms, material);\n      }\n    } else if (material.isMeshMatcapMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsMatcap(uniforms, material);\n    } else if (material.isMeshDepthMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDepth(uniforms, material);\n    } else if (material.isMeshDistanceMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsDistance(uniforms, material);\n    } else if (material.isMeshNormalMaterial) {\n      refreshUniformsCommon(uniforms, material);\n      refreshUniformsNormal(uniforms, material);\n    } else if (material.isLineBasicMaterial) {\n      refreshUniformsLine(uniforms, material);\n\n      if (material.isLineDashedMaterial) {\n        refreshUniformsDash(uniforms, material);\n      }\n    } else if (material.isPointsMaterial) {\n      refreshUniformsPoints(uniforms, material, pixelRatio, height);\n    } else if (material.isSpriteMaterial) {\n      refreshUniformsSprites(uniforms, material);\n    } else if (material.isShadowMaterial) {\n      uniforms.color.value.copy(material.color);\n      uniforms.opacity.value = material.opacity;\n    } else if (material.isShaderMaterial) {\n      material.uniformsNeedUpdate = false; // #15581\n    }\n  }\n\n  function refreshUniformsCommon(uniforms, material) {\n    uniforms.opacity.value = material.opacity;\n\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n\n    var envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.refractionRatio.value = material.refractionRatio;\n\n      var maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n      if (maxMipLevel !== undefined) {\n        uniforms.maxMipLevel.value = maxMipLevel;\n      }\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. displacementMap map\n    // 4. normal map\n    // 5. bump map\n    // 6. roughnessMap map\n    // 7. metalnessMap map\n    // 8. alphaMap map\n    // 9. emissiveMap map\n    // 10. clearcoat map\n    // 11. clearcoat normal map\n    // 12. clearcoat roughnessMap map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    } else if (material.clearcoatMap) {\n      uvScaleMap = material.clearcoatMap;\n    } else if (material.clearcoatNormalMap) {\n      uvScaleMap = material.clearcoatNormalMap;\n    } else if (material.clearcoatRoughnessMap) {\n      uvScaleMap = material.clearcoatRoughnessMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    } // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n\n    var uv2ScaleMap;\n\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * pixelRatio;\n    uniforms.scale.value = height * 0.5;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLambert(uniforms, material) {\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    var envMap = properties.get(material).envMap;\n\n    if (envMap) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material) {\n    refreshUniformsStandard(uniforms, material);\n    uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n    uniforms.clearcoat.value = material.clearcoat;\n    uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n    if (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n    if (material.clearcoatMap) {\n      uniforms.clearcoatMap.value = material.clearcoatMap;\n    }\n\n    if (material.clearcoatRoughnessMap) {\n      uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n    }\n\n    if (material.clearcoatNormalMap) {\n      uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n      uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n      if (material.side === BackSide) {\n        uniforms.clearcoatNormalScale.value.negate();\n      }\n    }\n\n    uniforms.transmission.value = material.transmission;\n\n    if (material.transmissionMap) {\n      uniforms.transmissionMap.value = material.transmissionMap;\n    }\n  }\n\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDepth(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDistance(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n\n  function refreshUniformsNormal(uniforms, material) {\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  return {\n    refreshFogUniforms: refreshFogUniforms,\n    refreshMaterialUniforms: refreshMaterialUniforms\n  };\n}\n\nexport { WebGLMaterials };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webgl/WebGLMaterials.js"],"names":["BackSide","WebGLMaterials","properties","refreshFogUniforms","uniforms","fog","fogColor","value","copy","color","isFog","fogNear","near","fogFar","far","isFogExp2","fogDensity","density","refreshMaterialUniforms","material","pixelRatio","height","isMeshBasicMaterial","refreshUniformsCommon","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshStandardMaterial","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","isMeshDistanceMaterial","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","opacity","isShaderMaterial","uniformsNeedUpdate","diffuse","emissive","multiplyScalar","emissiveIntensity","map","alphaMap","specularMap","envMap","get","flipEnvMap","isCubeTexture","_needsFlipEnvMap","reflectivity","refractionRatio","maxMipLevel","__maxMipLevel","undefined","lightMap","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","displacementMap","normalMap","bumpMap","roughnessMap","metalnessMap","emissiveMap","clearcoatMap","clearcoatNormalMap","clearcoatRoughnessMap","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","dashSize","totalSize","gapSize","scale","size","rotation","specular","shininess","Math","max","bumpScale","side","normalScale","negate","displacementScale","displacementBias","gradientMap","roughness","metalness","envMapIntensity","clearcoat","clearcoatRoughness","sheen","clearcoatNormalScale","transmission","transmissionMap","matcap","referencePosition","nearDistance","farDistance"],"mappings":"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","sourcesContent":["import { BackSide } from '../../constants.js';\n\nfunction WebGLMaterials( properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material );\n\n\t\t\t} else {\n\n\t\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap._needsFlipEnvMap ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tconst maxMipLevel = properties.get( envMap ).__maxMipLevel;\n\n\t\t\tif ( maxMipLevel !== undefined ) {\n\n\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\tif ( material.sheen ) uniforms.sheen.value.copy( material.sheen );\n\n\t\tif ( material.clearcoatMap ) {\n\n\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t}\n\n\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t}\n\n\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.transmission.value = material.transmission;\n\n\t\tif ( material.transmissionMap ) {\n\n\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nexport { WebGLMaterials };\n"]},"metadata":{},"sourceType":"module"}