{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Color } from '../math/Color.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { OctahedronBufferGeometry } from '../geometries/OctahedronBufferGeometry.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\n\nvar _vector = /*@__PURE__*/new Vector3();\n\nvar _color1 = /*@__PURE__*/new Color();\n\nvar _color2 = /*@__PURE__*/new Color();\n\nclass HemisphereLightHelper extends Object3D {\n  constructor(light, size, color) {\n    super();\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    var geometry = new OctahedronBufferGeometry(size);\n    geometry.rotateY(Math.PI * 0.5);\n    this.material = new MeshBasicMaterial({\n      wireframe: true,\n      fog: false,\n      toneMapped: false\n    });\n    if (this.color === undefined) this.material.vertexColors = true;\n    var position = geometry.getAttribute('position');\n    var colors = new Float32Array(position.count * 3);\n    geometry.setAttribute('color', new BufferAttribute(colors, 3));\n    this.add(new Mesh(geometry, this.material));\n    this.update();\n  }\n\n  dispose() {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  }\n\n  update() {\n    var mesh = this.children[0];\n\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      var colors = mesh.geometry.getAttribute('color');\n\n      _color1.copy(this.light.color);\n\n      _color2.copy(this.light.groundColor);\n\n      for (var i = 0, l = colors.count; i < l; i++) {\n        var color = i < l / 2 ? _color1 : _color2;\n        colors.setXYZ(i, color.r, color.g, color.b);\n      }\n\n      colors.needsUpdate = true;\n    }\n\n    mesh.lookAt(_vector.setFromMatrixPosition(this.light.matrixWorld).negate());\n  }\n\n}\n\nexport { HemisphereLightHelper };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/helpers/HemisphereLightHelper.js"],"names":["Vector3","Color","Object3D","Mesh","MeshBasicMaterial","OctahedronBufferGeometry","BufferAttribute","_vector","_color1","_color2","HemisphereLightHelper","constructor","light","size","color","updateMatrixWorld","matrix","matrixWorld","matrixAutoUpdate","geometry","rotateY","Math","PI","material","wireframe","fog","toneMapped","undefined","vertexColors","position","getAttribute","colors","Float32Array","count","setAttribute","add","update","dispose","children","mesh","set","copy","groundColor","i","l","setXYZ","r","g","b","needsUpdate","lookAt","setFromMatrixPosition","negate"],"mappings":"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","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Color } from '../math/Color.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Mesh } from '../objects/Mesh.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { OctahedronBufferGeometry } from '../geometries/OctahedronBufferGeometry.js';\nimport { BufferAttribute } from '../core/BufferAttribute.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\n\nexport { HemisphereLightHelper };\n"]},"metadata":{},"sourceType":"module"}