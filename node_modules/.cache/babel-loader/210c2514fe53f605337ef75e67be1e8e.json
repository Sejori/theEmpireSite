{"ast":null,"code":"import { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\nimport { WebXRController } from './WebXRController.js';\n\nfunction WebXRManager(renderer, gl) {\n  var scope = this;\n  var session = null;\n  var framebufferScaleFactor = 1.0;\n  var referenceSpace = null;\n  var referenceSpaceType = 'local-floor';\n  var pose = null;\n  var controllers = [];\n  var inputSourcesMap = new Map(); //\n\n  var cameraL = new PerspectiveCamera();\n  cameraL.layers.enable(1);\n  cameraL.viewport = new Vector4();\n  var cameraR = new PerspectiveCamera();\n  cameraR.layers.enable(2);\n  cameraR.viewport = new Vector4();\n  var cameras = [cameraL, cameraR];\n  var cameraVR = new ArrayCamera();\n  cameraVR.layers.enable(1);\n  cameraVR.layers.enable(2);\n  var _currentDepthNear = null;\n  var _currentDepthFar = null; //\n\n  this.enabled = false;\n  this.isPresenting = false;\n\n  this.getController = function (index) {\n    var controller = controllers[index];\n\n    if (controller === undefined) {\n      controller = new WebXRController();\n      controllers[index] = controller;\n    }\n\n    return controller.getTargetRaySpace();\n  };\n\n  this.getControllerGrip = function (index) {\n    var controller = controllers[index];\n\n    if (controller === undefined) {\n      controller = new WebXRController();\n      controllers[index] = controller;\n    }\n\n    return controller.getGripSpace();\n  };\n\n  this.getHand = function (index) {\n    var controller = controllers[index];\n\n    if (controller === undefined) {\n      controller = new WebXRController();\n      controllers[index] = controller;\n    }\n\n    return controller.getHandSpace();\n  }; //\n\n\n  function onSessionEvent(event) {\n    var controller = inputSourcesMap.get(event.inputSource);\n\n    if (controller) {\n      controller.dispatchEvent({\n        type: event.type,\n        data: event.inputSource\n      });\n    }\n  }\n\n  function onSessionEnd() {\n    inputSourcesMap.forEach(function (controller, inputSource) {\n      controller.disconnect(inputSource);\n    });\n    inputSourcesMap.clear(); //\n\n    renderer.setFramebuffer(null);\n    renderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n    animation.stop();\n    scope.isPresenting = false;\n    scope.dispatchEvent({\n      type: 'sessionend'\n    });\n  }\n\n  function onRequestReferenceSpace(value) {\n    referenceSpace = value;\n    animation.setContext(session);\n    animation.start();\n    scope.isPresenting = true;\n    scope.dispatchEvent({\n      type: 'sessionstart'\n    });\n  }\n\n  this.setFramebufferScaleFactor = function (value) {\n    framebufferScaleFactor = value;\n\n    if (scope.isPresenting === true) {\n      console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n    }\n  };\n\n  this.setReferenceSpaceType = function (value) {\n    referenceSpaceType = value;\n\n    if (scope.isPresenting === true) {\n      console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n    }\n  };\n\n  this.getReferenceSpace = function () {\n    return referenceSpace;\n  };\n\n  this.getSession = function () {\n    return session;\n  };\n\n  this.setSession = function (value) {\n    session = value;\n\n    if (session !== null) {\n      session.addEventListener('select', onSessionEvent);\n      session.addEventListener('selectstart', onSessionEvent);\n      session.addEventListener('selectend', onSessionEvent);\n      session.addEventListener('squeeze', onSessionEvent);\n      session.addEventListener('squeezestart', onSessionEvent);\n      session.addEventListener('squeezeend', onSessionEvent);\n      session.addEventListener('end', onSessionEnd);\n      var attributes = gl.getContextAttributes();\n\n      if (attributes.xrCompatible !== true) {\n        gl.makeXRCompatible();\n      }\n\n      var layerInit = {\n        antialias: attributes.antialias,\n        alpha: attributes.alpha,\n        depth: attributes.depth,\n        stencil: attributes.stencil,\n        framebufferScaleFactor: framebufferScaleFactor\n      }; // eslint-disable-next-line no-undef\n\n      var baseLayer = new XRWebGLLayer(session, gl, layerInit);\n      session.updateRenderState({\n        baseLayer: baseLayer\n      });\n      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n      session.addEventListener('inputsourceschange', updateInputSources);\n    }\n  };\n\n  function updateInputSources(event) {\n    var inputSources = session.inputSources; // Assign inputSources to available controllers\n\n    for (var i = 0; i < controllers.length; i++) {\n      inputSourcesMap.set(inputSources[i], controllers[i]);\n    } // Notify disconnected\n\n\n    for (var _i = 0; _i < event.removed.length; _i++) {\n      var inputSource = event.removed[_i];\n      var controller = inputSourcesMap.get(inputSource);\n\n      if (controller) {\n        controller.dispatchEvent({\n          type: 'disconnected',\n          data: inputSource\n        });\n        inputSourcesMap.delete(inputSource);\n      }\n    } // Notify connected\n\n\n    for (var _i2 = 0; _i2 < event.added.length; _i2++) {\n      var _inputSource = event.added[_i2];\n\n      var _controller = inputSourcesMap.get(_inputSource);\n\n      if (_controller) {\n        _controller.dispatchEvent({\n          type: 'connected',\n          data: _inputSource\n        });\n      }\n    }\n  } //\n\n\n  var cameraLPos = new Vector3();\n  var cameraRPos = new Vector3();\n  /**\n   * Assumes 2 cameras that are parallel and share an X-axis, and that\n   * the cameras' projection and world matrices have already been set.\n   * And that near and far planes are identical for both cameras.\n   * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n   */\n\n  function setProjectionFromUnion(camera, cameraL, cameraR) {\n    cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n    cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n    var ipd = cameraLPos.distanceTo(cameraRPos);\n    var projL = cameraL.projectionMatrix.elements;\n    var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n    // most likely identical top and bottom frustum extents.\n    // Use the left camera for these values.\n\n    var near = projL[14] / (projL[10] - 1);\n    var far = projL[14] / (projL[10] + 1);\n    var topFov = (projL[9] + 1) / projL[5];\n    var bottomFov = (projL[9] - 1) / projL[5];\n    var leftFov = (projL[8] - 1) / projL[0];\n    var rightFov = (projR[8] + 1) / projR[0];\n    var left = near * leftFov;\n    var right = near * rightFov; // Calculate the new camera's position offset from the\n    // left camera. xOffset should be roughly half `ipd`.\n\n    var zOffset = ipd / (-leftFov + rightFov);\n    var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n    cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n    camera.translateX(xOffset);\n    camera.translateZ(zOffset);\n    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld); // Find the union of the frustum values of the cameras and scale\n    // the values so that the near plane's position does not change in world space,\n    // although must now be relative to the new union camera.\n\n    var near2 = near + zOffset;\n    var far2 = far + zOffset;\n    var left2 = left - xOffset;\n    var right2 = right + (ipd - xOffset);\n    var top2 = topFov * far / far2 * near2;\n    var bottom2 = bottomFov * far / far2 * near2;\n    camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n  }\n\n  function updateCamera(camera, parent) {\n    if (parent === null) {\n      camera.matrixWorld.copy(camera.matrix);\n    } else {\n      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n    }\n\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n  }\n\n  this.getCamera = function (camera) {\n    cameraVR.near = cameraR.near = cameraL.near = camera.near;\n    cameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n    if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n      // Note that the new renderState won't apply until the next frame. See #18320\n      session.updateRenderState({\n        depthNear: cameraVR.near,\n        depthFar: cameraVR.far\n      });\n      _currentDepthNear = cameraVR.near;\n      _currentDepthFar = cameraVR.far;\n    }\n\n    var parent = camera.parent;\n    var cameras = cameraVR.cameras;\n    updateCamera(cameraVR, parent);\n\n    for (var i = 0; i < cameras.length; i++) {\n      updateCamera(cameras[i], parent);\n    } // update camera and its children\n\n\n    camera.matrixWorld.copy(cameraVR.matrixWorld);\n    var children = camera.children;\n\n    for (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n      children[_i3].updateMatrixWorld(true);\n    } // update projection matrix for proper view frustum culling\n\n\n    if (cameras.length === 2) {\n      setProjectionFromUnion(cameraVR, cameraL, cameraR);\n    } else {\n      // assume single camera setup (AR)\n      cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n    }\n\n    return cameraVR;\n  }; // Animation Loop\n\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time, frame) {\n    pose = frame.getViewerPose(referenceSpace);\n\n    if (pose !== null) {\n      var views = pose.views;\n      var baseLayer = session.renderState.baseLayer;\n      renderer.setFramebuffer(baseLayer.framebuffer);\n      var cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n      if (views.length !== cameraVR.cameras.length) {\n        cameraVR.cameras.length = 0;\n        cameraVRNeedsUpdate = true;\n      }\n\n      for (var i = 0; i < views.length; i++) {\n        var view = views[i];\n        var viewport = baseLayer.getViewport(view);\n        var camera = cameras[i];\n        camera.matrix.fromArray(view.transform.matrix);\n        camera.projectionMatrix.fromArray(view.projectionMatrix);\n        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        if (i === 0) {\n          cameraVR.matrix.copy(camera.matrix);\n        }\n\n        if (cameraVRNeedsUpdate === true) {\n          cameraVR.cameras.push(camera);\n        }\n      }\n    } //\n\n\n    var inputSources = session.inputSources;\n\n    for (var _i4 = 0; _i4 < controllers.length; _i4++) {\n      var controller = controllers[_i4];\n      var inputSource = inputSources[_i4];\n      controller.update(inputSource, frame, referenceSpace);\n    }\n\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n  };\n\n  this.dispose = function () {};\n}\n\nObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\nexport { WebXRManager };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/renderers/webxr/WebXRManager.js"],"names":["ArrayCamera","EventDispatcher","PerspectiveCamera","Vector3","Vector4","WebGLAnimation","WebXRController","WebXRManager","renderer","gl","scope","session","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","layers","enable","viewport","cameraR","cameras","cameraVR","_currentDepthNear","_currentDepthFar","enabled","isPresenting","getController","index","controller","undefined","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","onSessionEvent","event","get","inputSource","dispatchEvent","type","data","onSessionEnd","forEach","disconnect","clear","setFramebuffer","setRenderTarget","getRenderTarget","animation","stop","onRequestReferenceSpace","value","setContext","start","setFramebufferScaleFactor","console","warn","setReferenceSpaceType","getReferenceSpace","getSession","setSession","addEventListener","attributes","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","alpha","depth","stencil","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","updateInputSources","inputSources","i","length","set","removed","delete","added","cameraLPos","cameraRPos","setProjectionFromUnion","camera","setFromMatrixPosition","matrixWorld","ipd","distanceTo","projL","projectionMatrix","elements","projR","near","far","topFov","bottomFov","leftFov","rightFov","left","right","zOffset","xOffset","decompose","position","quaternion","scale","translateX","translateZ","compose","matrixWorldInverse","getInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","updateCamera","parent","copy","matrix","multiplyMatrices","getCamera","depthNear","depthFar","children","l","updateMatrixWorld","onAnimationFrameCallback","onAnimationFrame","time","frame","getViewerPose","views","renderState","framebuffer","cameraVRNeedsUpdate","view","getViewport","fromArray","transform","x","y","width","height","push","update","setAnimationLoop","callback","dispose","Object","assign","prototype"],"mappings":"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","sourcesContent":["import { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\nimport { WebXRController } from './WebXRController.js';\n\nfunction WebXRManager( renderer, gl ) {\n\n\tconst scope = this;\n\n\tlet session = null;\n\n\tlet framebufferScaleFactor = 1.0;\n\n\tlet referenceSpace = null;\n\tlet referenceSpaceType = 'local-floor';\n\n\tlet pose = null;\n\n\tconst controllers = [];\n\tconst inputSourcesMap = new Map();\n\n\t//\n\n\tconst cameraL = new PerspectiveCamera();\n\tcameraL.layers.enable( 1 );\n\tcameraL.viewport = new Vector4();\n\n\tconst cameraR = new PerspectiveCamera();\n\tcameraR.layers.enable( 2 );\n\tcameraR.viewport = new Vector4();\n\n\tconst cameras = [ cameraL, cameraR ];\n\n\tconst cameraVR = new ArrayCamera();\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\tlet _currentDepthNear = null;\n\tlet _currentDepthFar = null;\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.isPresenting = false;\n\n\tthis.getController = function ( index ) {\n\n\t\tlet controller = controllers[ index ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new WebXRController();\n\t\t\tcontrollers[ index ] = controller;\n\n\t\t}\n\n\t\treturn controller.getTargetRaySpace();\n\n\t};\n\n\tthis.getControllerGrip = function ( index ) {\n\n\t\tlet controller = controllers[ index ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new WebXRController();\n\t\t\tcontrollers[ index ] = controller;\n\n\t\t}\n\n\t\treturn controller.getGripSpace();\n\n\t};\n\n\tthis.getHand = function ( index ) {\n\n\t\tlet controller = controllers[ index ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = new WebXRController();\n\t\t\tcontrollers[ index ] = controller;\n\n\t\t}\n\n\t\treturn controller.getHandSpace();\n\n\t};\n\n\t//\n\n\tfunction onSessionEvent( event ) {\n\n\t\tconst controller = inputSourcesMap.get( event.inputSource );\n\n\t\tif ( controller ) {\n\n\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t}\n\n\t}\n\n\tfunction onSessionEnd() {\n\n\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\tcontroller.disconnect( inputSource );\n\n\t\t} );\n\n\t\tinputSourcesMap.clear();\n\n\t\t//\n\n\t\trenderer.setFramebuffer( null );\n\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\tanimation.stop();\n\n\t\tscope.isPresenting = false;\n\n\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t}\n\n\tfunction onRequestReferenceSpace( value ) {\n\n\t\treferenceSpace = value;\n\n\t\tanimation.setContext( session );\n\t\tanimation.start();\n\n\t\tscope.isPresenting = true;\n\n\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t}\n\n\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\tframebufferScaleFactor = value;\n\n\t\tif ( scope.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t}\n\n\t};\n\n\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\treferenceSpaceType = value;\n\n\t\tif ( scope.isPresenting === true ) {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t}\n\n\t};\n\n\tthis.getReferenceSpace = function () {\n\n\t\treturn referenceSpace;\n\n\t};\n\n\tthis.getSession = function () {\n\n\t\treturn session;\n\n\t};\n\n\tthis.setSession = function ( value ) {\n\n\t\tsession = value;\n\n\t\tif ( session !== null ) {\n\n\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\tconst attributes = gl.getContextAttributes();\n\n\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\tgl.makeXRCompatible();\n\n\t\t\t}\n\n\t\t\tconst layerInit = {\n\t\t\t\tantialias: attributes.antialias,\n\t\t\t\talpha: attributes.alpha,\n\t\t\t\tdepth: attributes.depth,\n\t\t\t\tstencil: attributes.stencil,\n\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t};\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tconst baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t//\n\n\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t}\n\n\t};\n\n\tfunction updateInputSources( event ) {\n\n\t\tconst inputSources = session.inputSources;\n\n\t\t// Assign inputSources to available controllers\n\n\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t}\n\n\t\t// Notify disconnected\n\n\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\tconst inputSource = event.removed[ i ];\n\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Notify connected\n\n\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\tconst inputSource = event.added[ i ];\n\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tconst cameraLPos = new Vector3();\n\tconst cameraRPos = new Vector3();\n\n\t/**\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t * the cameras' projection and world matrices have already been set.\n\t * And that near and far planes are identical for both cameras.\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t */\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t// VR systems will have identical far and near planes, and\n\t\t// most likely identical top and bottom frustum extents.\n\t\t// Use the left camera for these values.\n\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\tconst left = near * leftFov;\n\t\tconst right = near * rightFov;\n\n\t\t// Calculate the new camera's position offset from the\n\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t// TODO: Better way to apply this offset?\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.translateX( xOffset );\n\t\tcamera.translateZ( zOffset );\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tconst near2 = near + zOffset;\n\t\tconst far2 = far + zOffset;\n\t\tconst left2 = left - xOffset;\n\t\tconst right2 = right + ( ipd - xOffset );\n\t\tconst top2 = topFov * far / far2 * near2;\n\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t}\n\n\tfunction updateCamera( camera, parent ) {\n\n\t\tif ( parent === null ) {\n\n\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t} else {\n\n\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t}\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t}\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\tsession.updateRenderState( {\n\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\tdepthFar: cameraVR.far\n\t\t\t} );\n\n\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t}\n\n\t\tconst parent = camera.parent;\n\t\tconst cameras = cameraVR.cameras;\n\n\t\tupdateCamera( cameraVR, parent );\n\n\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t}\n\n\t\t// update camera and its children\n\n\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\tconst children = camera.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t}\n\n\t\t// update projection matrix for proper view frustum culling\n\n\t\tif ( cameras.length === 2 ) {\n\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t} else {\n\n\t\t\t// assume single camera setup (AR)\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t}\n\n\t\treturn cameraVR;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\tif ( pose !== null ) {\n\n\t\t\tconst views = pose.views;\n\t\t\tconst baseLayer = session.renderState.baseLayer;\n\n\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\tconst view = views[ i ];\n\t\t\t\tconst viewport = baseLayer.getViewport( view );\n\n\t\t\t\tconst camera = cameras[ i ];\n\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst inputSources = session.inputSources;\n\n\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tconst controller = controllers[ i ];\n\t\t\tconst inputSource = inputSources[ i ];\n\n\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t}\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\n\t};\n\n\tthis.dispose = function () {};\n\n}\n\nObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\nexport { WebXRManager };\n"]},"metadata":{},"sourceType":"module"}