{"ast":null,"code":"import { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction SplineCurve(points) {\n  Curve.call(this);\n  this.type = 'SplineCurve';\n  this.points = points || [];\n}\n\nSplineCurve.prototype = Object.create(Curve.prototype);\nSplineCurve.prototype.constructor = SplineCurve;\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector2();\n  var points = this.points;\n  var p = (points.length - 1) * t;\n  var intPoint = Math.floor(p);\n  var weight = p - intPoint;\n  var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n  var p1 = points[intPoint];\n  var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n  var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n  point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n  return point;\n};\n\nSplineCurve.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.points = [];\n\n  for (var i = 0, l = source.points.length; i < l; i++) {\n    var point = source.points[i];\n    this.points.push(point.clone());\n  }\n\n  return this;\n};\n\nSplineCurve.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.points = [];\n\n  for (var i = 0, l = this.points.length; i < l; i++) {\n    var point = this.points[i];\n    data.points.push(point.toArray());\n  }\n\n  return data;\n};\n\nSplineCurve.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.points = [];\n\n  for (var i = 0, l = json.points.length; i < l; i++) {\n    var point = json.points[i];\n    this.points.push(new Vector2().fromArray(point));\n  }\n\n  return this;\n};\n\nexport { SplineCurve };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/extras/curves/SplineCurve.js"],"names":["Curve","CatmullRom","Vector2","SplineCurve","points","call","type","prototype","Object","create","constructor","isSplineCurve","getPoint","t","optionalTarget","point","p","length","intPoint","Math","floor","weight","p0","p1","p2","p3","set","x","y","copy","source","i","l","push","clone","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\nimport { CatmullRom } from '../core/Interpolations.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction SplineCurve( points ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'SplineCurve';\n\n\tthis.points = points || [];\n\n}\n\nSplineCurve.prototype = Object.create( Curve.prototype );\nSplineCurve.prototype.constructor = SplineCurve;\n\nSplineCurve.prototype.isSplineCurve = true;\n\nSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tconst point = optionalTarget || new Vector2();\n\n\tconst points = this.points;\n\tconst p = ( points.length - 1 ) * t;\n\n\tconst intPoint = Math.floor( p );\n\tconst weight = p - intPoint;\n\n\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\tconst p1 = points[ intPoint ];\n\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\tpoint.set(\n\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t);\n\n\treturn point;\n\n};\n\nSplineCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.points = [];\n\n\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\tconst point = source.points[ i ];\n\n\t\tthis.points.push( point.clone() );\n\n\t}\n\n\treturn this;\n\n};\n\nSplineCurve.prototype.toJSON = function () {\n\n\tconst data = Curve.prototype.toJSON.call( this );\n\n\tdata.points = [];\n\n\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\tconst point = this.points[ i ];\n\t\tdata.points.push( point.toArray() );\n\n\t}\n\n\treturn data;\n\n};\n\nSplineCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.points = [];\n\n\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\tconst point = json.points[ i ];\n\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t}\n\n\treturn this;\n\n};\n\n\nexport { SplineCurve };\n"]},"metadata":{},"sourceType":"module"}