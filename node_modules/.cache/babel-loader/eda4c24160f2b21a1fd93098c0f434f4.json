{"ast":null,"code":"import { Vector3 } from './Vector3.js';\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n  constructor() {\n    Object.defineProperty(this, 'isSphericalHarmonics3', {\n      value: true\n    });\n    this.coefficients = [];\n\n    for (var i = 0; i < 9; i++) {\n      this.coefficients.push(new Vector3());\n    }\n  }\n\n  set(coefficients) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].copy(coefficients[i]);\n    }\n\n    return this;\n  }\n\n  zero() {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].set(0, 0, 0);\n    }\n\n    return this;\n  } // get the radiance in the direction of the normal\n  // target is a Vector3\n\n\n  getAt(normal, target) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z;\n    var coeff = this.coefficients; // band 0\n\n    target.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n    target.addScaledVector(coeff[1], 0.488603 * y);\n    target.addScaledVector(coeff[2], 0.488603 * z);\n    target.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n    target.addScaledVector(coeff[4], 1.092548 * (x * y));\n    target.addScaledVector(coeff[5], 1.092548 * (y * z));\n    target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n    target.addScaledVector(coeff[7], 1.092548 * (x * z));\n    target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n    return target;\n  } // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n  // target is a Vector3\n  // https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\n\n  getIrradianceAt(normal, target) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z;\n    var coeff = this.coefficients; // band 0\n\n    target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n    // band 1\n\n    target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n    target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n    target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n    target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n    target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n    target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n    target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n    target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n    return target;\n  }\n\n  add(sh) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].add(sh.coefficients[i]);\n    }\n\n    return this;\n  }\n\n  addScaledSH(sh, s) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].addScaledVector(sh.coefficients[i], s);\n    }\n\n    return this;\n  }\n\n  scale(s) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].multiplyScalar(s);\n    }\n\n    return this;\n  }\n\n  lerp(sh, alpha) {\n    for (var i = 0; i < 9; i++) {\n      this.coefficients[i].lerp(sh.coefficients[i], alpha);\n    }\n\n    return this;\n  }\n\n  equals(sh) {\n    for (var i = 0; i < 9; i++) {\n      if (!this.coefficients[i].equals(sh.coefficients[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  copy(sh) {\n    return this.set(sh.coefficients);\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  fromArray(array, offset) {\n    if (offset === undefined) offset = 0;\n    var coefficients = this.coefficients;\n\n    for (var i = 0; i < 9; i++) {\n      coefficients[i].fromArray(array, offset + i * 3);\n    }\n\n    return this;\n  }\n\n  toArray(array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    var coefficients = this.coefficients;\n\n    for (var i = 0; i < 9; i++) {\n      coefficients[i].toArray(array, offset + i * 3);\n    }\n\n    return array;\n  } // evaluate the basis functions\n  // shBasis is an Array[ 9 ]\n\n\n  static getBasisAt(normal, shBasis) {\n    // normal is assumed to be unit length\n    var x = normal.x,\n        y = normal.y,\n        z = normal.z; // band 0\n\n    shBasis[0] = 0.282095; // band 1\n\n    shBasis[1] = 0.488603 * y;\n    shBasis[2] = 0.488603 * z;\n    shBasis[3] = 0.488603 * x; // band 2\n\n    shBasis[4] = 1.092548 * x * y;\n    shBasis[5] = 1.092548 * y * z;\n    shBasis[6] = 0.315392 * (3 * z * z - 1);\n    shBasis[7] = 1.092548 * x * z;\n    shBasis[8] = 0.546274 * (x * x - y * y);\n  }\n\n}\n\nexport { SphericalHarmonics3 };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/math/SphericalHarmonics3.js"],"names":["Vector3","SphericalHarmonics3","constructor","Object","defineProperty","value","coefficients","i","push","set","copy","zero","getAt","normal","target","x","y","z","coeff","multiplyScalar","addScaledVector","getIrradianceAt","add","sh","addScaledSH","s","scale","lerp","alpha","equals","clone","fromArray","array","offset","undefined","toArray","getBasisAt","shBasis"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tObject.defineProperty( this, 'isSphericalHarmonics3', { value: true } );\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\n\nexport { SphericalHarmonics3 };\n"]},"metadata":{},"sourceType":"module"}