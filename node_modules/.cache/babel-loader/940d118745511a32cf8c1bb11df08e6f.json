{"ast":null,"code":"import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\nimport { MathUtils } from '../math/MathUtils.js';\n/**\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  reflectivity: <float>,\n *  ior: <float>,\n *\n *  sheen: <Color>,\n *\n *  transmission: <float>,\n *  transmissionMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshPhysicalMaterial(parameters) {\n  MeshStandardMaterial.call(this);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.type = 'MeshPhysicalMaterial';\n  this.clearcoat = 0.0;\n  this.clearcoatMap = null;\n  this.clearcoatRoughness = 0.0;\n  this.clearcoatRoughnessMap = null;\n  this.clearcoatNormalScale = new Vector2(1, 1);\n  this.clearcoatNormalMap = null;\n  this.reflectivity = 0.5; // maps to F0 = 0.04\n\n  Object.defineProperty(this, 'ior', {\n    get: function get() {\n      return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n    },\n    set: function set(ior) {\n      this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n    }\n  });\n  this.sheen = null; // null will disable sheen bsdf\n\n  this.transmission = 0.0;\n  this.transmissionMap = null;\n  this.setValues(parameters);\n}\n\nMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function (source) {\n  MeshStandardMaterial.prototype.copy.call(this, source);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.clearcoat = source.clearcoat;\n  this.clearcoatMap = source.clearcoatMap;\n  this.clearcoatRoughness = source.clearcoatRoughness;\n  this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n  this.clearcoatNormalMap = source.clearcoatNormalMap;\n  this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n  this.reflectivity = source.reflectivity;\n\n  if (source.sheen) {\n    this.sheen = (this.sheen || new Color()).copy(source.sheen);\n  } else {\n    this.sheen = null;\n  }\n\n  this.transmission = source.transmission;\n  this.transmissionMap = source.transmissionMap;\n  return this;\n};\n\nexport { MeshPhysicalMaterial };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/materials/MeshPhysicalMaterial.js"],"names":["Vector2","MeshStandardMaterial","Color","MathUtils","MeshPhysicalMaterial","parameters","call","defines","type","clearcoat","clearcoatMap","clearcoatRoughness","clearcoatRoughnessMap","clearcoatNormalScale","clearcoatNormalMap","reflectivity","Object","defineProperty","get","set","ior","clamp","sheen","transmission","transmissionMap","setValues","prototype","create","constructor","isMeshPhysicalMaterial","copy","source"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,oBAAT,CAA+BC,UAA/B,EAA4C;AAE3CJ,EAAAA,oBAAoB,CAACK,IAArB,CAA2B,IAA3B;AAEA,OAAKC,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKC,IAAL,GAAY,sBAAZ;AAEA,OAAKC,SAAL,GAAiB,GAAjB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,kBAAL,GAA0B,GAA1B;AACA,OAAKC,qBAAL,GAA6B,IAA7B;AACA,OAAKC,oBAAL,GAA4B,IAAIb,OAAJ,CAAa,CAAb,EAAgB,CAAhB,CAA5B;AACA,OAAKc,kBAAL,GAA0B,IAA1B;AAEA,OAAKC,YAAL,GAAoB,GAApB,CApB2C,CAoBlB;;AAEzBC,EAAAA,MAAM,CAACC,cAAP,CAAuB,IAAvB,EAA6B,KAA7B,EAAoC;AACnCC,IAAAA,GAAG,EAAE,eAAY;AAEhB,aAAO,CAAE,IAAI,MAAM,KAAKH,YAAjB,KAAoC,IAAI,MAAM,KAAKA,YAAnD,CAAP;AAEA,KALkC;AAMnCI,IAAAA,GAAG,EAAE,aAAWC,GAAX,EAAiB;AAErB,WAAKL,YAAL,GAAoBZ,SAAS,CAACkB,KAAV,CAAiB,OAAQD,GAAG,GAAG,CAAd,KAAsBA,GAAG,GAAG,CAA5B,CAAjB,EAAkD,CAAlD,EAAqD,CAArD,CAApB;AAEA;AAVkC,GAApC;AAaA,OAAKE,KAAL,GAAa,IAAb,CAnC2C,CAmCxB;;AAEnB,OAAKC,YAAL,GAAoB,GAApB;AACA,OAAKC,eAAL,GAAuB,IAAvB;AAEA,OAAKC,SAAL,CAAgBpB,UAAhB;AAEA;;AAEDD,oBAAoB,CAACsB,SAArB,GAAiCV,MAAM,CAACW,MAAP,CAAe1B,oBAAoB,CAACyB,SAApC,CAAjC;AACAtB,oBAAoB,CAACsB,SAArB,CAA+BE,WAA/B,GAA6CxB,oBAA7C;AAEAA,oBAAoB,CAACsB,SAArB,CAA+BG,sBAA/B,GAAwD,IAAxD;;AAEAzB,oBAAoB,CAACsB,SAArB,CAA+BI,IAA/B,GAAsC,UAAWC,MAAX,EAAoB;AAEzD9B,EAAAA,oBAAoB,CAACyB,SAArB,CAA+BI,IAA/B,CAAoCxB,IAApC,CAA0C,IAA1C,EAAgDyB,MAAhD;AAEA,OAAKxB,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKE,SAAL,GAAiBsB,MAAM,CAACtB,SAAxB;AACA,OAAKC,YAAL,GAAoBqB,MAAM,CAACrB,YAA3B;AACA,OAAKC,kBAAL,GAA0BoB,MAAM,CAACpB,kBAAjC;AACA,OAAKC,qBAAL,GAA6BmB,MAAM,CAACnB,qBAApC;AACA,OAAKE,kBAAL,GAA0BiB,MAAM,CAACjB,kBAAjC;AACA,OAAKD,oBAAL,CAA0BiB,IAA1B,CAAgCC,MAAM,CAAClB,oBAAvC;AAEA,OAAKE,YAAL,GAAoBgB,MAAM,CAAChB,YAA3B;;AAEA,MAAKgB,MAAM,CAACT,KAAZ,EAAoB;AAEnB,SAAKA,KAAL,GAAa,CAAE,KAAKA,KAAL,IAAc,IAAIpB,KAAJ,EAAhB,EAA8B4B,IAA9B,CAAoCC,MAAM,CAACT,KAA3C,CAAb;AAEA,GAJD,MAIO;AAEN,SAAKA,KAAL,GAAa,IAAb;AAEA;;AAED,OAAKC,YAAL,GAAoBQ,MAAM,CAACR,YAA3B;AACA,OAAKC,eAAL,GAAuBO,MAAM,CAACP,eAA9B;AAEA,SAAO,IAAP;AAEA,CAnCD;;AAqCA,SAASpB,oBAAT","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\nimport { MathUtils } from '../math/MathUtils.js';\n\n/**\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  reflectivity: <float>,\n *  ior: <float>,\n *\n *  sheen: <Color>,\n *\n *  transmission: <float>,\n *  transmissionMap: new THREE.Texture( <Image> )\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.clearcoat = 0.0;\n\tthis.clearcoatMap = null;\n\tthis.clearcoatRoughness = 0.0;\n\tthis.clearcoatRoughnessMap = null;\n\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\tthis.clearcoatNormalMap = null;\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tObject.defineProperty( this, 'ior', {\n\t\tget: function () {\n\n\t\t\treturn ( 1 + 0.4 * this.reflectivity ) / ( 1 - 0.4 * this.reflectivity );\n\n\t\t},\n\t\tset: function ( ior ) {\n\n\t\t\tthis.reflectivity = MathUtils.clamp( 2.5 * ( ior - 1 ) / ( ior + 1 ), 0, 1 );\n\n\t\t}\n\t} );\n\n\tthis.sheen = null; // null will disable sheen bsdf\n\n\tthis.transmission = 0.0;\n\tthis.transmissionMap = null;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.clearcoat = source.clearcoat;\n\tthis.clearcoatMap = source.clearcoatMap;\n\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\tthis.reflectivity = source.reflectivity;\n\n\tif ( source.sheen ) {\n\n\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t} else {\n\n\t\tthis.sheen = null;\n\n\t}\n\n\tthis.transmission = source.transmission;\n\tthis.transmissionMap = source.transmissionMap;\n\n\treturn this;\n\n};\n\nexport { MeshPhysicalMaterial };\n"]},"metadata":{},"sourceType":"module"}