{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nvar _vector = /*@__PURE__*/new Vector3();\n\nclass SpotLightHelper extends Object3D {\n  constructor(light, color) {\n    super();\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    var geometry = new BufferGeometry();\n    var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n    for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n      var p1 = i / l * Math.PI * 2;\n      var p2 = j / l * Math.PI * 2;\n      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n    }\n\n    geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n    var material = new LineBasicMaterial({\n      fog: false,\n      toneMapped: false\n    });\n    this.cone = new LineSegments(geometry, material);\n    this.add(this.cone);\n    this.update();\n  }\n\n  dispose() {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n\n  update() {\n    this.light.updateMatrixWorld();\n    var coneLength = this.light.distance ? this.light.distance : 1000;\n    var coneWidth = coneLength * Math.tan(this.light.angle);\n    this.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n    _vector.setFromMatrixPosition(this.light.target.matrixWorld);\n\n    this.cone.lookAt(_vector);\n\n    if (this.color !== undefined) {\n      this.cone.material.color.set(this.color);\n    } else {\n      this.cone.material.color.copy(this.light.color);\n    }\n  }\n\n}\n\nexport { SpotLightHelper };","map":{"version":3,"sources":["/Users/sebringrose/Projects/theEmpire/website/client/node_modules/three/src/helpers/SpotLightHelper.js"],"names":["Vector3","Object3D","LineSegments","LineBasicMaterial","Float32BufferAttribute","BufferGeometry","_vector","SpotLightHelper","constructor","light","color","updateMatrixWorld","matrix","matrixWorld","matrixAutoUpdate","geometry","positions","i","j","l","p1","Math","PI","p2","push","cos","sin","setAttribute","material","fog","toneMapped","cone","add","update","dispose","coneLength","distance","coneWidth","tan","angle","scale","set","setFromMatrixPosition","target","lookAt","undefined","copy"],"mappings":"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","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { SpotLightHelper };\n"]},"metadata":{},"sourceType":"module"}